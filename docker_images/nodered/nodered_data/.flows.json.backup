[
    {
        "id": "tab_settings",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_tag_tables",
        "type": "tab",
        "label": "Tag Tables",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_database_sql",
        "type": "tab",
        "label": "Database",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_connections",
        "type": "tab",
        "label": "Connections",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_triggers",
        "type": "tab",
        "label": "Triggers",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2dbd8c6f774fdb61",
        "type": "tab",
        "label": "Connections Demo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_triggers_demo",
        "type": "tab",
        "label": "Triggers Demo",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "9a594799132c8131",
        "type": "tab",
        "label": "Simulations",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_publishers",
        "type": "tab",
        "label": "Publishers",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "tab_errors",
        "type": "tab",
        "label": "Errors",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_status",
        "type": "tab",
        "label": "Status",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_dashboard",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_grafana_api",
        "type": "tab",
        "label": "Download Grafana Image",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e80d3ea51136b92a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "sf_machines",
        "type": "subflow",
        "name": "Machines",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "aa1095426398d4a2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 790,
                "y": 220,
                "wires": [
                    {
                        "id": "b755f1359e2cca04",
                        "port": 0
                    },
                    {
                        "id": "19f3487286b11943",
                        "port": 0
                    },
                    {
                        "id": "90d29f1b9188b78b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1020,
                "y": 340,
                "wires": [
                    {
                        "id": "c3c2361355d4a0c4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DATABASE",
                "type": "str",
                "value": "edge",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SCHEMA",
                "type": "str",
                "value": "public",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TABLE",
                "type": "str",
                "value": "machines",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "to_database",
            "to_next"
        ],
        "icon": "font-awesome/fa-automobile",
        "status": {
            "x": 660,
            "y": 440,
            "wires": [
                {
                    "id": "8b026abd77d214b9",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "sf_endpoints",
        "type": "subflow",
        "name": "Endpoints",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "a50b2db7656d36e4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 790,
                "y": 180,
                "wires": [
                    {
                        "id": "3123ac1deab5f251",
                        "port": 0
                    },
                    {
                        "id": "da767bf21adabe42",
                        "port": 0
                    },
                    {
                        "id": "4d4c4616a70beee5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1060,
                "y": 440,
                "wires": [
                    {
                        "id": "2174b79660ae402d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DATABASE",
                "type": "str",
                "value": "edge",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SCHEMA",
                "type": "str",
                "value": "public",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TABLE",
                "type": "str",
                "value": "endpoints",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "to_database",
            "to_next"
        ],
        "icon": "font-awesome/fa-plug",
        "status": {
            "x": 540,
            "y": 440,
            "wires": [
                {
                    "id": "ed6d8d4a91cc9da2",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "sf_triggers",
        "type": "subflow",
        "name": "Triggers",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "b2a4cb412b9ec286"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 790,
                "y": 180,
                "wires": [
                    {
                        "id": "ce26e11ab0828594",
                        "port": 0
                    },
                    {
                        "id": "a1621dd8e9e352f6",
                        "port": 0
                    },
                    {
                        "id": "93c1505b0fccbfe7",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1060,
                "y": 440,
                "wires": [
                    {
                        "id": "961965a0055fb1bd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DATABASE",
                "type": "str",
                "value": "edge",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SCHEMA",
                "type": "str",
                "value": "config",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TABLE",
                "type": "str",
                "value": "triggers",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "to_database",
            "to_next"
        ],
        "icon": "font-awesome/fa-flash",
        "status": {
            "x": 520,
            "y": 440,
            "wires": [
                {
                    "id": "ac06982622d7aeb3",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "sf_tag_tables_config",
        "type": "subflow",
        "name": "Tag Tables Config",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "b0e07cfe068bad1f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 790,
                "y": 220,
                "wires": [
                    {
                        "id": "f4196adaf4b495fc",
                        "port": 0
                    },
                    {
                        "id": "cf3a69ba53110e22",
                        "port": 0
                    },
                    {
                        "id": "89e5ecbbf9264cc4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1060,
                "y": 440,
                "wires": [
                    {
                        "id": "e7395bef25d1c1bf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DATABASE",
                "type": "str",
                "value": "edge",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SCHEMA",
                "type": "str",
                "value": "config",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TABLE",
                "type": "str",
                "value": "tag_tables_config",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TAGS_SCHEMA",
                "type": "str",
                "value": "tags",
                "ui": {
                    "icon": "font-awesome/fa-tags",
                    "label": {
                        "en-US": "Tags Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "DATA_SCHEMA",
                "type": "str",
                "value": "public",
                "ui": {
                    "icon": "font-awesome/fa-area-chart",
                    "label": {
                        "en-US": "Data Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "to_database",
            "to_next"
        ],
        "icon": "font-awesome/fa-cog",
        "status": {
            "x": 540,
            "y": 440,
            "wires": [
                {
                    "id": "e7fded8890d93372",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "sf_tag_table",
        "type": "subflow",
        "name": "Tag Table",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 200,
                "wires": [
                    {
                        "id": "df46bed50bf4daed"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 790,
                "y": 200,
                "wires": [
                    {
                        "id": "7c52eb13244670e4",
                        "port": 0
                    },
                    {
                        "id": "60bd7628bf41b9fc",
                        "port": 0
                    },
                    {
                        "id": "a5a228e2f528d133",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DATABASE",
                "type": "str",
                "value": "edge",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SCHEMA",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TABLE",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "DATA_SCHEMA",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-dot-circle-o",
                    "label": {
                        "en-US": "Data Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "DATA_TABLE",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-area-chart",
                    "label": {
                        "en-US": "Data Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "PROTOCOL",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-cog",
                    "label": {
                        "en-US": "Protocol"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env",
                            "conf-types"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#D8BFD8",
        "outputLabels": [
            "to_database"
        ],
        "icon": "font-awesome/fa-tags",
        "status": {
            "x": 540,
            "y": 420,
            "wires": [
                {
                    "id": "5bee533b3895ff7d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "sf_data_handler",
        "type": "subflow",
        "name": "Data Handler",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "1e02bad20c4678c8"
                    },
                    {
                        "id": "0746e62dae658d4e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 830,
                "y": 220,
                "wires": [
                    {
                        "id": "0f0a228ee2485f05",
                        "port": 0
                    },
                    {
                        "id": "e0b7b86e0fe972d0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ENDPOINT_ID",
                "type": "num",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-plug",
                    "label": {
                        "en-US": "Endpoint ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TAG_TABLE",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-tags",
                    "label": {
                        "en-US": "Tag Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#C7E9C0",
        "outputLabels": [
            "dynamic_out"
        ],
        "icon": "font-awesome/fa-braille",
        "status": {
            "x": 780,
            "y": 340,
            "wires": [
                {
                    "id": "414e445a894e624d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "sf_trigger_handler",
        "type": "subflow",
        "name": "Trigger Handler",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 120,
                "wires": [
                    {
                        "id": "c666567005681eae"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 690,
                "y": 120,
                "wires": [
                    {
                        "id": "0508d805f74e5f67",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "TRIGGER_ID",
                "type": "num",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-flash",
                    "label": {
                        "en-US": "Trigger ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TAG_TABLE",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-tags",
                    "label": {
                        "en-US": "Tag Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#C7E9C0",
        "outputLabels": [
            "to_endpoint_control"
        ],
        "icon": "font-awesome/fa-braille",
        "status": {
            "x": 620,
            "y": 240,
            "wires": [
                {
                    "id": "ad705621ff62a773",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "sf_simulator",
        "type": "subflow",
        "name": "Simulator",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "36933a576cbc8d2d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 770,
                "y": 240,
                "wires": [
                    {
                        "id": "897168b439eba41b",
                        "port": 0
                    },
                    {
                        "id": "28b05381dcc5cbb9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "TAG_TABLE",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-tags",
                    "label": {
                        "en-US": "Tag Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "DATA_TABLE",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Data Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "ENDPOINT_ID",
                "type": "num",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-plug",
                    "label": {
                        "en-US": "Endpoint ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "CYCLE_TIME",
                "type": "num",
                "value": "900",
                "ui": {
                    "icon": "font-awesome/fa-clock-o",
                    "label": {
                        "en-US": "Cycle Time (s)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#FDF0C2",
        "outputLabels": [
            "to_database"
        ],
        "icon": "@flowfuse/node-red-dashboard/ui-gauge.svg",
        "status": {
            "x": 720,
            "y": 380,
            "wires": [
                {
                    "id": "1d780b05536feb75",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "aa1095426398d4a2",
        "type": "junction",
        "z": "sf_machines",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "33c484973ec32be3",
                "06218415e5cd1cd9"
            ]
        ]
    },
    {
        "id": "fb18fb9dd24d4a7d",
        "type": "junction",
        "z": "sf_machines",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "bd899c1ea15c5f76",
                "cf35598e75a95852"
            ]
        ]
    },
    {
        "id": "a50b2db7656d36e4",
        "type": "junction",
        "z": "sf_endpoints",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "43c1c84c388d6f53",
                "9a5e06c77b4816e3"
            ]
        ]
    },
    {
        "id": "931179e7bf82fd62",
        "type": "junction",
        "z": "sf_endpoints",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "6ce1145fad4c371b",
                "aa6eef9ee243c8f9"
            ]
        ]
    },
    {
        "id": "df46bed50bf4daed",
        "type": "junction",
        "z": "sf_tag_table",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "289ed522f9d46c0e",
                "950353991ce401e6"
            ]
        ]
    },
    {
        "id": "fb4ae1d74584cfe9",
        "type": "junction",
        "z": "sf_tag_table",
        "x": 660,
        "y": 80,
        "wires": [
            [
                "9fded1b5e119a203",
                "5eec11117ed59706"
            ]
        ]
    },
    {
        "id": "b0e07cfe068bad1f",
        "type": "junction",
        "z": "sf_tag_tables_config",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "a32e742fd6349a59",
                "3f0b799a977415c5"
            ]
        ]
    },
    {
        "id": "1639cbdd260d2cff",
        "type": "junction",
        "z": "sf_tag_tables_config",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "6b787d1e94828298",
                "867b0a31a6575085"
            ]
        ]
    },
    {
        "id": "36933a576cbc8d2d",
        "type": "junction",
        "z": "sf_simulator",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "7cbb3f089bb76e14",
                "814c0a6f9d540e5a"
            ]
        ]
    },
    {
        "id": "acbdb652a665445a",
        "type": "junction",
        "z": "tab_publishers",
        "d": true,
        "x": 600,
        "y": 520,
        "wires": [
            [
                "f9013dbd8c8f165c",
                "4691f00421186101"
            ]
        ]
    },
    {
        "id": "3831dd3dfb7cfd2a",
        "type": "junction",
        "z": "tab_publishers",
        "d": true,
        "x": 600,
        "y": 240,
        "wires": [
            [
                "81172c41b88738e4",
                "a4c21410cda55d68"
            ]
        ]
    },
    {
        "id": "b2a4cb412b9ec286",
        "type": "junction",
        "z": "sf_triggers",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "e87455918a3e5b34",
                "b6db554076626d0f"
            ]
        ]
    },
    {
        "id": "b04b2a27a423ecac",
        "type": "junction",
        "z": "sf_triggers",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "c8a2d8d6fc55e49d",
                "b5d4e64ea87f3197"
            ]
        ]
    },
    {
        "id": "c666567005681eae",
        "type": "junction",
        "z": "sf_trigger_handler",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "0508d805f74e5f67"
            ]
        ]
    },
    {
        "id": "c6d817962b44c6e6",
        "type": "ui-page",
        "name": "Home",
        "ui": "d7cef5fd92f5328c",
        "path": "/home",
        "icon": "home",
        "layout": "grid",
        "theme": "70ee3095f0c0fa3d",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "4"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "4"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "8"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "ef80b7f9fd2b8842",
        "type": "ui-page",
        "name": "Settings",
        "ui": "d7cef5fd92f5328c",
        "path": "/settings",
        "icon": "cog",
        "layout": "grid",
        "theme": "70ee3095f0c0fa3d",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 8,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "4290ffc4397af8c8",
        "type": "ui-group",
        "name": "General",
        "page": "ef80b7f9fd2b8842",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "841bfed957343a4e",
        "type": "postgreSQLConfig",
        "name": "edge",
        "host": "postgres_host",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "edge",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "edge",
        "userFieldType": "str",
        "password": "edgeadmin",
        "passwordFieldType": "str"
    },
    {
        "id": "70c20df5376a0781",
        "type": "postgreSQLConfig",
        "name": "postgres",
        "host": "postgres_host",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "edge",
        "userFieldType": "str",
        "password": "edgeadmin",
        "passwordFieldType": "str"
    },
    {
        "id": "f58d6568eff22cd8",
        "type": "ui-page",
        "name": "Tags",
        "ui": "d7cef5fd92f5328c",
        "path": "/tags",
        "icon": "tag-multiple",
        "layout": "grid",
        "theme": "70ee3095f0c0fa3d",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 9,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "362ab153d16b0184",
        "type": "ui-group",
        "name": "Tag Tables",
        "page": "f58d6568eff22cd8",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "37b363877270d9e5",
        "type": "ui-page",
        "name": "Quality Check",
        "ui": "d7cef5fd92f5328c",
        "path": "/quality",
        "icon": "check-circle",
        "layout": "grid",
        "theme": "70ee3095f0c0fa3d",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 7,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "169cdd00f95ae9ec",
        "type": "ui-link",
        "name": "Grafana Dashboards",
        "ui": "d7cef5fd92f5328c",
        "path": "http://localhost:33000/dashboards",
        "icon": "view-dashboard",
        "order": 3,
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "cd967f59a4be5e3e",
        "type": "ui-link",
        "name": "Postgres",
        "ui": "d7cef5fd92f5328c",
        "path": "http://localhost:30080",
        "icon": "database",
        "order": 11,
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "adb18ba1158c56cb",
        "type": "ui-link",
        "name": "Flows",
        "ui": "d7cef5fd92f5328c",
        "path": "http://localhost:1880",
        "icon": "nodejs",
        "order": 10,
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "75bdba4116cbda98",
        "type": "ui-link",
        "name": "File Manager",
        "ui": "d7cef5fd92f5328c",
        "path": "http://localhost:8080",
        "icon": "bookshelf",
        "order": 12,
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "421eb04f2d5bdf0b",
        "type": "ui-page",
        "name": "Info",
        "ui": "d7cef5fd92f5328c",
        "path": "/info",
        "icon": "information-outline",
        "layout": "grid",
        "theme": "70ee3095f0c0fa3d",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 13,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "cc7097053e18c5dd",
        "type": "ui-group",
        "name": "Guide",
        "page": "421eb04f2d5bdf0b",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "8d063f670d0ce677",
        "type": "ui-link",
        "name": "Log Out",
        "ui": "d7cef5fd92f5328c",
        "path": "http://localhost:1880/dashboard",
        "icon": "logout",
        "order": 14,
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "306c397b2e30ed2d",
        "type": "ui-page",
        "name": "User",
        "ui": "d7cef5fd92f5328c",
        "path": "/user",
        "icon": "account",
        "layout": "grid",
        "theme": "d2000f3a4bb37e26",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "ddcd364324b986d4",
        "type": "ui-link",
        "name": "Kiln - Overview",
        "ui": "d7cef5fd92f5328c",
        "path": "http://localhost:33000/d/reversyover1/reversy-klin-overview",
        "icon": "finance",
        "order": 4,
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4e5c14400a0752c4",
        "type": "ui-link",
        "name": "Kiln - Table View",
        "ui": "d7cef5fd92f5328c",
        "path": "http://localhost:33000/d/ee95strjzpn28n/lime-kiln-dynamic-items",
        "icon": "table",
        "order": 5,
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "2ddfea8a7d302f4a",
        "type": "ui-link",
        "name": "Kiln - Cycle Details",
        "ui": "d7cef5fd92f5328c",
        "path": "http://localhost:33000/d/ee95strjzpn28b/lime-klin-cycle-details",
        "icon": "gauge",
        "order": 6,
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c93d09cb7b5cce69",
        "type": "ui-group",
        "name": " Logo 1",
        "page": "c6d817962b44c6e6",
        "width": "4",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "deea34721062895a",
        "type": "ui-group",
        "name": "Logo 2",
        "page": "c6d817962b44c6e6",
        "width": "4",
        "height": "1",
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": true,
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ba72fb0711f52597",
        "type": "ui-group",
        "name": "Logo 3",
        "page": "c6d817962b44c6e6",
        "width": "4",
        "height": "1",
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ba4f9fa439e03272",
        "type": "ui-group",
        "name": "Body 1",
        "page": "c6d817962b44c6e6",
        "width": "4",
        "height": "1",
        "order": 5,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "87bd6109d20d1ec2",
        "type": "ui-group",
        "name": "Body 2",
        "page": "c6d817962b44c6e6",
        "width": "4",
        "height": "1",
        "order": 6,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "56a704c5086d73e5",
        "type": "ui-group",
        "name": "Body 3",
        "page": "c6d817962b44c6e6",
        "width": "4",
        "height": "1",
        "order": 7,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "181ab7e590952d63",
        "type": "ui-group",
        "name": "Plant",
        "page": "c6d817962b44c6e6",
        "width": "12",
        "height": "1",
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "332cfdc7d3ad9b5b",
        "type": "ui-group",
        "name": "User Info",
        "page": "306c397b2e30ed2d",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d7cef5fd92f5328c",
        "type": "ui-base",
        "name": "InSphere",
        "path": "/dashboard",
        "appIcon": "/img/InSphere.ico",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "fixed",
        "titleBarStyle": "fixed",
        "showReconnectNotification": true,
        "notificationDisplayTime": "1",
        "showDisconnectNotification": true
    },
    {
        "id": "70ee3095f0c0fa3d",
        "type": "ui-theme",
        "name": "Light",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0e54af",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "d2000f3a4bb37e26",
        "type": "ui-theme",
        "name": "Dark",
        "colors": {
            "surface": "#3c3c3c",
            "primary": "#222958",
            "bgPage": "#5c5c5c",
            "groupBg": "#464646",
            "groupOutline": "#808080"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "ece6c13378a449d4",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "28dd6f2de8ecc7e2",
        "type": "ui-group",
        "name": "Limestone Parameters",
        "page": "37b363877270d9e5",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "S7endpoint_e20",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "192.168.1.48",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "0",
        "timeout": "5000",
        "name": "",
        "vartable": [
            {
                "addr": "DB121,R0",
                "name": "CY"
            },
            {
                "addr": "DB121,R4",
                "name": "S"
            },
            {
                "addr": "DB121,R8",
                "name": "TCY"
            },
            {
                "addr": "DB121,R12",
                "name": "TCO"
            },
            {
                "addr": "DB121,R16",
                "name": "TI"
            },
            {
                "addr": "DB121,R20",
                "name": "TStop"
            },
            {
                "addr": "DB121,R24",
                "name": "TFS"
            },
            {
                "addr": "DB121,R28",
                "name": "LSCYpv"
            },
            {
                "addr": "DB121,R32",
                "name": "LSCYsp"
            },
            {
                "addr": "DB121,R36",
                "name": "LCY"
            },
            {
                "addr": "DB121,R40",
                "name": "NP"
            },
            {
                "addr": "DB121,R44",
                "name": "HCpv"
            },
            {
                "addr": "DB121,R48",
                "name": "HCsp"
            },
            {
                "addr": "DB121,R52",
                "name": "FCYpv"
            },
            {
                "addr": "DB121,R56",
                "name": "FCYsp"
            },
            {
                "addr": "DB121,R60",
                "name": "FFpv"
            },
            {
                "addr": "DB121,R64",
                "name": "FFsp"
            },
            {
                "addr": "DB121,R68",
                "name": "LHV"
            },
            {
                "addr": "DB121,R72",
                "name": "SA"
            },
            {
                "addr": "DB121,R76",
                "name": "CAF"
            },
            {
                "addr": "DB121,R80",
                "name": "EANpv"
            },
            {
                "addr": "DB121,R84",
                "name": "EANsp"
            },
            {
                "addr": "DB121,R88",
                "name": "LCAF"
            },
            {
                "addr": "DB121,R92",
                "name": "ALCpv"
            },
            {
                "addr": "DB121,R96",
                "name": "ALCsp"
            },
            {
                "addr": "DB121,R100",
                "name": "TC1"
            },
            {
                "addr": "DB121,R104",
                "name": "TC2"
            },
            {
                "addr": "DB121,R108",
                "name": "TWG"
            },
            {
                "addr": "DB121,R112",
                "name": "TFLT"
            },
            {
                "addr": "DB121,R116",
                "name": "LT1"
            },
            {
                "addr": "DB121,R120",
                "name": "LT2"
            },
            {
                "addr": "DB121,R124",
                "name": "LT3"
            },
            {
                "addr": "DB121,R128",
                "name": "LT4"
            },
            {
                "addr": "DB121,R132",
                "name": "LT5"
            },
            {
                "addr": "DB121,R136",
                "name": "LT6"
            },
            {
                "addr": "DB121,R140",
                "name": "LT7"
            },
            {
                "addr": "DB121,R144",
                "name": "LT8"
            },
            {
                "addr": "DB121,R148",
                "name": "LT9"
            },
            {
                "addr": "DB121,R152",
                "name": "LT10"
            },
            {
                "addr": "DB121,R156",
                "name": "LT11"
            },
            {
                "addr": "DB121,R160",
                "name": "LT12"
            },
            {
                "addr": "DB121,R164",
                "name": "LT13"
            },
            {
                "addr": "DB121,R168",
                "name": "LT14"
            },
            {
                "addr": "DB121,R172",
                "name": "LT15"
            },
            {
                "addr": "DB121,R176",
                "name": "LT16"
            },
            {
                "addr": "DB121,R180",
                "name": "CBAP"
            },
            {
                "addr": "DB121,R184",
                "name": "CLAP"
            },
            {
                "addr": "DB121,R188",
                "name": "CHAP"
            },
            {
                "addr": "DB121,R192",
                "name": "CTAP"
            },
            {
                "addr": "DB121,R196",
                "name": "ATMP"
            },
            {
                "addr": "DB121,R200",
                "name": "LCAPS1"
            },
            {
                "addr": "DB121,R204",
                "name": "LCAPS2"
            },
            {
                "addr": "DB121,R208",
                "name": "S1tot"
            },
            {
                "addr": "DB121,R212",
                "name": "S1PS"
            },
            {
                "addr": "DB121,R216",
                "name": "S1SS"
            },
            {
                "addr": "DB121,R220",
                "name": "S2tot"
            },
            {
                "addr": "DB121,R224",
                "name": "S2PS"
            },
            {
                "addr": "DB121,R228",
                "name": "S2SS"
            },
            {
                "addr": "DB121,R232",
                "name": "DBLINE1"
            },
            {
                "addr": "DB121,R236",
                "name": "DBLINE2"
            },
            {
                "addr": "DB121,R240",
                "name": "DBLINE3"
            },
            {
                "addr": "DB121,R244",
                "name": "DBLINE4"
            },
            {
                "addr": "DB121,R248",
                "name": "DBLINE5"
            },
            {
                "addr": "DB121,R252",
                "name": "DBLINE6"
            },
            {
                "addr": "DB121,R256",
                "name": "DBLINE7"
            },
            {
                "addr": "DB121,R260",
                "name": "DBLINE8"
            },
            {
                "addr": "DB121,R264",
                "name": "DBLINE9"
            },
            {
                "addr": "DB121,R268",
                "name": "RATIOS1LN1"
            },
            {
                "addr": "DB121,R272",
                "name": "RATIOS1LN2"
            },
            {
                "addr": "DB121,R276",
                "name": "RATIOS1LN3"
            },
            {
                "addr": "DB121,R280",
                "name": "RATIOS1LN4"
            },
            {
                "addr": "DB121,R284",
                "name": "RATIOS1LN5"
            },
            {
                "addr": "DB121,R288",
                "name": "RATIOS1LN6"
            },
            {
                "addr": "DB121,R292",
                "name": "RATIOS1LN7"
            },
            {
                "addr": "DB121,R296",
                "name": "RATIOS1LN8"
            },
            {
                "addr": "DB121,R300",
                "name": "RATIOS1LN9"
            },
            {
                "addr": "DB121,R304",
                "name": "RATIOS2LN1"
            },
            {
                "addr": "DB121,R308",
                "name": "RATIOS2LN2"
            },
            {
                "addr": "DB121,R312",
                "name": "RATIOS2LN3"
            },
            {
                "addr": "DB121,R316",
                "name": "RATIOS2LN4"
            },
            {
                "addr": "DB121,R320",
                "name": "RATIOS2LN5"
            },
            {
                "addr": "DB121,R324",
                "name": "RATIOS2LN6"
            },
            {
                "addr": "DB121,R328",
                "name": "RATIOS2LN7"
            },
            {
                "addr": "DB121,R332",
                "name": "RATIOS2LN8"
            },
            {
                "addr": "DB121,R336",
                "name": "RATIOS2LN9"
            },
            {
                "addr": "DB121,R340",
                "name": "S1SPEEDL1"
            },
            {
                "addr": "DB121,R344",
                "name": "S1SPEEDL2"
            },
            {
                "addr": "DB121,R348",
                "name": "S1SPEEDL3"
            },
            {
                "addr": "DB121,R352",
                "name": "S1SPEEDL4"
            },
            {
                "addr": "DB121,R356",
                "name": "S1SPEEDL5"
            },
            {
                "addr": "DB121,R360",
                "name": "S1SPEEDL6"
            },
            {
                "addr": "DB121,R364",
                "name": "S1SPEEDL7"
            },
            {
                "addr": "DB121,R368",
                "name": "S1SPEEDL8"
            },
            {
                "addr": "DB121,R372",
                "name": "S1SPEEDL9"
            },
            {
                "addr": "DB121,R376",
                "name": "S2SPEEDL1"
            },
            {
                "addr": "DB121,R380",
                "name": "S2SPEEDL2"
            },
            {
                "addr": "DB121,R384",
                "name": "S2SPEEDL3"
            },
            {
                "addr": "DB121,R388",
                "name": "S2SPEEDL4"
            },
            {
                "addr": "DB121,R392",
                "name": "S2SPEEDL5"
            },
            {
                "addr": "DB121,R396",
                "name": "S2SPEEDL6"
            },
            {
                "addr": "DB121,R400",
                "name": "S2SPEEDL7"
            },
            {
                "addr": "DB121,R404",
                "name": "S2SPEEDL8"
            },
            {
                "addr": "DB121,R408",
                "name": "S2SPEEDL9"
            },
            {
                "addr": "DB121,R412",
                "name": "COALTANKP"
            },
            {
                "addr": "DB121,R416",
                "name": "COALTANKT"
            },
            {
                "addr": "DB121,R420",
                "name": "HYT"
            },
            {
                "addr": "DB121,R424",
                "name": "HYP"
            },
            {
                "addr": "DB121,R428",
                "name": "TWait"
            },
            {
                "addr": "DB121,R432",
                "name": "TOff"
            },
            {
                "addr": "DB121,R436",
                "name": "TWait1"
            },
            {
                "addr": "DB121,R440",
                "name": "TWait2"
            },
            {
                "addr": "DB121,R444",
                "name": "TWait3"
            },
            {
                "addr": "DB121,R448",
                "name": "TWait4"
            },
            {
                "addr": "DB121,R452",
                "name": "TWait5"
            },
            {
                "addr": "DB121,R456",
                "name": "TWait6"
            },
            {
                "addr": "DB121,R460",
                "name": "TWait7"
            },
            {
                "addr": "DB121,R464",
                "name": "TWait8"
            },
            {
                "addr": "DB121,R468",
                "name": "TWait9"
            },
            {
                "addr": "DB121,R472",
                "name": "TOff1"
            },
            {
                "addr": "DB121,R476",
                "name": "TOff2"
            },
            {
                "addr": "DB121,R480",
                "name": "TOff3"
            },
            {
                "addr": "DB121,R484",
                "name": "TOff4"
            },
            {
                "addr": "DB121,R492",
                "name": "SKIP_ULD1CHpv"
            },
            {
                "addr": "DB121,R496",
                "name": "PIPE_ULD1CHpv"
            },
            {
                "addr": "DB121,R500",
                "name": "ULD1CHsp"
            },
            {
                "addr": "DB121,R504",
                "name": "SKIP_ULD2CHpv"
            },
            {
                "addr": "DB121,R508",
                "name": "PIPE_ULD2CHpv"
            },
            {
                "addr": "DB121,R512",
                "name": "ULD2CHsp"
            },
            {
                "addr": "DB121,R516",
                "name": "SKIP_ULD3CHpv"
            },
            {
                "addr": "DB121,R520",
                "name": "PIPE_ULD3CHpv"
            },
            {
                "addr": "DB121,R524",
                "name": "ULD3CHsp"
            },
            {
                "addr": "DB121,R528",
                "name": "LSCY1pv"
            },
            {
                "addr": "DB121,R532",
                "name": "LSCY1sp"
            },
            {
                "addr": "DB121,R536",
                "name": "LSCY2pv"
            },
            {
                "addr": "DB121,R540",
                "name": "LSCY2sp"
            },
            {
                "addr": "DB121,R544",
                "name": "LSCY3pv"
            },
            {
                "addr": "DB121,R548",
                "name": "LSCY3sp"
            },
            {
                "addr": "DB121,R552",
                "name": "TCH1"
            },
            {
                "addr": "DB121,R556",
                "name": "TCH2"
            },
            {
                "addr": "DB121,R560",
                "name": "TCH3"
            },
            {
                "addr": "DB121,R564",
                "name": "LSTARCMB"
            },
            {
                "addr": "DB121,R568",
                "name": "LSTOPCMB"
            },
            {
                "addr": "DB121,R572",
                "name": "LSTARPRH"
            },
            {
                "addr": "DB121,R576",
                "name": "LSTOPPRH"
            },
            {
                "addr": "DB121,R580",
                "name": "LVLCMBsp"
            },
            {
                "addr": "DB121,R584",
                "name": "LVLPRHsp"
            },
            {
                "addr": "DB121,R588",
                "name": "EXTCMB"
            },
            {
                "addr": "DB121,R592",
                "name": "EXTPRH"
            },
            {
                "addr": "DB121,R596",
                "name": "S1EXTAUTO"
            },
            {
                "addr": "DB121,R600",
                "name": "S2EXTAUTO"
            },
            {
                "addr": "DB121,R604",
                "name": "S1MNRATIO"
            },
            {
                "addr": "DB121,R608",
                "name": "S1SCRATIO"
            },
            {
                "addr": "DB121,R612",
                "name": "S1FSTLVL"
            },
            {
                "addr": "DB121,R616",
                "name": "S1STROKsp"
            },
            {
                "addr": "DB121,R620",
                "name": "S1SDELAYsp"
            },
            {
                "addr": "DB121,R624",
                "name": "S1FSTSTRT"
            },
            {
                "addr": "DB121,R628",
                "name": "S2MNRATIO"
            },
            {
                "addr": "DB121,R632",
                "name": "S2SCRATIO"
            },
            {
                "addr": "DB121,R636",
                "name": "S2FSTLVL"
            },
            {
                "addr": "DB121,R640",
                "name": "S2STROKsp"
            },
            {
                "addr": "DB121,R644",
                "name": "S2SDELAYsp"
            },
            {
                "addr": "DB121,R648",
                "name": "S2FSTSTR"
            },
            {
                "addr": "DB121,R652",
                "name": "EANAUTO"
            },
            {
                "addr": "DB121,R656",
                "name": "ALCAUTO"
            },
            {
                "addr": "DB121,R660",
                "name": "FUELAUTO"
            },
            {
                "addr": "DB121,R664",
                "name": "FILTERAUTO"
            },
            {
                "addr": "DB121,R668",
                "name": "REDAUTO"
            },
            {
                "addr": "DB121,R672",
                "name": "CUTAUTO"
            },
            {
                "addr": "DB121,R676",
                "name": "TSTRREDsp"
            },
            {
                "addr": "DB121,R680",
                "name": "TSTPREDsp"
            },
            {
                "addr": "DB121,R684",
                "name": "PERCREDsp"
            },
            {
                "addr": "DB121,R688",
                "name": "TSTRCUTsp"
            },
            {
                "addr": "DB121,R692",
                "name": "TSTPCUTsp"
            },
            {
                "addr": "DB121,R696",
                "name": "REDENABL"
            },
            {
                "addr": "DB121,R700",
                "name": "REDTIMEpv"
            },
            {
                "addr": "DB121,R704",
                "name": "CUTENABL"
            },
            {
                "addr": "DB121,R708",
                "name": "CUTTIMEpv"
            },
            {
                "addr": "DB121,R712",
                "name": "PATM"
            },
            {
                "addr": "DB121,R716",
                "name": "FCVS1pv"
            },
            {
                "addr": "DB121,R720",
                "name": "FCVS1sp"
            },
            {
                "addr": "DB121,R724",
                "name": "FCVS1AUTO"
            },
            {
                "addr": "DB121,R728",
                "name": "FCVS2pv"
            },
            {
                "addr": "DB121,R732",
                "name": "FCVS2sp"
            },
            {
                "addr": "DB121,R736",
                "name": "FCVS2AUTO"
            },
            {
                "addr": "DB121,R740",
                "name": "CMB1pv"
            },
            {
                "addr": "DB121,R744",
                "name": "CMB1sp"
            },
            {
                "addr": "DB121,R748",
                "name": "CMB2pv"
            },
            {
                "addr": "DB121,R752",
                "name": "CMB2SP"
            },
            {
                "addr": "DB121,R756",
                "name": "CMB3pv"
            },
            {
                "addr": "DB121,R760",
                "name": "CMB3sp"
            },
            {
                "addr": "DB121,R764",
                "name": "LCB1pv"
            },
            {
                "addr": "DB121,R768",
                "name": "LCB1sp"
            },
            {
                "addr": "DB121,R772",
                "name": "LCB2pv"
            },
            {
                "addr": "DB121,R776",
                "name": "LCB2sp"
            },
            {
                "addr": "DB121,R780",
                "name": "FANpv"
            },
            {
                "addr": "DB121,R784",
                "name": "FANsp"
            },
            {
                "addr": "DB121,R788",
                "name": "S1CAPSPpv"
            },
            {
                "addr": "DB121,R792",
                "name": "S1CAPSPsp"
            },
            {
                "addr": "DB121,R796",
                "name": "S2CAPSPpv"
            },
            {
                "addr": "DB121,R800",
                "name": "S2CAPSPsp"
            },
            {
                "addr": "DB121,R804",
                "name": "CTBSPpv"
            },
            {
                "addr": "DB121,R808",
                "name": "CTBSPsp"
            },
            {
                "addr": "DB121,R812",
                "name": "CMB1CUR"
            },
            {
                "addr": "DB121,R816",
                "name": "CMB2CUR"
            },
            {
                "addr": "DB121,R820",
                "name": "CMB3CUR"
            },
            {
                "addr": "DB121,R824",
                "name": "LCB1CUR"
            },
            {
                "addr": "DB121,R828",
                "name": "LCB2CUR"
            },
            {
                "addr": "DB121,R832",
                "name": "FANCUR"
            },
            {
                "addr": "DB121,R836",
                "name": "S1CAPCUR"
            },
            {
                "addr": "DB121,R840",
                "name": "S2CAPCUR"
            },
            {
                "addr": "DB121,R844",
                "name": "CTBCURR"
            },
            {
                "addr": "DB121,R848",
                "name": "HYDP1CUR"
            },
            {
                "addr": "DB121,R852",
                "name": "HYDP2CUR"
            }
        ]
    },
    {
        "id": "S7endpoint_e20_1s",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "192.168.1.48",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "5000",
        "name": "",
        "vartable": [
            {
                "addr": "DB121,R0",
                "name": "CY"
            },
            {
                "addr": "DB121,R4",
                "name": "S"
            },
            {
                "addr": "DB121,R8",
                "name": "TCY"
            },
            {
                "addr": "DB121,R12",
                "name": "TCO"
            },
            {
                "addr": "DB121,R16",
                "name": "TI"
            },
            {
                "addr": "DB121,R20",
                "name": "TStop"
            },
            {
                "addr": "DB121,R24",
                "name": "TFS"
            },
            {
                "addr": "DB121,R28",
                "name": "LSCYpv"
            },
            {
                "addr": "DB121,R32",
                "name": "LSCYsp"
            },
            {
                "addr": "DB121,R36",
                "name": "LCY"
            },
            {
                "addr": "DB121,R40",
                "name": "NP"
            },
            {
                "addr": "DB121,R44",
                "name": "HCpv"
            },
            {
                "addr": "DB121,R48",
                "name": "HCsp"
            },
            {
                "addr": "DB121,R52",
                "name": "FCYpv"
            },
            {
                "addr": "DB121,R56",
                "name": "FCYsp"
            },
            {
                "addr": "DB121,R60",
                "name": "FFpv"
            },
            {
                "addr": "DB121,R64",
                "name": "FFsp"
            },
            {
                "addr": "DB121,R68",
                "name": "LHV"
            },
            {
                "addr": "DB121,R72",
                "name": "SA"
            },
            {
                "addr": "DB121,R76",
                "name": "CAF"
            },
            {
                "addr": "DB121,R80",
                "name": "EANpv"
            },
            {
                "addr": "DB121,R84",
                "name": "EANsp"
            },
            {
                "addr": "DB121,R88",
                "name": "LCAF"
            },
            {
                "addr": "DB121,R92",
                "name": "ALCpv"
            },
            {
                "addr": "DB121,R96",
                "name": "ALCsp"
            },
            {
                "addr": "DB121,R100",
                "name": "TC1"
            },
            {
                "addr": "DB121,R104",
                "name": "TC2"
            },
            {
                "addr": "DB121,R108",
                "name": "TWG"
            },
            {
                "addr": "DB121,R112",
                "name": "TFLT"
            },
            {
                "addr": "DB121,R116",
                "name": "LT1"
            },
            {
                "addr": "DB121,R120",
                "name": "LT2"
            },
            {
                "addr": "DB121,R124",
                "name": "LT3"
            },
            {
                "addr": "DB121,R128",
                "name": "LT4"
            },
            {
                "addr": "DB121,R132",
                "name": "LT5"
            },
            {
                "addr": "DB121,R136",
                "name": "LT6"
            },
            {
                "addr": "DB121,R140",
                "name": "LT7"
            },
            {
                "addr": "DB121,R144",
                "name": "LT8"
            },
            {
                "addr": "DB121,R148",
                "name": "LT9"
            },
            {
                "addr": "DB121,R152",
                "name": "LT10"
            },
            {
                "addr": "DB121,R156",
                "name": "LT11"
            },
            {
                "addr": "DB121,R160",
                "name": "LT12"
            },
            {
                "addr": "DB121,R164",
                "name": "LT13"
            },
            {
                "addr": "DB121,R168",
                "name": "LT14"
            },
            {
                "addr": "DB121,R172",
                "name": "LT15"
            },
            {
                "addr": "DB121,R176",
                "name": "LT16"
            },
            {
                "addr": "DB121,R180",
                "name": "CBAP"
            },
            {
                "addr": "DB121,R184",
                "name": "CLAP"
            },
            {
                "addr": "DB121,R188",
                "name": "CHAP"
            },
            {
                "addr": "DB121,R192",
                "name": "CTAP"
            },
            {
                "addr": "DB121,R196",
                "name": "ATMP"
            },
            {
                "addr": "DB121,R200",
                "name": "LCAPS1"
            },
            {
                "addr": "DB121,R204",
                "name": "LCAPS2"
            },
            {
                "addr": "DB121,R208",
                "name": "S1tot"
            },
            {
                "addr": "DB121,R212",
                "name": "S1PS"
            },
            {
                "addr": "DB121,R216",
                "name": "S1SS"
            },
            {
                "addr": "DB121,R220",
                "name": "S2tot"
            },
            {
                "addr": "DB121,R224",
                "name": "S2PS"
            },
            {
                "addr": "DB121,R228",
                "name": "S2SS"
            },
            {
                "addr": "DB121,R232",
                "name": "DBLINE1"
            },
            {
                "addr": "DB121,R236",
                "name": "DBLINE2"
            },
            {
                "addr": "DB121,R240",
                "name": "DBLINE3"
            },
            {
                "addr": "DB121,R244",
                "name": "DBLINE4"
            },
            {
                "addr": "DB121,R248",
                "name": "DBLINE5"
            },
            {
                "addr": "DB121,R252",
                "name": "DBLINE6"
            },
            {
                "addr": "DB121,R256",
                "name": "DBLINE7"
            },
            {
                "addr": "DB121,R260",
                "name": "DBLINE8"
            },
            {
                "addr": "DB121,R264",
                "name": "DBLINE9"
            },
            {
                "addr": "DB121,R268",
                "name": "RATIOS1LN1"
            },
            {
                "addr": "DB121,R272",
                "name": "RATIOS1LN2"
            },
            {
                "addr": "DB121,R276",
                "name": "RATIOS1LN3"
            },
            {
                "addr": "DB121,R280",
                "name": "RATIOS1LN4"
            },
            {
                "addr": "DB121,R284",
                "name": "RATIOS1LN5"
            },
            {
                "addr": "DB121,R288",
                "name": "RATIOS1LN6"
            },
            {
                "addr": "DB121,R292",
                "name": "RATIOS1LN7"
            },
            {
                "addr": "DB121,R296",
                "name": "RATIOS1LN8"
            },
            {
                "addr": "DB121,R300",
                "name": "RATIOS1LN9"
            },
            {
                "addr": "DB121,R304",
                "name": "RATIOS2LN1"
            },
            {
                "addr": "DB121,R308",
                "name": "RATIOS2LN2"
            },
            {
                "addr": "DB121,R312",
                "name": "RATIOS2LN3"
            },
            {
                "addr": "DB121,R316",
                "name": "RATIOS2LN4"
            },
            {
                "addr": "DB121,R320",
                "name": "RATIOS2LN5"
            },
            {
                "addr": "DB121,R324",
                "name": "RATIOS2LN6"
            },
            {
                "addr": "DB121,R328",
                "name": "RATIOS2LN7"
            },
            {
                "addr": "DB121,R332",
                "name": "RATIOS2LN8"
            },
            {
                "addr": "DB121,R336",
                "name": "RATIOS2LN9"
            },
            {
                "addr": "DB121,R340",
                "name": "S1SPEEDL1"
            },
            {
                "addr": "DB121,R344",
                "name": "S1SPEEDL2"
            },
            {
                "addr": "DB121,R348",
                "name": "S1SPEEDL3"
            },
            {
                "addr": "DB121,R352",
                "name": "S1SPEEDL4"
            },
            {
                "addr": "DB121,R356",
                "name": "S1SPEEDL5"
            },
            {
                "addr": "DB121,R360",
                "name": "S1SPEEDL6"
            },
            {
                "addr": "DB121,R364",
                "name": "S1SPEEDL7"
            },
            {
                "addr": "DB121,R368",
                "name": "S1SPEEDL8"
            },
            {
                "addr": "DB121,R372",
                "name": "S1SPEEDL9"
            },
            {
                "addr": "DB121,R376",
                "name": "S2SPEEDL1"
            },
            {
                "addr": "DB121,R380",
                "name": "S2SPEEDL2"
            },
            {
                "addr": "DB121,R384",
                "name": "S2SPEEDL3"
            },
            {
                "addr": "DB121,R388",
                "name": "S2SPEEDL4"
            },
            {
                "addr": "DB121,R392",
                "name": "S2SPEEDL5"
            },
            {
                "addr": "DB121,R396",
                "name": "S2SPEEDL6"
            },
            {
                "addr": "DB121,R400",
                "name": "S2SPEEDL7"
            },
            {
                "addr": "DB121,R404",
                "name": "S2SPEEDL8"
            },
            {
                "addr": "DB121,R408",
                "name": "S2SPEEDL9"
            },
            {
                "addr": "DB121,R412",
                "name": "COALTANKP"
            },
            {
                "addr": "DB121,R416",
                "name": "COALTANKT"
            },
            {
                "addr": "DB121,R420",
                "name": "HYT"
            },
            {
                "addr": "DB121,R424",
                "name": "HYP"
            },
            {
                "addr": "DB121,R428",
                "name": "TWait"
            },
            {
                "addr": "DB121,R432",
                "name": "TOff"
            },
            {
                "addr": "DB121,R436",
                "name": "TWait1"
            },
            {
                "addr": "DB121,R440",
                "name": "TWait2"
            },
            {
                "addr": "DB121,R444",
                "name": "TWait3"
            },
            {
                "addr": "DB121,R448",
                "name": "TWait4"
            },
            {
                "addr": "DB121,R452",
                "name": "TWait5"
            },
            {
                "addr": "DB121,R456",
                "name": "TWait6"
            },
            {
                "addr": "DB121,R460",
                "name": "TWait7"
            },
            {
                "addr": "DB121,R464",
                "name": "TWait8"
            },
            {
                "addr": "DB121,R468",
                "name": "TWait9"
            },
            {
                "addr": "DB121,R472",
                "name": "TOff1"
            },
            {
                "addr": "DB121,R476",
                "name": "TOff2"
            },
            {
                "addr": "DB121,R480",
                "name": "TOff3"
            },
            {
                "addr": "DB121,R484",
                "name": "TOff4"
            },
            {
                "addr": "DB121,R492",
                "name": "SKIP_ULD1CHpv"
            },
            {
                "addr": "DB121,R496",
                "name": "PIPE_ULD1CHpv"
            },
            {
                "addr": "DB121,R500",
                "name": "ULD1CHsp"
            },
            {
                "addr": "DB121,R504",
                "name": "SKIP_ULD2CHpv"
            },
            {
                "addr": "DB121,R508",
                "name": "PIPE_ULD2CHpv"
            },
            {
                "addr": "DB121,R512",
                "name": "ULD2CHsp"
            },
            {
                "addr": "DB121,R516",
                "name": "SKIP_ULD3CHpv"
            },
            {
                "addr": "DB121,R520",
                "name": "PIPE_ULD3CHpv"
            },
            {
                "addr": "DB121,R524",
                "name": "ULD3CHsp"
            },
            {
                "addr": "DB121,R528",
                "name": "LSCY1pv"
            },
            {
                "addr": "DB121,R532",
                "name": "LSCY1sp"
            },
            {
                "addr": "DB121,R536",
                "name": "LSCY2pv"
            },
            {
                "addr": "DB121,R540",
                "name": "LSCY2sp"
            },
            {
                "addr": "DB121,R544",
                "name": "LSCY3pv"
            },
            {
                "addr": "DB121,R548",
                "name": "LSCY3sp"
            },
            {
                "addr": "DB121,R552",
                "name": "TCH1"
            },
            {
                "addr": "DB121,R556",
                "name": "TCH2"
            },
            {
                "addr": "DB121,R560",
                "name": "TCH3"
            },
            {
                "addr": "DB121,R564",
                "name": "LSTARCMB"
            },
            {
                "addr": "DB121,R568",
                "name": "LSTOPCMB"
            },
            {
                "addr": "DB121,R572",
                "name": "LSTARPRH"
            },
            {
                "addr": "DB121,R576",
                "name": "LSTOPPRH"
            },
            {
                "addr": "DB121,R580",
                "name": "LVLCMBsp"
            },
            {
                "addr": "DB121,R584",
                "name": "LVLPRHsp"
            },
            {
                "addr": "DB121,R588",
                "name": "EXTCMB"
            },
            {
                "addr": "DB121,R592",
                "name": "EXTPRH"
            },
            {
                "addr": "DB121,R596",
                "name": "S1EXTAUTO"
            },
            {
                "addr": "DB121,R600",
                "name": "S2EXTAUTO"
            },
            {
                "addr": "DB121,R604",
                "name": "S1MNRATIO"
            },
            {
                "addr": "DB121,R608",
                "name": "S1SCRATIO"
            },
            {
                "addr": "DB121,R612",
                "name": "S1FSTLVL"
            },
            {
                "addr": "DB121,R616",
                "name": "S1STROKsp"
            },
            {
                "addr": "DB121,R620",
                "name": "S1SDELAYsp"
            },
            {
                "addr": "DB121,R624",
                "name": "S1FSTSTRT"
            },
            {
                "addr": "DB121,R628",
                "name": "S2MNRATIO"
            },
            {
                "addr": "DB121,R632",
                "name": "S2SCRATIO"
            },
            {
                "addr": "DB121,R636",
                "name": "S2FSTLVL"
            },
            {
                "addr": "DB121,R640",
                "name": "S2STROKsp"
            },
            {
                "addr": "DB121,R644",
                "name": "S2SDELAYsp"
            },
            {
                "addr": "DB121,R648",
                "name": "S2FSTSTR"
            },
            {
                "addr": "DB121,R652",
                "name": "EANAUTO"
            },
            {
                "addr": "DB121,R656",
                "name": "ALCAUTO"
            },
            {
                "addr": "DB121,R660",
                "name": "FUELAUTO"
            },
            {
                "addr": "DB121,R664",
                "name": "FILTERAUTO"
            },
            {
                "addr": "DB121,R668",
                "name": "REDAUTO"
            },
            {
                "addr": "DB121,R672",
                "name": "CUTAUTO"
            },
            {
                "addr": "DB121,R676",
                "name": "TSTRREDsp"
            },
            {
                "addr": "DB121,R680",
                "name": "TSTPREDsp"
            },
            {
                "addr": "DB121,R684",
                "name": "PERCREDsp"
            },
            {
                "addr": "DB121,R688",
                "name": "TSTRCUTsp"
            },
            {
                "addr": "DB121,R692",
                "name": "TSTPCUTsp"
            },
            {
                "addr": "DB121,R696",
                "name": "REDENABL"
            },
            {
                "addr": "DB121,R700",
                "name": "REDTIMEpv"
            },
            {
                "addr": "DB121,R704",
                "name": "CUTENABL"
            },
            {
                "addr": "DB121,R708",
                "name": "CUTTIMEpv"
            },
            {
                "addr": "DB121,R712",
                "name": "PATM"
            },
            {
                "addr": "DB121,R716",
                "name": "FCVS1pv"
            },
            {
                "addr": "DB121,R720",
                "name": "FCVS1sp"
            },
            {
                "addr": "DB121,R724",
                "name": "FCVS1AUTO"
            },
            {
                "addr": "DB121,R728",
                "name": "FCVS2pv"
            },
            {
                "addr": "DB121,R732",
                "name": "FCVS2sp"
            },
            {
                "addr": "DB121,R736",
                "name": "FCVS2AUTO"
            },
            {
                "addr": "DB121,R740",
                "name": "CMB1pv"
            },
            {
                "addr": "DB121,R744",
                "name": "CMB1sp"
            },
            {
                "addr": "DB121,R748",
                "name": "CMB2pv"
            },
            {
                "addr": "DB121,R752",
                "name": "CMB2SP"
            },
            {
                "addr": "DB121,R756",
                "name": "CMB3pv"
            },
            {
                "addr": "DB121,R760",
                "name": "CMB3sp"
            },
            {
                "addr": "DB121,R764",
                "name": "LCB1pv"
            },
            {
                "addr": "DB121,R768",
                "name": "LCB1sp"
            },
            {
                "addr": "DB121,R772",
                "name": "LCB2pv"
            },
            {
                "addr": "DB121,R776",
                "name": "LCB2sp"
            },
            {
                "addr": "DB121,R780",
                "name": "FANpv"
            },
            {
                "addr": "DB121,R784",
                "name": "FANsp"
            },
            {
                "addr": "DB121,R788",
                "name": "S1CAPSPpv"
            },
            {
                "addr": "DB121,R792",
                "name": "S1CAPSPsp"
            },
            {
                "addr": "DB121,R796",
                "name": "S2CAPSPpv"
            },
            {
                "addr": "DB121,R800",
                "name": "S2CAPSPsp"
            },
            {
                "addr": "DB121,R804",
                "name": "CTBSPpv"
            },
            {
                "addr": "DB121,R808",
                "name": "CTBSPsp"
            },
            {
                "addr": "DB121,R812",
                "name": "CMB1CUR"
            },
            {
                "addr": "DB121,R816",
                "name": "CMB2CUR"
            },
            {
                "addr": "DB121,R820",
                "name": "CMB3CUR"
            },
            {
                "addr": "DB121,R824",
                "name": "LCB1CUR"
            },
            {
                "addr": "DB121,R828",
                "name": "LCB2CUR"
            },
            {
                "addr": "DB121,R832",
                "name": "FANCUR"
            },
            {
                "addr": "DB121,R836",
                "name": "S1CAPCUR"
            },
            {
                "addr": "DB121,R840",
                "name": "S2CAPCUR"
            },
            {
                "addr": "DB121,R844",
                "name": "CTBCURR"
            },
            {
                "addr": "DB121,R848",
                "name": "HYDP1CUR"
            },
            {
                "addr": "DB121,R852",
                "name": "HYDP2CUR"
            }
        ]
    },
    {
        "id": "S7endpoint_e20_trig",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "192.168.1.48",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "5000",
        "name": "",
        "vartable": [
            {
                "addr": "DB121,R0",
                "name": "Triggerino"
            }
        ]
    },
    {
        "id": "5ed4dbcacc17084e",
        "type": "ui-group",
        "name": "QuickLime Parameters",
        "page": "37b363877270d9e5",
        "width": "12",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ea87129a7cf91f25",
        "type": "ui-spacer",
        "group": "28dd6f2de8ecc7e2",
        "name": "spacer",
        "tooltip": "",
        "order": 6,
        "width": "4",
        "height": "1",
        "className": ""
    },
    {
        "id": "8c6fa927005b03bb",
        "type": "ui-link",
        "name": "Link 9",
        "ui": "d7cef5fd92f5328c",
        "path": "/",
        "icon": "home",
        "order": 15,
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c660e2c1739b9434",
        "type": "ui-spacer",
        "group": "28dd6f2de8ecc7e2",
        "name": "spacer",
        "tooltip": "",
        "order": 5,
        "width": "12",
        "height": "1",
        "className": ""
    },
    {
        "id": "fbbd3fe510ead1e8",
        "type": "ui-spacer",
        "group": "28dd6f2de8ecc7e2",
        "name": "spacer",
        "tooltip": "",
        "order": 8,
        "width": "12",
        "height": "2",
        "className": ""
    },
    {
        "id": "9fce4a565b284984",
        "type": "ui-spacer",
        "group": "5ed4dbcacc17084e",
        "name": "spacer",
        "tooltip": "",
        "order": 7,
        "width": "12",
        "height": "1",
        "className": ""
    },
    {
        "id": "528ee4a0eb0ffd07",
        "type": "ui-spacer",
        "group": "5ed4dbcacc17084e",
        "name": "spacer",
        "tooltip": "",
        "order": 8,
        "width": "4",
        "height": "1",
        "className": ""
    },
    {
        "id": "b23b50c820f3fc9d",
        "type": "ui-spacer",
        "group": "5ed4dbcacc17084e",
        "name": "spacer",
        "tooltip": "",
        "order": 10,
        "width": "12",
        "height": "2",
        "className": ""
    },
    {
        "id": "cf35598e75a95852",
        "type": "debug",
        "z": "sf_machines",
        "name": "M Table",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 80,
        "wires": []
    },
    {
        "id": "60915ab31cd5b286",
        "type": "function",
        "z": "sf_machines",
        "name": "update_status",
        "func": "// Function to replace underscores with spaces and capitalize words\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\nfunction parseValue(value) {\n    if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n            value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n            try {\n                return JSON.parse(value);\n            } catch (error) {\n                return value;\n            }\n        }\n        // Return original value for non-JSON types\n        return value;\n    }\n    return value;\n}\n\n// Retrieve existing data or initialize\nlet columns = [];\nlet data = global.get(msg.database.table) || [];\n\n// Extract column names from PostgreSQL query\nif (msg.pgsql && msg.pgsql[0] && msg.pgsql[0].rows) {\n    columns = msg.pgsql[0].rows.map(col => col.column_name);\n}\n\n// Extract data rows from PostgreSQL query and parse them\nif (msg.pgsql && msg.pgsql[1] && msg.pgsql[1].rows) {\n    data = msg.pgsql[1].rows;\n    data.forEach((row, rowIndex) => {\n        Object.keys(row).forEach((key) => {\n            let originalValue = row[key];\n            row[key] = parseValue(originalValue)\n        });\n    });\n}\n\n// Build dynamic table headers\nconst baseHeaders = columns.length > 0\n    ? columns\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exludes some columns\n        .map(key => ({\n            title: capitalize(key),\n            value: key,\n            headerProps: { style: 'font-weight: 700' },\n            sortable: true\n        }))\n    : [];\n\nlet snacktext = \"\";\nif (msg.topicMain === \"deploy\") {\n    snacktext = `${msg.title} Saved Successfully!`;\n} else if (msg.topicMain === \"update\") {\n    snacktext = `${msg.title} Updated Successfully!`;\n} else if (msg.topicMain === \"start\") {\n    snacktext = `${msg.title} Started Successfully!`;\n}\n\n// Assign table data to the message\nmsg.data = data;\n\nmsg.dashboard.table = {\n    title: msg.title,\n    headers: baseHeaders\n};\nmsg.dashboard.form = {};\nmsg.dashboard.history = [];\n\nmsg.dashboard.snackbar = {\n    show: true,\n    text: snacktext,\n    color: \"green-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\n// Save data back to the global context\nglobal.set(msg.database.table, data);\n\n// Update status\nconst localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\nnode.status({ fill: \"green\", shape: \"dot\", text: `last update: ${localTime}` });\n\nmsg.topic = 'update_status';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 340,
        "wires": [
            [
                "fb18fb9dd24d4a7d",
                "c3c2361355d4a0c4"
            ]
        ]
    },
    {
        "id": "bd899c1ea15c5f76",
        "type": "ui-template",
        "z": "sf_machines",
        "group": "4290ffc4397af8c8",
        "page": "",
        "ui": "",
        "name": "table_machines",
        "order": 6,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Container -->\n  <v-card>\n    <!-- Card Header with Title, Reload Button, Search Bar, and Action Buttons -->\n    <v-card-item class=\"bg-primary\">\n      <v-row class=\"my-2 align-self-center\" no-gutters>\n        \n        <!-- Title -->\n        <v-col cols=\"auto\" class=\"mx-4 align-self-center\">\n          <v-btn\n            @click=\"openInfoDialog\"\n            variant=\"tonal\"\n            class=\"font-weight-bold text-h5 text-white\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-table</v-icon>\n            <p class=\"mx-1 align-self-center\" v-text=\"msg.dashboard.table.title\"></p>\n          </v-btn>\n        </v-col>\n\n        <!-- Search Bar -->\n        <v-col class=\"mx-4 align-self-center\">\n          <v-text-field\n            v-model=\"search\"\n            label=\"Search\"\n            prepend-inner-icon=\"mdi-magnify\"\n            single-line\n            clearable\n            hide-details\n            color=\"white\"\n          ></v-text-field>\n        </v-col>\n\n        <!-- Action Buttons (CSV Upload, CSV Download, Edit, Save, Add New, Discard) -->\n        <v-col cols=\"auto\" class=\"mx-2 align-self-center text-white\">\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"updateTable\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-reload</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Reload</span>\n          </v-btn>\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"downloadCsv\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-export</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Export</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"enableEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Edit</span>\n          </v-btn>\n\n          <!-- Buttons visible in Edit Mode -->\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"openCsvDialog\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-import</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Import</span>\n          </v-btn>\n          \n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"addNewItem\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-plus</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Add New</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deploy\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-floppy</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Save</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"discardEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil-off</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Discard</span>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <!-- Data Table with Custom Cell Templates -->\n    <v-data-table\n      v-model=\"selected\"\n      :headers=\"msg.dashboard.table.headers\"\n      :items=\"msg.data\"\n      :search=\"search\"\n      :items-per-page=\"itemsPerPage\"\n      :items-per-page-options=\"[5, 10, 25, 50, -1]\"\n      class=\"elevation-1\"\n      :loading=\"msg.dashboard.loading\"\n      loading-text=\"Loading...\"\n      density=\"default\"\n    >\n<!-- MODIFY DISPLAY HERE -->   \n\n<!-- END MODIFY -->\n      <!-- Actions Column with Edit and Delete Icons -->\n      <template v-slot:item.actions=\"{ item }\">\n        <div class=\"actions-column\">\n          <v-icon\n            v-show=\"editMode\"\n            small\n            class=\"mr-2\"\n            @click=\"editItem(item)\"\n            color=\"blue-darken-2\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-pencil\n          </v-icon>\n\n          <v-icon\n            v-show=\"editMode\"\n            small\n            @click=\"deleteItem(item)\"\n            color=\"error\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-delete\n          </v-icon>\n        </div>\n      </template>\n\n      <!-- No Data Message -->\n      <template v-slot:no-data>\n        <v-row class=\"ma-4\">\n          <v-alert :value=\"true\" color=\"warning\" icon=\"mdi-alert\">\n            No matching records found.\n          </v-alert>\n        </v-row>\n      </template>\n    </v-data-table>\n  </v-card>\n\n  <!-- Dialog for Adding or Editing Items -->\n  <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">{{ formTitle }}</span>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" v-model=\"valid\" fast-fail @submit.prevent>\n<!-- MODIFY FORM HERE -->\n\n          <!-- Form Fields -->\n          <v-text-field\n          v-model=\"editAction.newItem.name\"\n          label=\"Name\"\n          :rules=\"[v => !!v || 'Name is required']\"\n          required\n          ></v-text-field>\n          <v-text-field\n          v-model=\"editAction.newItem.type\"\n          label=\"Type\"\n          :rules=\"[v => !!v || 'Type is required']\"\n          required\n          ></v-text-field>\n          <v-text-field\n          v-model=\"editAction.newItem.vendor\"\n          label=\"Vendor\"\n          :rules=\"[v => !!v || 'Vendor is required']\"\n          required\n          ></v-text-field>\n          <v-text-field\n          v-model=\"editAction.newItem.site\"\n          label=\"Site\"\n          :rules=\"[v => !!v || 'Site is required']\"\n          required\n          ></v-text-field>\n          <v-text-field\n          v-model=\"editAction.newItem.service_date\"\n          label=\"Service Date\"\n          clearable\n          ></v-text-field>\n          <v-textarea\n          v-model=\"editAction.newItem.details\"\n          label=\"Details\"\n          maxlength=\"200\"\n          counter\n          ></v-text-field>\n\n<!-- END MODIFY-->\n        </v-form>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"saveItem\">Save</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Select a CSV file\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete Confirmation Dialog -->\n  <v-dialog v-model=\"deleteDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting this element will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue-darken-1\" text @click=\"cancelDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"error\" text @click=\"confirmDeletion\">\n          Delete\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Info Dialog -->\n  <v-dialog v-model=\"infoDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Info\n      </v-card-title>\n\n      <v-card-text>\n        <p v-text=\"msg.dashboard.info\"></p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Close Button -->\n        <v-btn color=\"blue\" text @click=\"closeInfoDialog\">\n          OK\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      search: '',\n      page: 1,\n      itemsPerPage: -1,\n      headerNames: [],\n      dialog: false,\n      deleteDialog: false,\n      csvDialog: false,\n      infoDialog: false,\n      csvFile: null,    \n      formTitle: \"\",\n      editMode: false,\n      editAction: {\n        index: -1,\n        oldItem: null,\n        newItem: null,\n      },\n      selected: [],\n      actionsHeader: {\n        title: \"Actions\",\n        value: \"actions\",\n        headerProps: { style: 'font-weight: 700' },\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n    };\n  },\n  computed: {\n    pageCount() {\n      return Math.ceil(this.msg.data.length / this.itemsPerPage);\n    },\n  },\n  watch: {\n    msg: {\n      handler() {\n        if (this.msg?.dashboard?.table?.headers) {\n          this.headerNames = this.msg.dashboard.table.headers.map(header => header.value);\n        };\n        if (\n          this.editMode &&\n          this.msg?.dashboard?.table?.headers?.[this.msg.dashboard.table.headers.length - 1]?.value !== 'actions'\n        ) {\n          this.msg.dashboard.table.headers.push(this.actionsHeader);\n        };\n        // Dynamically update snackbar parameters\n        if (this.msg?.dashboard?.snackbar) {\n          const { show, text, color } = this.msg.dashboard.snackbar;\n          this.snackbar.show = show;\n          this.snackbar.text = text || '';\n          this.snackbar.color = color || 'default';\n        }\n      },\n      deep: true \n    }\n  },\n  methods: {\n    // Sends a message with the current state\n    msgSend() {\n      this.msg.dashboard.snackbar = null;\n      this.send({\n        topic: this.msg.topic,\n        topicMain: this.msg.topicMain,\n        title: this.msg.title,\n        database: this.msg.database,\n        data: this.msg.data,\n        dashboard: this.msg.dashboard,\n        payload: this.msg.payload,\n        time: new Date(),\n      });\n    },\n    \n    // Edit mode controls\n    enableEdit() {\n      this.msg.dashboard.snackbar.show = false;\n      this.msg.dashboard.table.headers.push(this.actionsHeader);\n      this.editMode = true;\n    },\n    disableEdit() {\n      this.msg.dashboard.table.headers = this.msg.dashboard.table.headers.filter(\n        header => header !== this.actionsHeader\n      );\n      this.editMode = false;\n    },\n    \n    // Message Outputs: Update, Deploy and discard edits \n    updateTable() {\n      this.msg.topic = \"update\";\n      this.msg.topicMain = \"update\";\n      this.msg.payload = null;\n      this.msgSend();\n    },\n    deploy() {\n      this.msg.dashboard.loading = true;\n      this.disableEdit();\n      this.msg.topic = \"deploy\";\n      this.msg.topicMain = \"deploy\";\n      this.msgSend();\n      // this.showSnackbar('Deploy action triggered!', 'info');\n    },\n    discardEdit() {\n      this.disableEdit();\n      this.msg.dashboard.history = [];\n      this.updateTable();\n    },\n    \n    // Handling items\n    getDefaultItem() {\n      const defaultItem = {};\n      this.msg.dashboard.table.headers.forEach(header => {\n        if (header.value !== 'actions') {\n          defaultItem[header.value] = header.value === 'enabled' ? true :\n                                       header.value === 'status' ? \"unknown\" : null;\n        }\n      });\n      return defaultItem;\n    },\n    filterItem(item) {\n      if (!item) {\n        return null;\n      }\n      return Object.keys(item)\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exclude keys\n        .filter(key => this.headerNames.includes(key)) // Exclude keys\n        .reduce((obj, key) => {\n          obj[key] = item[key];\n          return obj;\n        }, {});\n    },\n    filterHeaders(headers) {\n      return headers.filter(header => !['actions', 'status', 'id'].includes(header.value)) // Exludes some columns\n    },\n    addEditAction(){\n      let action = JSON.parse(JSON.stringify(this.editAction));\n      action.oldItem = this.filterItem(action.oldItem);\n      action.newItem = this.filterItem(action.newItem);\n      this.msg.dashboard.history.push(action);\n    },\n    addNewItem() {\n      this.editAction.index = -1;\n      this.editAction.oldItem = null;\n      this.editAction.newItem = this.getDefaultItem();\n      this.formTitle = 'Add Item';\n      this.dialog = true;\n    },\n    editItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = { ...item };\n      this.formTitle = 'Edit Item';\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = null;\n      this.deleteDialog = true;\n    },\n\n    // Delete Dialog controls\n    cancelDeletion() {\n      this.deleteDialog = false;\n    },\n    confirmDeletion() {\n      this.deleteDialog = false;\n      if (this.editAction.index > -1) {\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n        // this.showSnackbar('Item deleted successfully!', 'success');\n      }\n    },\n\n    // Form Dialog controls\n    closeDialog() {\n      this.dialog = false;\n      this.$refs.form.reset();\n    },\n    async saveItem() {\n      const { valid } = await this.$refs.form.validate();\n      if (valid) {\n        if (this.editAction.index > -1) {\n          Object.assign(this.msg.data[this.editAction.index], this.editAction.newItem);\n          // this.showSnackbar('Item updated successfully!', 'success');\n        } else {\n          this.msg.data.push({ ...this.editAction.newItem });\n          // this.showSnackbar('Item added successfully!', 'success');\n        }\n        this.addEditAction();\n        this.closeDialog();\n      } else {\n        this.showSnackbar('Please correct the errors in the form.', 'error');\n      }\n    },\n\n    // Info Dialog controls\n    openInfoDialog() {\n      this.infoDialog = true;\n    },\n    closeInfoDialog() {\n      this.infoDialog = false;\n    },\n\n    // CSV Dialog controls\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Data Handling\n    // Stringify function that handles different data types\n    stringifyValue(value) {\n      if (value === undefined || value === null) {\n        return ''; // Handle null or undefined\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value); // Handle arrays by converting them to a JSON string\n      } else if (typeof value === 'object') {\n        return JSON.stringify(value); // Handle objects by converting them to a JSON string\n      } else if (typeof value === 'string') {\n        return value; // Use string as-is\n      } else {\n        return String(value); // Convert other types (number, boolean, etc.) to string\n      }\n    },\n    parseValue(value) {\n      if (typeof value === 'string') {\n        // Handle empty strings\n        if (value === '') return null;\n\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n          value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n          try {\n            return JSON.parse(value);\n          } catch (error) {\n            return value;\n          }\n        }\n        // Check if the string represents a boolean\n        if (value.toLowerCase() === \"true\") return true;\n        if (value.toLowerCase() === \"false\") return false;\n\n        // Check if the string represents a number\n        const parsedNumber = Number(value);\n        if (!isNaN(parsedNumber)) return parsedNumber;\n\n        // Return original value for simple strings\n        return value;\n      }\n      return value;\n    },\n\n    // CSV Upload and Loading\n    async processCsv() {  // Processes the uploaded CSV file\n      if (!this.csvFile) {\n        this.showSnackbar('No file selected!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV successfully uploaded!', 'success');\n      } catch (error) {\n        this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n    parseCsv(content) {  // Parses the CSV file content into an array of objects\n      const rows = content.split(/\\r?\\n/).filter(row => row.trim()); \n      const headers = rows.shift().split(';'); // Use the first row as headers\n      return rows.map(row => {\n        const values = row.split(';'); \n        return headers.reduce((acc, header, index) => {\n          acc[header] = this.parseValue(values[index]); // Map headers to corresponding values\n          return acc;\n        }, {});\n      });\n    },\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {  // Check if an item with the same name exists\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n            this.editAction.oldItem = {...existingItem};\n            this.editAction.newItem = {...newItem};\n            this.addEditAction()\n            Object.assign(existingItem, newItem); // Update \n          }\n        } else {\n          this.editAction.oldItem = null;\n          this.editAction.newItem = {...newItem};\n          this.addEditAction()\n          this.msg.data.push(newItem);  // Add new \n        }\n      });\n    },\n    \n    // CSV Generation and Download\n    generateCsv() {\n      const separator = ';';\n      const headers = this.filterHeaders(this.msg.dashboard.table.headers)\n        .map(header => header.value)\n        .join(separator); \n\n      const rows = this.msg.data.map(item => {\n        return this.filterHeaders(this.msg.dashboard.table.headers)\n          .map(header => {\n            return this.stringifyValue(item[header.value]);\n          })\n          .join(separator);\n      }).join('\\n');\n\n\n      return `${headers}\\n${rows}`;\n    },\n    createDownloadLink(csvContent) {\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${this.msg.database.table}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    downloadCsv() {\n      try {\n        const csvContent = this.generateCsv();\n        this.createDownloadLink(csvContent);\n        this.showSnackbar('CSV scaricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante il download del CSV:', error);\n        this.showSnackbar('Errore durante il download del CSV.', 'error');\n      }\n    },\n    \n    // Utility Methods\n    getStatusColor(value) {\n      const colors = {\n        \"unknown\": 'blue',\n        \"connecting\": 'amber',\n        \"connected\": 'green',\n        \"error\": 'red'\n      };\n      if (colors[value]) return colors[value];\n      return 'purple';\n    },\n    getSwitchColor(item) {\n      return item.enabled ? this.getStatusColor(item.status)\n                            : 'grey-lighten-2';\n    },\n    getListColor(list, elem, item) {\n      return item.enabled ? list.includes(elem) ? this.getStatusColor(item.status) : 'red'\n                            : 'grey-lighten-2';\n    },\n    getListColorStatic(list, elem) {\n      return list.includes(elem) ? 'green' : 'red';\n    },\n    handleEnabled(item) {\n      // Custom logic for enabling/disabling\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      item.enabled = !item.enabled;\n      this.editAction.newItem = { ...item };\n      this.addEditAction();\n      \n    },\n    showSnackbar(message, type) {\n      this.snackbar.text = message;\n      this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                          : type === 'error' ? 'red-lighten-3' \n                          : 'blue-lighten-5';\n      this.snackbar.show = true;\n      this.msg.dashboard.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Heading Text Size */\n.text-h5 {\n  font-size: 1.25rem;\n}\n\n/* Actions Column Styling */\n.actions-column {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 60px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 800,
        "y": 120,
        "wires": [
            [
                "8ca7c7ef4d564fff"
            ]
        ]
    },
    {
        "id": "8ca7c7ef4d564fff",
        "type": "link out",
        "z": "sf_machines",
        "name": "ui_table_out",
        "mode": "link",
        "links": [
            "a6199f3290ba828e"
        ],
        "x": 975,
        "y": 120,
        "wires": []
    },
    {
        "id": "33c484973ec32be3",
        "type": "function",
        "z": "sf_machines",
        "name": "switch",
        "func": "// Function to format strings by replacing underscores with spaces and capitalizing each word\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// Init\nconst tabName = env.get('TABLE');\nmsg.title = capitalize(tabName);\nmsg.topicMain = msg.topicMain || msg.topic;\nmsg.database = msg.database || {\n    name: env.get(\"DATABASE\"),\n    schema: env.get(\"SCHEMA\"),\n    table: tabName\n};\nmsg.data = msg.data || flow.get(tabName) || null;\nmsg.dashboard = msg.dashboard || {};\nmsg.dashboard.info = msg.dashboard.info || flow.get(\"info\");\n\nif (msg.database.table !== tabName) {\n    msg.error = \"Message with wrong table\";\n}\n\n// Topic switch\nconst indexMap = {\n    // Previous Error\n    error: 0,\n\n    // Previous Action (postgres response)\n    check_table: 2,\n    deploy_changes: 2,\n    select_data: 4,\n\n    // Next Action\n    start: 1,\n    update: 2,\n    deploy: 3,\n};\n\nconst outputs = [null, null, null, null, null];\n\nif (msg.error) outputs[0] = msg;\nelse if (indexMap[msg.topic] !== undefined) outputs[indexMap[msg.topic]] = msg;\n\nreturn outputs;\n\n\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 220,
        "wires": [
            [
                "bbea1895426875ab"
            ],
            [
                "b755f1359e2cca04",
                "5e5f93bb9587176f"
            ],
            [
                "19f3487286b11943"
            ],
            [
                "90d29f1b9188b78b"
            ],
            [
                "60915ab31cd5b286"
            ]
        ]
    },
    {
        "id": "bbea1895426875ab",
        "type": "function",
        "z": "sf_machines",
        "name": "error_show",
        "func": "msg.dashboard.snackbar = {\n    show: true,\n    text: `${msg.title} - ${msg.topic} error: ${msg.error.message}`,\n    color: \"red-lighten-3\"\n}\n\nnode.status({ fill: \"red\", shape: \"dot\", text: msg.dashboard.snackbar.text });\n\nmsg.dashboard.history = [];\n\nmsg.dashboard.loading = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "fb18fb9dd24d4a7d"
            ]
        ]
    },
    {
        "id": "19f3487286b11943",
        "type": "function",
        "z": "sf_machines",
        "name": "select_data",
        "func": "msg.query = `\n\n    SELECT column_name \n    FROM information_schema.columns \n    WHERE table_schema = '${msg.database.schema}'\n    AND table_name = '${msg.database.table}';\n\n    SELECT * \n    FROM ${msg.database.schema}.${msg.database.table}\n    ORDER BY id;\n\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"select_data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b755f1359e2cca04",
        "type": "function",
        "z": "sf_machines",
        "name": "check_db_table",
        "func": "// Extract schema and table names from the message\nconst schemaName = msg.database.schema;\nconst tableName = msg.database.table;\n\n// Construct the dynamic query for creating the schema and the table\nmsg.query = `\nDO $$\nBEGIN\n   -- Check if schema exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.schemata\n      WHERE schema_name = '${schemaName}'\n   ) THEN\n      CREATE SCHEMA ${schemaName};\n   END IF;\n\n   -- Check if table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${schemaName}' AND table_name = '${tableName}'\n   ) THEN\n      CREATE TABLE ${schemaName}.${tableName} (\n        id SERIAL,\n        name TEXT PRIMARY KEY,\n        type TEXT,\n        vendor TEXT,\n        site TEXT,\n        service_date TEXT,\n        details TEXT\n      );\n   END IF;\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"check_table\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "90d29f1b9188b78b",
        "type": "function",
        "z": "sf_machines",
        "name": "deploy",
        "func": "function escapeValue(value) {\n    if (value === null || value === undefined) {\n        // Handles NULL values\n        return 'NULL';\n    }\n    else if (Array.isArray(value) || typeof value === 'object') {\n        // Convert arrays and objects to JSON, then escape single quotes\n        const jsonString = JSON.stringify(value);\n        return `'${jsonString.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'string') {\n        // Escapes dangerous characters like single quotes ('), \n        // replacing them with double single quotes ('')\n        return `'${value.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'boolean') {\n        // PostgreSQL uses 'TRUE'/'FALSE' for boolean values\n        return value ? 'TRUE' : 'FALSE';\n    }\n    else {\n        // For numbers (and other primitive types), return the value directly\n        return value;\n    }\n}\n\n\nlet commands = [];\nconst table = msg.database.table;\nconst schema = msg.database.schema;\n\nfor (const change of msg.dashboard.history) {\n    const { index, oldItem, newItem } = change;\n\n    if (oldItem && !newItem) {\n        // Case: deletion\n        commands.push(`DELETE FROM \"${schema}\".\"${table}\"WHERE name = ${escapeValue(oldItem.name)};`);\n\n    } else if (!oldItem && newItem) {\n        // Case: insertion\n        const keys = Object.keys(newItem);\n        const values = Object.values(newItem)\n            .map(value => `${escapeValue(value)}`) // Escape values\n            .join(', ');\n        commands.push(`INSERT INTO \"${schema}\".\"${table}\" (${keys.join(', ')}) VALUES (${values});`);\n\n    } else if (oldItem && newItem) {\n        // Case: update\n        const updates = Object.keys(newItem)\n            .map(key => `${key} = ${escapeValue(newItem[key])}`) // Escape values\n            .join(', ');\n        commands.push(`UPDATE \"${schema}\".\"${table}\" SET ${updates} WHERE name = ${escapeValue(oldItem.name)};`);\n    }\n}\n\n// Constructs the PL/pgSQL block\nmsg.query = `\nDO $$\nBEGIN\n    ${commands.join('\\n')}\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = 'deploy_changes';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c3c2361355d4a0c4",
        "type": "function",
        "z": "sf_machines",
        "name": "clear_update",
        "func": "return {\n    topic: (msg.topicMain === 'start') ? 'start' : 'update',\n    time: new Date(),\n    _msgid: msg._msgid\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a6199f3290ba828e",
        "type": "link in",
        "z": "sf_machines",
        "name": "switch_in",
        "links": [
            "8ca7c7ef4d564fff"
        ],
        "x": 85,
        "y": 180,
        "wires": [
            [
                "aa1095426398d4a2"
            ]
        ]
    },
    {
        "id": "06218415e5cd1cd9",
        "type": "debug",
        "z": "sf_machines",
        "name": "M Switch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 340,
        "wires": []
    },
    {
        "id": "5e5f93bb9587176f",
        "type": "function",
        "z": "sf_machines",
        "name": "info",
        "func": "",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst info = \"Machines info dialog\"\n\n\n\nflow.set(\"info\", info);",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": []
    },
    {
        "id": "1c5832e0976a9323",
        "type": "status",
        "z": "sf_machines",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 440,
        "wires": [
            [
                "8b026abd77d214b9"
            ]
        ]
    },
    {
        "id": "8b026abd77d214b9",
        "type": "function",
        "z": "sf_machines",
        "name": "status_filter",
        "func": "if (msg.status){\n    msg.status.fill = msg.status.fill || \"green\";\n    msg.status.shape = msg.status.shape || \"dot\";\n    if (!msg.status.text){\n        const localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n        msg.status.text = `last update: ${localTime}`;\n    }\n    return msg;\n}\nreturn null\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "0da6b41c4744b0a4",
        "type": "catch",
        "z": "sf_machines",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 220,
        "y": 80,
        "wires": [
            [
                "bbea1895426875ab",
                "1a7a42a1300746fb"
            ]
        ]
    },
    {
        "id": "1a7a42a1300746fb",
        "type": "debug",
        "z": "sf_machines",
        "name": "M - ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 60,
        "wires": []
    },
    {
        "id": "aa6eef9ee243c8f9",
        "type": "debug",
        "z": "sf_endpoints",
        "name": "Endpoints - Template",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 80,
        "wires": []
    },
    {
        "id": "a9c8a0dbacef693b",
        "type": "function",
        "z": "sf_endpoints",
        "name": "update_status",
        "func": "// Function to replace underscores with spaces and capitalize words\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\nfunction parseValue(value) {\n    if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n            value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n            try {\n                return JSON.parse(value);\n            } catch (error) {\n                return value;\n            }\n        }\n        // Return original value for non-JSON types\n        return value;\n    }\n    return value;\n}\n\n// Retrieve existing data or initialize\nlet columns = [];\nlet data = global.get(msg.database.table) || [];\n\n// Extract column names from PostgreSQL query\nif (msg.pgsql && msg.pgsql[0] && msg.pgsql[0].rows) {\n    columns = msg.pgsql[0].rows.map(col => col.column_name);\n}\n\n// Extract data rows from PostgreSQL query and parse them\nif (msg.pgsql && msg.pgsql[1] && msg.pgsql[1].rows) {\n    data = msg.pgsql[1].rows;\n    data.forEach((row, rowIndex) => {\n        Object.keys(row).forEach((key) => {\n            let originalValue = row[key];\n            row[key] = parseValue(originalValue)\n        });\n    });\n}\n\n// Build dynamic table headers\nconst baseHeaders = columns.length > 0\n    ? columns\n        .filter(key => !['actions', 'status'].includes(key)) // Exludes some columns\n        .sort((a, b) => (a === 'enabled' ? -1 : b === 'enabled' ? 1 : 0)) // Sorts 'enabled' column first\n        .map(key => ({\n            title: capitalize(key),\n            value: key,\n            headerProps: { style: 'font-weight: 700' },\n            sortable: true\n        }))\n    : [];\n\n\n// Define possible states for endpoints\nconst states = [\"unknown\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connecting\", \"error\"];\nconst lengthItems = states.length;\n\n// Assign random states to endpoints if not already set\nfor (let i = 0; i < data.length; i++) {\n    let randomIndex = Math.floor(Math.random() * lengthItems);\n    if (!data[i].status) {\n        data[i].status = states[randomIndex];\n    }\n    if (typeof data[i].enabled === 'string') {\n        let enabledLower = data[i].enabled.toLowerCase();\n        data[i].enabled = (enabledLower === 'true');\n    }\n    if (data[i].enabled === null) {\n        data[i].enabled = true;\n    }\n}\n\nlet snacktext = \"\";\nif (msg.topicMain === \"deploy\") {\n    snacktext = `${msg.title} Saved Successfully!`;\n} else if (msg.topicMain === \"update\") {\n    snacktext = `${msg.title} Updated Successfully!`;\n} else if (msg.topicMain === \"start\") {\n    snacktext = `${msg.title} Started Successfully!`;\n}\n\n// Assign table data to the message\nmsg.data = data;\n\nmsg.dashboard.table = {\n    title: msg.title,\n    headers: baseHeaders\n};\nmsg.dashboard.form = {\n    machine: global.get(\"machines\").map(mch => mch.name),\n    protocol: global.get(\"protocol\"),\n    tag_tables: global.get(\"tag_tables\"),\n};\n\nmsg.history = msg.dashboard.history || [];\nmsg.dashboard.history = [];\n\nmsg.dashboard.snackbar = {\n    show: true,\n    text: snacktext,\n    color: \"green-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\n// Save data back to the global context\nglobal.set(msg.database.table, data);\n\n// Update status\nconst localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\nnode.status({ fill: \"green\", shape: \"dot\", text: `last update: ${localTime}` });\n\nmsg.topic = 'update_status';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "931179e7bf82fd62",
                "6b49bb402c49a762"
            ]
        ]
    },
    {
        "id": "6ce1145fad4c371b",
        "type": "ui-template",
        "z": "sf_endpoints",
        "group": "4290ffc4397af8c8",
        "page": "",
        "ui": "",
        "name": "table_endpoints",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Container -->\n  <v-card>\n    <!-- Card Header with Title, Reload Button, Search Bar, and Action Buttons -->\n    <v-card-item class=\"bg-primary\">\n      <v-row class=\"my-2 align-self-center\" no-gutters>\n        \n        <!-- Title -->\n        <v-col cols=\"auto\" class=\"mx-4 align-self-center\">\n          <v-btn\n            @click=\"openInfoDialog\"\n            variant=\"tonal\"\n            class=\"font-weight-bold text-h5 text-white\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-table</v-icon>\n            <p class=\"mx-1 align-self-center\" v-text=\"msg.dashboard.table.title\"></p>\n          </v-btn>\n        </v-col>\n\n        <!-- Search Bar -->\n        <v-col class=\"mx-4 align-self-center\">\n          <v-text-field\n            v-model=\"search\"\n            label=\"Search\"\n            prepend-inner-icon=\"mdi-magnify\"\n            single-line\n            clearable\n            hide-details\n            color=\"white\"\n          ></v-text-field>\n        </v-col>\n\n        <!-- Action Buttons (CSV Upload, CSV Download, Edit, Save, Add New, Discard) -->\n        <v-col cols=\"auto\" class=\"mx-2 align-self-center text-white\">\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"updateTable\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-reload</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Reload</span>\n          </v-btn>\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"downloadCsv\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-export</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Export</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"enableEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Edit</span>\n          </v-btn>\n\n          <!-- Buttons visible in Edit Mode -->\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"openCsvDialog\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-import</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Import</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"addNewItem\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-plus</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Add New</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deploy\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-floppy</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Save</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"discardEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil-off</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Discard</span>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <!-- Data Table with Custom Cell Templates -->\n    <v-data-table\n      v-model=\"selected\"\n      :headers=\"msg.dashboard.table.headers\"\n      :items=\"msg.data\"\n      :search=\"search\"\n      :items-per-page=\"itemsPerPage\"\n      :items-per-page-options=\"[5, 10, 25, 50, -1]\"\n      class=\"elevation-1\"\n      :loading=\"msg.dashboard.loading\"\n      loading-text=\"Loading...\"\n      density=\"default\"\n    >\n<!-- MODIFY DISPLAY HERE -->\n\n      <!-- Toggle Switch for 'enabled' Field -->\n      <template v-slot:item.enabled=\"{ item }\">\n        <v-switch\n          v-model=\"item.enabled\"\n          :model-value=\"item.enabled\"\n          :color=\"getSwitchColor(item)\"\n          :base-color=\"getSwitchColor(item)\"\n          :disabled=\"!editMode\"\n          hide-details\n          @click=\"handleEnabled(item)\"\n        ></v-switch>\n      </template>      \n\n      <!-- Display Machines as Chips -->\n      <template v-slot:item.machine=\"{ item }\">\n        <div>\n          <v-chip\n            class=\"ma-1\"\n            :color=\"getListColor(msg.dashboard.form.machine, item.machine, item)\"\n            dark\n          >\n            {{ item.machine }}\n          </v-chip>\n        </div>\n      </template>\n\n      <!-- Display Tags as Chips -->\n      <template v-slot:item.tag_tables=\"{ item }\">\n        <div>\n          <v-chip\n            v-for=\"(tag, index) in item.tag_tables\"\n            :key=\"index\"\n            class=\"ma-1\"\n            :color=\"getListColor(msg.dashboard.form.tag_tables.map(tab => tab.name), tag, item)\"\n            dark\n          >\n            {{ tag }}\n          </v-chip>\n        </div>\n      </template>\n\n<!-- END MODIFY -->\n      <!-- Actions Column with Edit and Delete Icons -->\n      <template v-slot:item.actions=\"{ item }\">\n        <div class=\"actions-column\">\n          <v-icon\n            v-show=\"editMode\"\n            small\n            class=\"mr-2\"\n            @click=\"editItem(item)\"\n            color=\"blue-darken-2\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-pencil\n          </v-icon>\n\n          <v-icon\n            v-show=\"editMode\"\n            small\n            @click=\"deleteItem(item)\"\n            color=\"error\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-delete\n          </v-icon>\n        </div>\n      </template>\n\n      <!-- No Data Message -->\n      <template v-slot:no-data>\n        <v-row class=\"ma-4\">\n          <v-alert :value=\"true\" color=\"warning\" icon=\"mdi-alert\">\n            No matching records found.\n          </v-alert>\n        </v-row>\n      </template>\n    </v-data-table>\n  </v-card>\n\n  <!-- Dialog for Adding or Editing Items -->\n  <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">{{ formTitle }}</span>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" v-model=\"valid\" fast-fail @submit.prevent>\n<!-- MODIFY FORM HERE -->\n\n          <!-- Form Fields -->\n          <v-text-field\n            v-model=\"editAction.newItem.name\"\n            label=\"Name\"\n            :rules=\"[v => !!v || 'Name is required']\"\n            required\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.machine\"\n            label=\"Machine\"\n            :items=\"msg.dashboard.form.machine\"\n            :rules=\"[v => !!v || 'Machine is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-select\n            v-model=\"editAction.newItem.protocol\"\n            label=\"Protocol\"\n            :items=\"msg.dashboard.form.protocol\"\n            :rules=\"[v => !!v || 'Protocol is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-text-field\n            v-model=\"editAction.newItem.address\"\n            label=\"Address\"\n            :rules=\"[v => !!v || 'Address is required']\"\n            required\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.tag_tables\"\n            label=\"Tag Tables\"\n            :items=\"msg.dashboard.form.tag_tables\n                      .filter(tab => tab.protocol === editAction.newItem.protocol)\n                      .map(tab => tab.name)\"\n            multiple\n            chips\n            clearable\n          ></v-select>\n          <v-textarea\n            v-model=\"editAction.newItem.comment\"\n            label=\"Comment\"\n            maxlength=\"200\"\n            counter\n          ></v-text-field>\n\n<!-- END MODIFY-->\n        </v-form>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"saveItem\">Save</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Select a CSV file\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete Confirmation Dialog -->\n  <v-dialog v-model=\"deleteDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting this element will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue-darken-1\" text @click=\"cancelDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"error\" text @click=\"confirmDeletion\">\n          Delete\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Info Dialog -->\n  <v-dialog v-model=\"infoDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Info\n      </v-card-title>\n\n      <v-card-text>\n        <p v-text=\"msg.dashboard.info\"></p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Close Button -->\n        <v-btn color=\"blue\" text @click=\"closeInfoDialog\">\n          OK\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      search: '',\n      page: 1,\n      itemsPerPage: -1,\n      headerNames: [],\n      dialog: false,\n      deleteDialog: false,\n      csvDialog: false,\n      infoDialog: false,\n      csvFile: null,    \n      formTitle: \"\",\n      editMode: false,\n      editAction: {\n        index: -1,\n        oldItem: null,\n        newItem: null,\n      },\n      selected: [],\n      actionsHeader: {\n        title: \"Actions\",\n        value: \"actions\",\n        headerProps: { style: 'font-weight: 700' },\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n    };\n  },\n  computed: {\n    pageCount() {\n      return Math.ceil(this.msg.data.length / this.itemsPerPage);\n    },\n  },\n  watch: {\n    msg: {\n      handler() {\n        if (this.msg?.dashboard?.table?.headers) {\n          this.headerNames = this.msg.dashboard.table.headers.map(header => header.value);\n        };\n        if (\n          this.editMode &&\n          this.msg?.dashboard?.table?.headers?.[this.msg.dashboard.table.headers.length - 1]?.value !== 'actions'\n        ) {\n          this.msg.dashboard.table.headers.push(this.actionsHeader);\n        };\n        // Dynamically update snackbar parameters\n        if (this.msg?.dashboard?.snackbar) {\n          const { show, text, color } = this.msg.dashboard.snackbar;\n          this.snackbar.show = show;\n          this.snackbar.text = text || '';\n          this.snackbar.color = color || 'default';\n        }\n      },\n      deep: true \n    }\n  },\n  methods: {\n    // Sends a message with the current state\n    msgSend() {\n      this.msg.dashboard.snackbar = null;\n      this.send({\n        topic: this.msg.topic,\n        topicMain: this.msg.topicMain,\n        title: this.msg.title,\n        database: this.msg.database,\n        data: this.msg.data,\n        dashboard: this.msg.dashboard,\n        payload: this.msg.payload,\n        time: new Date(),\n      });\n    },\n    \n    // Edit mode controls\n    enableEdit() {\n      this.msg.dashboard.snackbar.show = false;\n      this.msg.dashboard.table.headers.push(this.actionsHeader);\n      this.editMode = true;\n    },\n    disableEdit() {\n      this.msg.dashboard.table.headers = this.msg.dashboard.table.headers.filter(\n        header => header !== this.actionsHeader\n      );\n      this.editMode = false;\n    },\n    \n    // Message Outputs: Update, Deploy and discard edits \n    updateTable() {\n      this.msg.topic = \"update\";\n      this.msg.topicMain = \"update\";\n      this.msg.payload = null;\n      this.msgSend();\n    },\n    deploy() {\n      this.msg.dashboard.loading = true;\n      this.disableEdit();\n      this.msg.topic = \"deploy\";\n      this.msg.topicMain = \"deploy\";\n      this.msgSend();\n      // this.showSnackbar('Deploy action triggered!', 'info');\n    },\n    discardEdit() {\n      this.disableEdit();\n      this.msg.dashboard.history = [];\n      this.updateTable();\n    },\n    \n    // Handling items\n    getDefaultItem() {\n      const defaultItem = {};\n      this.msg.dashboard.table.headers.forEach(header => {\n        if (header.value !== 'actions') {\n          defaultItem[header.value] = header.value === 'enabled' ? true :\n                                        header.value === 'status' ? \"unknown\" : null;\n        }\n      });\n      return defaultItem;\n    },\n    filterItem(item) {\n      if (!item) {\n        return null;\n      }\n      return Object.keys(item)\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exclude keys\n        .filter(key => this.headerNames.includes(key)) // Exclude keys\n        .reduce((obj, key) => {\n          obj[key] = item[key];\n          return obj;\n        }, {});\n    },\n    addEditAction(){\n      let action = JSON.parse(JSON.stringify(this.editAction));\n      action.oldItem = this.filterItem(action.oldItem);\n      action.newItem = this.filterItem(action.newItem);\n      this.msg.dashboard.history.push(action);\n    },\n    addNewItem() {\n      this.editAction.index = -1;\n      this.editAction.oldItem = null;\n      this.editAction.newItem = this.getDefaultItem();\n      this.formTitle = 'Add Item';\n      this.dialog = true;\n    },\n    editItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = { ...item };\n      this.formTitle = 'Edit Item';\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = null;\n      this.deleteDialog = true;\n    },\n\n    // Delete Dialog controls\n    cancelDeletion() {\n      this.deleteDialog = false;\n    },\n    confirmDeletion() {\n      this.deleteDialog = false;\n      if (this.editAction.index > -1) {\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n        // this.showSnackbar('Item deleted successfully!', 'success');\n      }\n    },\n\n    // Form Dialog controls\n    closeDialog() {\n      this.dialog = false;\n      this.$refs.form.reset();\n    },\n    async saveItem() {\n      const { valid } = await this.$refs.form.validate();\n      if (valid) {\n        if (this.editAction.index > -1) {\n          Object.assign(this.msg.data[this.editAction.index], this.editAction.newItem);\n          // this.showSnackbar('Item updated successfully!', 'success');\n        } else {\n          this.msg.data.push({ ...this.editAction.newItem });\n          // this.showSnackbar('Item added successfully!', 'success');\n        }\n        this.addEditAction();\n        this.closeDialog();\n      } else {\n        this.showSnackbar('Please correct the errors in the form.', 'error');\n      }\n    },\n\n    // Info Dialog controls\n    openInfoDialog() {\n      this.infoDialog = true;\n    },\n    closeInfoDialog() {\n      this.infoDialog = false;\n    },\n\n    // CSV Dialog controls\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Data Handling\n    // Stringify function that handles different data types\n    stringifyValue(value) {\n      if (value === undefined || value === null) {\n        return ''; // Handle null or undefined\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value); // Handle arrays by converting them to a JSON string\n      } else if (typeof value === 'object') {\n        return JSON.stringify(value); // Handle objects by converting them to a JSON string\n      } else if (typeof value === 'string') {\n        return value; // Use string as-is\n      } else {\n        return String(value); // Convert other types (number, boolean, etc.) to string\n      }\n    },\n    parseValue(value) {\n      if (typeof value === 'string') {\n        // Handle empty strings\n        if (value === '') return null;\n\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n          value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n          try {\n            return JSON.parse(value);\n          } catch (error) {\n            return value;\n          }\n        }\n        // Check if the string represents a boolean\n        if (value.toLowerCase() === \"true\") return true;\n        if (value.toLowerCase() === \"false\") return false;\n\n        // Check if the string represents a number\n        const parsedNumber = Number(value);\n        if (!isNaN(parsedNumber)) return parsedNumber;\n\n        // Return original value for simple strings\n        return value;\n      }\n      return value;\n    },\n\n    // CSV Upload and Loading\n    async processCsv() {  // Processes the uploaded CSV file\n      if (!this.csvFile) {\n        this.showSnackbar('No file selected!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV successfully uploaded!', 'success');\n      } catch (error) {\n        this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n    parseCsv(content) {  // Parses the CSV file content into an array of objects\n      const rows = content.split(/\\r?\\n/).filter(row => row.trim()); \n      const headers = rows.shift().split(';').map(header => header.trim()); // Use the first row as headers\n      const filteredHeaders = headers.filter(header => !['action', 'status', 'id'].includes(header)) // Exclude some columns\n                        \n      return rows.map(row => {\n          const values = row.split(';');\n          return filteredHeaders.reduce((acc, header) => {\n              const index = headers.indexOf(header); // Ensure the original index is respected\n              if (index !== -1) {\n                  acc[header] = this.parseValue(values[index]); \n              }\n              return acc;\n          }, {});\n      });\n    },\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {  // Check if an item with the same name exists\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n            this.editAction.oldItem = {...existingItem};\n            this.editAction.newItem = {...newItem};\n            this.addEditAction()\n            Object.assign(existingItem, newItem); // Update \n          }\n        } else {\n          this.editAction.oldItem = null;\n          this.editAction.newItem = {...newItem};\n          this.addEditAction()\n          this.msg.data.push(newItem);  // Add new \n        }\n      });\n    },\n    \n    // CSV Generation and Download\n    generateCsv() {\n      const separator = ';';\n      const headersValue = this.msg.dashboard.table.headers\n        .filter(header => !['actions', 'status', 'id'].includes(header.value)) // Exludes some columns\n        .map(header => header.value)\n        headersValue.unshift('id'); // Add id header at the beginning\n      const headers = headersValue.join(separator);\n\n      const rows = this.msg.data.map(item => {\n        return headersValue\n          .map(header => {\n            return this.stringifyValue(item[header]);\n          })\n          .join(separator);\n      }).join('\\n');\n\n\n      return `${headers}\\n${rows}`;\n    },\n    createDownloadLink(csvContent) {\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${this.msg.database.table}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    downloadCsv() {\n      try {\n        const csvContent = this.generateCsv();\n        this.createDownloadLink(csvContent);\n        this.showSnackbar('CSV scaricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante il download del CSV:', error);\n        this.showSnackbar('Errore durante il download del CSV.', 'error');\n      }\n    },\n    \n    // Utility Methods\n    getStatusColor(value) {\n      const colors = {\n        \"unknown\": 'blue',\n        \"connecting\": 'amber',\n        \"connected\": 'green',\n        \"error\": 'red'\n      };\n      if (colors[value]) return colors[value];\n      return 'purple';\n    },\n    getSwitchColor(item) {\n      return item.enabled ? this.getStatusColor(item.status)\n                            : 'grey-lighten-2';\n    },\n    getListColor(list, elem, item) {\n      return item.enabled ? list.includes(elem) ? this.getStatusColor(item.status) : 'red'\n                            : 'grey-lighten-2';\n    },\n    getListColorStatic(list, elem) {\n      return list.includes(elem) ? 'green' : 'red';\n    },\n    handleEnabled(item) {\n      // Custom logic for enabling/disabling\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      item.enabled = !item.enabled;\n      this.editAction.newItem = { ...item };\n      this.addEditAction();\n      \n    },\n    showSnackbar(message, type) {\n      this.snackbar.text = message;\n      this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                          : type === 'error' ? 'red-lighten-3' \n                          : 'blue-lighten-5';\n      this.snackbar.show = true;\n      this.msg.dashboard.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Heading Text Size */\n.text-h5 {\n  font-size: 1.25rem;\n}\n\n/* Actions Column Styling */\n.actions-column {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 60px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 800,
        "y": 120,
        "wires": [
            [
                "5f306086bd1d7b23"
            ]
        ]
    },
    {
        "id": "5f306086bd1d7b23",
        "type": "link out",
        "z": "sf_endpoints",
        "name": "ui_table_out",
        "mode": "link",
        "links": [
            "16e330149fbc6976"
        ],
        "x": 1015,
        "y": 120,
        "wires": []
    },
    {
        "id": "43c1c84c388d6f53",
        "type": "function",
        "z": "sf_endpoints",
        "name": "switch",
        "func": "// Function to format strings by replacing underscores with spaces and capitalizing each word\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// Init\nconst tabName = env.get('TABLE');\nmsg.title = capitalize(tabName);\nmsg.topicMain = msg.topicMain || msg.topic;\nmsg.database = msg.database || {\n    name: env.get(\"DATABASE\"),\n    schema: env.get(\"SCHEMA\"),\n    table: tabName\n};\nmsg.data = msg.data || flow.get(tabName) || null;\nmsg.dashboard = msg.dashboard || {};\nmsg.dashboard.info = msg.dashboard.info || flow.get(\"info\");\n\nif (msg.database.table !== tabName) {\n    msg.error = \"Message with wrong table\";\n}\n\n// Topic switch\nconst indexMap = {\n    // Previous Error\n    error: 0,\n\n    // Previous Action (postgres response)\n    check_table: 2,\n    deploy_changes: 2,\n    select_data: 3,\n\n    // Next Action\n    start: 1,\n    update: 2,\n    deploy: 4,\n};\n\nconst outputs = [null, null, null, null, null];\n\nif (msg.error) outputs[0] = msg;\nelse if (indexMap[msg.topic] !== undefined) outputs[indexMap[msg.topic]] = msg;\n\nreturn outputs;\n\n\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 220,
        "wires": [
            [
                "e776eeee1222c6ae"
            ],
            [
                "3123ac1deab5f251",
                "883fe85dbc30d646"
            ],
            [
                "da767bf21adabe42"
            ],
            [
                "a9c8a0dbacef693b"
            ],
            [
                "4d4c4616a70beee5"
            ]
        ]
    },
    {
        "id": "e776eeee1222c6ae",
        "type": "function",
        "z": "sf_endpoints",
        "name": "error_show",
        "func": "msg.dashboard.snackbar = {\n    show: true,\n    text: `${msg.title} - ${msg.topic} error: ${msg.error.message}`,\n    color: \"red-lighten-3\"\n}\n\nnode.status({ fill: \"red\", shape: \"dot\", text: msg.dashboard.snackbar.text });\n\nmsg.dashboard.history = [];\n\nmsg.dashboard.loading = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "931179e7bf82fd62"
            ]
        ]
    },
    {
        "id": "da767bf21adabe42",
        "type": "function",
        "z": "sf_endpoints",
        "name": "select_data",
        "func": "msg.query = `\n\n    SELECT column_name \n    FROM information_schema.columns \n    WHERE table_schema = '${msg.database.schema}'\n    AND table_name = '${msg.database.table}';\n\n    SELECT * \n    FROM ${msg.database.schema}.${msg.database.table}\n    ORDER BY id;\n\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"select_data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "3123ac1deab5f251",
        "type": "function",
        "z": "sf_endpoints",
        "name": "check_db_table",
        "func": "// Extract schema and table names from the message\nconst schemaName = msg.database.schema;\nconst tableName = msg.database.table;\n\n// Construct the dynamic query for creating the schema and the table\nmsg.query = `\nDO $$\nBEGIN\n   -- Check if schema exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.schemata\n      WHERE schema_name = '${schemaName}'\n   ) THEN\n      CREATE SCHEMA ${schemaName};\n   END IF;\n\n   -- Check if table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${schemaName}' AND table_name = '${tableName}'\n   ) THEN\n      CREATE TABLE ${schemaName}.${tableName} (\n        id SERIAL PRIMARY KEY,\n        enabled BOOLEAN,\n        name TEXT,\n        machine TEXT,\n        protocol TEXT,\n        address TEXT,\n        tag_tables TEXT,\n        comment TEXT\n      );\n   END IF;\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"check_table\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4d4c4616a70beee5",
        "type": "function",
        "z": "sf_endpoints",
        "name": "update_data",
        "func": "function escapeValue(value) {\n    if (value === null || value === undefined) {\n        // Handles NULL values\n        return 'NULL';\n    }\n    else if (Array.isArray(value) || typeof value === 'object') {\n        // Convert arrays and objects to JSON, then escape single quotes\n        const jsonString = JSON.stringify(value);\n        return `'${jsonString.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'string') {\n        // Escapes dangerous characters like single quotes ('), \n        // replacing them with double single quotes ('')\n        return `'${value.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'boolean') {\n        // PostgreSQL uses 'TRUE'/'FALSE' for boolean values\n        return value ? 'TRUE' : 'FALSE';\n    }\n    else {\n        // For numbers (and other primitive types), return the value directly\n        return value;\n    }\n}\n\n\nlet commands = [];\nconst table = msg.database.table;\nconst schema = msg.database.schema;\n\nfor (const change of msg.dashboard.history) {\n    const { index, oldItem, newItem } = change;\n\n    if (oldItem && !newItem) {\n        // Case: deletion\n        commands.push(`DELETE FROM \"${schema}\".\"${table}\"WHERE name = ${escapeValue(oldItem.name)};`);\n\n    } else if (!oldItem && newItem) {\n        // Case: insertion\n        const keys = Object.keys(newItem);\n        const values = Object.values(newItem)\n            .map(value => `${escapeValue(value)}`) // Escape values\n            .join(', ');\n        commands.push(`INSERT INTO \"${schema}\".\"${table}\" (${keys.join(', ')}) VALUES (${values});`);\n\n    } else if (oldItem && newItem) {\n        // Case: update\n        const updates = Object.keys(newItem)\n            .map(key => `${key} = ${escapeValue(newItem[key])}`) // Escape values\n            .join(', ');\n        commands.push(`UPDATE \"${schema}\".\"${table}\" SET ${updates} WHERE name = ${escapeValue(oldItem.name)};`);\n    }\n}\n\n// Constructs the PL/pgSQL block\nmsg.query = `\nDO $$\nBEGIN\n    ${commands.join('\\n')}\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = 'deploy_changes';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "16e330149fbc6976",
        "type": "link in",
        "z": "sf_endpoints",
        "name": "switch_in",
        "links": [
            "5f306086bd1d7b23"
        ],
        "x": 85,
        "y": 180,
        "wires": [
            [
                "a50b2db7656d36e4"
            ]
        ]
    },
    {
        "id": "9a5e06c77b4816e3",
        "type": "debug",
        "z": "sf_endpoints",
        "name": "Endpoints - Switch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 340,
        "wires": []
    },
    {
        "id": "883fe85dbc30d646",
        "type": "function",
        "z": "sf_endpoints",
        "name": "info",
        "func": "",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst info = \"Endpoints info dialog\"\n\n\n\nflow.set(\"info\", info);",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": []
    },
    {
        "id": "d2d45d55cb6c2ab7",
        "type": "status",
        "z": "sf_endpoints",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 440,
        "wires": [
            [
                "ed6d8d4a91cc9da2"
            ]
        ]
    },
    {
        "id": "ed6d8d4a91cc9da2",
        "type": "function",
        "z": "sf_endpoints",
        "name": "status_filter",
        "func": "if (msg.status){\n    msg.status.fill = msg.status.fill || \"green\";\n    msg.status.shape = msg.status.shape || \"dot\";\n    if (!msg.status.text || msg.status.text === \"0\"){\n        const localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n        msg.status.text = `last update: ${localTime}`;\n    }\n    if (msg.status.fill === \"blue\") {\n        msg.status.fill = \"green\"\n    }\n    return msg;\n}\nreturn null\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "d54fcd351021ab6a",
        "type": "catch",
        "z": "sf_endpoints",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 220,
        "y": 80,
        "wires": [
            [
                "e776eeee1222c6ae",
                "c7f332bfd161030f"
            ]
        ]
    },
    {
        "id": "2174b79660ae402d",
        "type": "function",
        "z": "sf_endpoints",
        "name": "clear_update",
        "func": "return {\n    topic: (msg.topicMain === 'start') ? 'start' : 'update',\n    time: new Date(),\n    _msgid: msg._msgid\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2c18819cc0f040f4",
        "type": "http request",
        "z": "sf_endpoints",
        "name": "GET current flows",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 320,
        "wires": [
            [
                "b03cedf686672073",
                "a3e372b3ab10528f"
            ]
        ]
    },
    {
        "id": "b03cedf686672073",
        "type": "function",
        "z": "sf_endpoints",
        "name": "update_connections",
        "func": "// This code rewrite the configuration of all connection tabs in Node-RED:\n\n// ________________________Heplpers___________________________\n\n// Helper function to generate unique IDs\nfunction generateId(existingIds) {\n    function randomHex(size) {\n        const chars = \"0123456789abcdef\";\n        let id = \"\";\n        for (let i = 0; i < size; i++) {\n            id += chars[Math.floor(Math.random() * chars.length)];\n        }\n        return id;\n    }\n\n    let id;\n    do {\n        id = randomHex(16);\n    } while (existingIds.includes(id));\n\n    existingIds.push(id);\n    return id;\n}\n\n// Helper function to convert time to milliseconds\nfunction timeToMilliseconds(timeStr) {\n    if (timeStr === undefined || timeStr === null || timeStr === '' || timeStr.toLowerCase() === 'none') {\n        return 0;\n    }\n    // Extract the numeric part and the unit part\n    const num = parseFloat(timeStr);\n    const unit = timeStr.replace(num, '').trim();\n\n    // Convert based on the unit\n    switch(unit) {\n        case 'ms':\n            return num; // Already in milliseconds\n        case 's':\n            return num * 1000; // Convert seconds to milliseconds\n        case 'm':\n            return num * 1000 * 60; // Convert minutes to milliseconds\n        case 'h':\n            return num * 1000 * 60 * 60; // Convert hours to milliseconds\n        case 'd':\n            return num * 1000 * 60 * 60 * 24; // Convert days to milliseconds\n        default:\n            node.error(`Invalid time unit - ${timeStr} - ${num} - ${unit}`);\n    }\n}\n\n// Helper function to safely parse the endpoint address\nfunction parseEndpointAddress(endpoint, endpointRegex) {\n    if (!endpoint || !endpoint.address) {\n        node.error(`Invalid endpoint object or missing address.`);\n        node.status({ fill: \"red\", shape: \"dot\", text: `Invalid endpoint object or missing address` });\n        return null;\n    }\n\n    // Match the address against the regex pattern\n    const match = endpoint.address.match(endpointRegex);\n    if (!match) {\n        node.error(`Endpoint ${endpoint.name} address is not in the correct format. Expected format: \"IP:PORT@RACK:SLOT\"`);\n        node.status({ fill: \"red\", shape: \"dot\", text: `Endpoint ${endpoint.name} address is not in the correct format` });\n        return null\n    }\n\n    // Extract matched values\n    const [, address, port, rack, slot] = match;\n\n    return {\n        address,\n        port: String(port),\n        rack: String(rack),\n        slot: String(slot)\n    };\n}\n\n\n// ________________________Insert Prototypes___________________________\n\n// Function to generate the status and catch flows\nfunction generateStaticNodes() {\n    updatedNodes.push(...[\n        {\n            \"id\": \"nS_connections\",\n            \"type\": \"status\",\n            \"z\": \"tab_connections\",\n            \"name\": \"\",\n            \"scope\": null,\n            \"x\": 120,\n            \"y\": 60,\n            \"wires\": [\n                [\n                    \"loS_connections\"\n                ]\n            ]\n        },\n        {\n            \"id\": \"loS_connections\",\n            \"type\": \"link out\",\n            \"z\": \"tab_connections\",\n            \"name\": \"status_connections\",\n            \"mode\": \"link\",\n            \"links\": [\n                \"liALL_status\"\n            ],\n            \"x\": 235,\n            \"y\": 60,\n            \"wires\": []\n        },\n        {\n            \"id\": \"nC_connections\",\n            \"type\": \"catch\",\n            \"z\": \"tab_connections\",\n            \"name\": \"\",\n            \"scope\": null,\n            \"uncaught\": false,\n            \"x\": 520,\n            \"y\": 60,\n            \"wires\": [\n                [\n                    \"loC_connections\"\n                ]\n            ]\n        },\n        {\n            \"id\": \"loC_connections\",\n            \"type\": \"link out\",\n            \"z\": \"tab_connections\",\n            \"name\": \"error_connections\",\n            \"mode\": \"link\",\n            \"links\": [\n                \"liALL_errors\"\n            ],\n            \"x\": 635,\n            \"y\": 60,\n            \"wires\": []\n        }\n    ]);\n    startY += 150;\n}\n\n// Function to generate the nodes for a S7 endpoint with a custom trigger\nfunction generateS7triggered(endpoint, tag_tables) {\n    const endpointRegex = /^([\\w\\-.]+):(\\d+)@(\\d+):(\\d+)$/; // Regex to match the endpoint address\n    const S7endpointId = `S7endpoint_e${endpoint.id}`;\n    const S7inId = `s7in_e${endpoint.id}`;\n    const S7controlId = `s7control_e${endpoint.id}`;\n    const S7linkInId = `s7control_e${endpoint.id}_in`;\n    const S7linkOutId = `s7control_e${endpoint.id}_out`;\n    const endpointNode = updatedNodes.find(node => node.id === S7endpointId);\n    if (!endpoint.enabled && endpointNode) {\n        updatedNodes = updatedNodes.filter(node => node.id !== S7endpointId);\n        deployNeeded = true;\n    }\n    if (!endpoint.enabled) {\n        return;\n    }\n    if (!tag_tables.length) {\n        return;\n    }\n    const parsedAddress = parseEndpointAddress(endpoint, endpointRegex);\n    if (!parsedAddress) {\n        return;\n    }\n    const { address, port, rack, slot } = parsedAddress;\n    updatedNodes.push({\n        \"id\": `comment_e${endpoint.id}`,\n        \"type\": \"comment\",\n        \"z\": \"tab_connections\",\n        \"name\": `Endpoint ${endpoint.id}: ${endpoint.name} - triggered`,\n        \"info\": `README: https://github.com/st-one-io/node-red-contrib-s7/blob/master/README.md`,\n        \"x\": 220,\n        \"y\": startY,\n        \"wires\": []\n    });\n    startY += 50;\n\n    // Check if the endpoint node for this endpoint already exists\n    if (!endpointNode) {\n        deployNeeded = true;\n        updatedNodes.push({\n            \"id\": S7endpointId,\n            \"type\": \"s7 endpoint\",\n            \"transport\": \"iso-on-tcp\",\n            \"address\": address,\n            \"port\": port,\n            \"rack\": rack,\n            \"slot\": slot,\n            \"localtsaphi\": \"01\",\n            \"localtsaplo\": \"00\",\n            \"remotetsaphi\": \"01\",\n            \"remotetsaplo\": \"00\",\n            \"connmode\": \"rack-slot\",\n            \"adapter\": \"\",\n            \"busaddr\": \"2\",\n            \"cycletime\": \"0\",\n            \"timeout\": \"5000\",\n            \"name\": \"\",\n            \"vartable\": []\n        });\n    } else {\n        deployNeeded = endpointNode.address !== address || endpointNode.port !== port || endpointNode.rack !== rack || endpointNode.slot !== slot;\n        if (deployNeeded) {\n            endpointNode.address = address;\n            endpointNode.port = port;\n            endpointNode.rack = rack;\n            endpointNode.slot = slot;\n        }\n    }\n\n    // Create the data handler flow for each table\n    let sf_data_handlerIds = [];\n    let dY = startY + 50;\n    for (let table of tag_tables) {\n        const triggerId = `trigger_e${endpoint.id}_t${table.id}_out`;\n        const sf_data_handlerId = `sf_data_handler_e${endpoint.id}_t${table.id}`;\n        const linkInId = `sf_data_handler_e${endpoint.id}_t${table.id}_in`;\n        const linkCallId = `sf_data_handler_e${endpoint.id}_t${table.id}_call`;\n        sf_data_handlerIds.push(sf_data_handlerId);\n        updatedNodes.push(...[\n            {\n                \"id\": sf_data_handlerId,\n                \"type\": \"subflow:sf_data_handler\",\n                \"z\": \"tab_connections\",\n                \"name\": `${table.name}@${endpoint.id}`,\n                \"env\": [\n                    {\n                        \"name\": \"ENDPOINT_ID\",\n                        \"value\": String(endpoint.id),\n                        \"type\": \"num\"\n                    },\n                    {\n                        \"name\": \"TAG_TABLE\",\n                        \"value\": table.name,\n                        \"type\": \"str\"\n                    }\n                ],\n                \"x\": 520,\n                \"y\": dY,\n                \"wires\": [\n                    [\n                        linkCallId\n                    ]\n                ]\n            },\n            {\n                \"id\": linkCallId,\n                \"type\": \"link call\",\n                \"z\": \"tab_connections\",\n                \"name\": \"dynamic\",\n                \"links\": [],\n                \"linkType\": \"dynamic\",\n                \"timeout\": \"30\",\n                \"x\": 820,\n                \"y\": dY,\n                \"wires\": [\n                    [\n                        sf_data_handlerId\n                    ]\n                ]\n            },\n            {\n                \"id\": linkInId,\n                \"type\": \"link in\",\n                \"z\": \"tab_connections\",\n                \"name\": linkInId,\n                \"links\": [\n                    triggerId\n                ],\n                \"x\": 220,\n                \"y\": dY,\n                \"wires\": [\n                    [\n                        sf_data_handlerId\n                    ]\n                ]\n            }\n        ]);\n        dY += 100;\n\n        // Check if the trigger node for this endpoint already exists\n        /*\n        const triggerNode = updatedNodes.find(node => node.id === triggerId);\n        if (!triggerNode) {\n            deployNeeded = true;\n            updatedNodes.push({\n                \"id\": triggerId,\n                \"type\": \"link out\",\n                \"z\": \"tab_triggers\",\n                \"name\": triggerId,\n                \"mode\": \"link\",\n                \"links\": [\n                    sf_data_handlerId\n                ],\n                \"x\": 400,\n                \"y\": 100,\n                \"wires\": []\n            });\n        }\n        */\n    }\n\n    // Create the S7 in and S7 control nodes\n    sf_data_handlerIds.sort();\n    updatedNodes.push(...[{\n        \"id\": S7inId,\n        \"type\": \"s7 in\",\n        \"z\": \"tab_connections\",\n        \"endpoint\": S7endpointId,\n        \"mode\": \"all\",\n        \"variable\": \"\",\n        \"diff\": false,\n        \"name\": \"\",\n        \"x\": 220,\n        \"y\": startY,\n        \"wires\": [\n            sf_data_handlerIds\n        ]\n    },\n    {\n        \"id\": S7linkInId,\n        \"type\": \"link in\",\n        \"z\": \"tab_connections\",\n        \"name\": S7linkInId,\n        \"links\": [],\n        \"x\": 520,\n        \"y\": startY,\n        \"wires\": [\n            [\n                S7controlId\n            ]\n        ]\n    },\n    {\n        \"id\": S7controlId,\n        \"type\": \"s7 control\",\n        \"z\": \"tab_connections\",\n        \"endpoint\": S7endpointId,\n        \"function\": \"trigger\",\n        \"name\": \"\",\n        \"x\": 770,\n        \"y\": startY,\n        \"wires\": [\n            [\n                S7linkOutId\n            ]\n        ]\n    },\n    {\n        \"id\": S7linkOutId,\n        \"type\": \"link out\",\n        \"z\": \"tab_connections\",\n        \"name\": S7linkOutId,\n        \"mode\": \"return\",\n        \"links\": [],\n        \"x\": 1020,\n        \"y\": startY,\n        \"wires\": []\n    }]);\n\n    startY += (dY - startY);\n}\n\n// Function to generate the nodes for a S7 endpoint with a custom trigger\nfunction generateS7continous(endpoint, tag_tables, period, diff) {\n    const endpointRegex = /^([\\w\\-.]+):(\\d+)@(\\d+):(\\d+)$/; // Regex to match the endpoint address\n    const S7endpointId = `S7endpoint_e${endpoint.id}_${period}`;\n    const suffix = diff ? \"diff\" : \"ever\";\n    const S7inId = `s7in_e${endpoint.id}_${period}_${suffix}`;\n    const endpointNode = updatedNodes.find(node => node.id === S7endpointId);\n    if (!endpoint.enabled && endpointNode) {\n        updatedNodes = updatedNodes.filter(node => node.id !== S7endpointId);\n        deployNeeded = true;\n    }\n    if (!endpoint.enabled) {\n        return;\n    }\n    if (!tag_tables.length) {\n        return;\n    }\n    const parsedAddress = parseEndpointAddress(endpoint, endpointRegex);\n    if (!parsedAddress) {\n        return;\n    }\n    const { address, port, rack, slot } = parsedAddress;\n    updatedNodes.push({\n        \"id\": `comment_e${endpoint.id}_${period}_${suffix}`,\n        \"type\": \"comment\",\n        \"z\": \"tab_connections\",\n        \"name\": `Endpoint ${endpoint.id}: ${endpoint.name} - ${period} - ${suffix}`,\n        \"info\": `README: https://github.com/st-one-io/node-red-contrib-s7/blob/master/README.md`,\n        \"x\": 220,\n        \"y\": startY,\n        \"wires\": []\n    });\n    startY += 50;\n\n    // Check if the endpoint node for this endpoint already exists\n    if (!endpointNode) {\n        deployNeeded = true;\n        updatedNodes.push({\n            \"id\": S7endpointId,\n            \"type\": \"s7 endpoint\",\n            \"transport\": \"iso-on-tcp\",\n            \"address\": address,\n            \"port\": port,\n            \"rack\": rack,\n            \"slot\": slot,\n            \"localtsaphi\": \"01\",\n            \"localtsaplo\": \"00\",\n            \"remotetsaphi\": \"01\",\n            \"remotetsaplo\": \"00\",\n            \"connmode\": \"rack-slot\",\n            \"adapter\": \"\",\n            \"busaddr\": \"2\",\n            \"cycletime\": String(timeToMilliseconds(period)),\n            \"timeout\": \"5000\",\n            \"name\": \"\",\n            \"vartable\": []\n        });\n    } else {\n        deployNeeded = endpointNode.address !== address || endpointNode.port !== port || endpointNode.rack !== rack || endpointNode.slot !== slot;\n        if (deployNeeded) {\n            endpointNode.address = address;\n            endpointNode.port = port;\n            endpointNode.rack = rack;\n            endpointNode.slot = slot;\n        }\n    }\n\n    // Create the data handler flow for each table\n    let sf_data_handlerIds = [];\n    let dY = startY;\n    for (let table of tag_tables) {\n        const sf_data_handlerId = `sf_data_handler_e${endpoint.id}_t${table.id}`;\n        const linkCallId = `sf_data_handler_e${endpoint.id}_t${table.id}_call`;\n        sf_data_handlerIds.push(sf_data_handlerId);\n        updatedNodes.push(...[\n            {\n                \"id\": sf_data_handlerId,\n                \"type\": \"subflow:sf_data_handler\",\n                \"z\": \"tab_connections\",\n                \"name\": `${table.name}@${endpoint.id}`,\n                \"env\": [\n                    {\n                        \"name\": \"ENDPOINT_ID\",\n                        \"value\": String(endpoint.id),\n                        \"type\": \"num\"\n                    },\n                    {\n                        \"name\": \"TAG_TABLE\",\n                        \"value\": table.name,\n                        \"type\": \"str\"\n                    }\n                ],\n                \"x\": 540,\n                \"y\": dY,\n                \"wires\": [\n                    [\n                        linkCallId\n                    ]\n                ]\n            },\n            {\n                \"id\": linkCallId,\n                \"type\": \"link call\",\n                \"z\": \"tab_connections\",\n                \"name\": \"dynamic\",\n                \"links\": [],\n                \"linkType\": \"dynamic\",\n                \"timeout\": \"30\",\n                \"x\": 820,\n                \"y\": dY,\n                \"wires\": [\n                    [\n                        sf_data_handlerId\n                    ]\n                ]\n            },\n        ]);\n        dY += 100;\n    }\n\n    // Create the S7 in and S7 control nodes\n    sf_data_handlerIds.sort();\n    updatedNodes.push({\n        \"id\": S7inId,\n        \"type\": \"s7 in\",\n        \"z\": \"tab_connections\",\n        \"endpoint\": S7endpointId,\n        \"mode\": \"all\",\n        \"variable\": \"\",\n        \"diff\": diff,\n        \"name\": \"\",\n        \"x\": 220,\n        \"y\": startY,\n        \"wires\": [\n            sf_data_handlerIds\n        ]\n    });\n\n    startY += (dY - startY);\n}\n\n\n// _________________________Main_______________________________\n\nconst endpoints = msg.data;  // Array of all endpoints\nconst history = msg.history; // Array of all history\nconst allNodes = msg.payload;   // Current nodes\nconst tag_tables = global.get('tag_tables');\n\nif (!Array.isArray(endpoints) || !Array.isArray(allNodes)) {\n    node.error(\"Input data or allNodes is not in the expected format.\");\n    return;\n}\n\n// Collect all currently existing IDs\nlet existingIds = allNodes.map(node => node.id);\n\n// Filter out all \"tab_connections\" nodes to rigenerate them\nlet updatedNodes = (JSON.parse(JSON.stringify(allNodes))).filter(node => node.z !== \"tab_connections\");\nlet deployNeeded = false;\nlet startY = 0;\n\n// Generate nodes\n\ngenerateStaticNodes();\n\nfor (let endpoint of endpoints) {\n    const trigger_tables = tag_tables.filter(table =>\n        endpoint.tag_tables.includes(table.name) &&\n        table.protocol === endpoint.protocol &&\n        [\"trigger\", \"trigger_custom\"].includes(table.sampling_mode)\n    );\n    const c_tables = tag_tables.filter(table =>\n        endpoint.tag_tables.includes(table.name) &&\n        table.protocol === endpoint.protocol &&\n        table.sampling_mode === \"continous\"\n    );\n    const coc_tables = tag_tables.filter(table =>\n        endpoint.tag_tables.includes(table.name) &&\n        table.protocol === endpoint.protocol &&\n        table.sampling_mode === \"continous_on_change\"\n    );\n\n    switch (endpoint.protocol) {\n        case \"S7\": {\n            generateS7triggered(endpoint, trigger_tables);\n            let sampling_periods_set = new Set(c_tables.map(table => table.sampling_freq));\n            for (let period of sampling_periods_set) {\n                const tables = c_tables.filter(table => table.sampling_freq === period);\n                generateS7continous(endpoint, tables, period, false);\n            }\n            for (let period of sampling_periods_set) {\n                const tables = coc_tables.filter(table => table.sampling_freq === period);\n                generateS7continous(endpoint, tables, period, true);\n            }\n        }\n    }\n}\n\n// Remove nodes if the endpoint is deleted\nfor (let edit of history) {\n    if (edit.oldItem && !edit.newItem) {\n        deployNeeded = true;\n        const endpoint = edit.oldItem;\n        const S7endpointId = `S7endpoint_e${endpoint.id}`;\n        updatedNodes = updatedNodes.filter(node => node.id !== S7endpointId);\n        const tag_tables = global.get('tag_tables').filter(table => endpoint.tag_tables.includes(table.name));\n        /*\n        for (let table of tag_tables) {\n            const triggerId = `trigger_e${endpoint.id}_t${table.id}_out`;\n            updatedNodes = updatedNodes.filter(node => node.id !== triggerId);\n        }\n        */\n    }\n}\n\n// Deploy needed check and return\nconst previousTabNodes = allNodes.filter(node => node.z === \"tab_connections\").sort((a, b) => a.id.localeCompare(b.id));\nconst updatedTabNodes = updatedNodes.filter(node => node.z === \"tab_connections\").sort((a, b) => a.id.localeCompare(b.id));\ndeployNeeded = deployNeeded || JSON.stringify(previousTabNodes) !== JSON.stringify(updatedTabNodes);\n\nif (deployNeeded) {\n    const deploycount = global.get(\"dpc_connections\") + 1 || 1;\n    global.set(\"dpc_connections\", deploycount);\n    msg.payload = updatedNodes\n    node.status({ fill: \"green\", shape: \"dot\", text: `Deploy ${deploycount} sent` });\n    msg.log = msg.log || [];\n    msg.log.push({ oldFlow: previousTabNodes, newFlow: updatedTabNodes });\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 380,
        "wires": [
            [
                "9d2a1ef00e8cfc14",
                "a3e372b3ab10528f"
            ],
            [
                "2174b79660ae402d"
            ]
        ]
    },
    {
        "id": "9d2a1ef00e8cfc14",
        "type": "http request",
        "z": "sf_endpoints",
        "name": "POST updated flows",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Node-RED-Deployment-Type",
                "valueType": "other",
                "valueValue": "flows"
            }
        ],
        "x": 1100,
        "y": 380,
        "wires": [
            [
                "2174b79660ae402d"
            ]
        ]
    },
    {
        "id": "a3e372b3ab10528f",
        "type": "debug",
        "z": "sf_endpoints",
        "name": "Endpoints - Flows",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 320,
        "wires": []
    },
    {
        "id": "c7f332bfd161030f",
        "type": "debug",
        "z": "sf_endpoints",
        "name": "Endpoints - ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 60,
        "wires": []
    },
    {
        "id": "6b49bb402c49a762",
        "type": "delay",
        "z": "sf_endpoints",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 260,
        "wires": [
            [
                "2c18819cc0f040f4"
            ]
        ]
    },
    {
        "id": "b5d4e64ea87f3197",
        "type": "debug",
        "z": "sf_triggers",
        "name": "Triggers - Template",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 80,
        "wires": []
    },
    {
        "id": "e46ff4cadd8b984f",
        "type": "function",
        "z": "sf_triggers",
        "name": "update_status",
        "func": "// Function to replace underscores with spaces and capitalize words\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\nfunction parseValue(value) {\n    if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n            value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n            try {\n                return JSON.parse(value);\n            } catch (error) {\n                return value;\n            }\n        }\n        // Return original value for non-JSON types\n        return value;\n    }\n    return value;\n}\n\n// Retrieve existing data or initialize\nlet columns = [];\nlet data = global.get(msg.database.table) || [];\n\n// Extract column names from PostgreSQL query\nif (msg.pgsql && msg.pgsql[0] && msg.pgsql[0].rows) {\n    columns = msg.pgsql[0].rows.map(col => col.column_name);\n}\n\n// Extract data rows from PostgreSQL query and parse them\nif (msg.pgsql && msg.pgsql[1] && msg.pgsql[1].rows) {\n    data = msg.pgsql[1].rows;\n    data.forEach((row, rowIndex) => {\n        Object.keys(row).forEach((key) => {\n            let originalValue = row[key];\n            row[key] = parseValue(originalValue)\n        });\n    });\n}\n\n// Build dynamic table headers\nconst baseHeaders = columns.length > 0\n    ? columns\n        .filter(key => !['actions', 'status'].includes(key)) // Exludes some columns\n        .sort((a, b) => (a === 'enabled' ? -1 : b === 'enabled' ? 1 : 0)) // Sorts 'enabled' column first\n        .map(key => ({\n            title: capitalize(key),\n            value: key,\n            headerProps: { style: 'font-weight: 700' },\n            sortable: true\n        }))\n    : [];\n\n\n// Define possible states for triggers\nconst states = [\"unknown\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connecting\", \"error\"];\nconst lengthItems = states.length;\n\n// Assign random states to triggers if not already set\nfor (let i = 0; i < data.length; i++) {\n    let randomIndex = Math.floor(Math.random() * lengthItems);\n    if (!data[i].status) {\n        data[i].status = states[randomIndex];\n    }\n    if (typeof data[i].enabled === 'string') {\n        let enabledLower = data[i].enabled.toLowerCase();\n        data[i].enabled = (enabledLower === 'true');\n    }\n    if (data[i].enabled === null) {\n        data[i].enabled = true;\n    }\n}\n\nlet snacktext = \"\";\nif (msg.topicMain === \"deploy\") {\n    snacktext = `${msg.title} Saved Successfully!`;\n} else if (msg.topicMain === \"update\") {\n    snacktext = `${msg.title} Updated Successfully!`;\n} else if (msg.topicMain === \"start\") {\n    snacktext = `${msg.title} Started Successfully!`;\n}\n\n// Assign table data to the message\nmsg.data = data;\n\nmsg.dashboard.table = {\n    title: msg.title,\n    headers: baseHeaders\n};\nmsg.dashboard.form = {\n    endpoint: global.get(\"endpoints\").map(endp => endp.name),\n    tag_tables: global.get(\"tag_tables\"),\n};\n\nmsg.history = msg.dashboard.history || [];\nmsg.dashboard.history = [];\n\nmsg.dashboard.snackbar = {\n    show: true,\n    text: snacktext,\n    color: \"green-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\n// Save data back to the global context\nglobal.set(msg.database.table, data);\n\n// Update status\nconst localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\nnode.status({ fill: \"green\", shape: \"dot\", text: `last update: ${localTime}` });\n\nmsg.topic = 'update_status';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "b04b2a27a423ecac",
                "cb6fc57786d97ac1"
            ]
        ]
    },
    {
        "id": "c8a2d8d6fc55e49d",
        "type": "ui-template",
        "z": "sf_triggers",
        "group": "4290ffc4397af8c8",
        "page": "",
        "ui": "",
        "name": "table_triggers",
        "order": 4,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Container -->\n  <v-card>\n    <!-- Card Header with Title, Reload Button, Search Bar, and Action Buttons -->\n    <v-card-item class=\"bg-primary\">\n      <v-row class=\"my-2 align-self-center\" no-gutters>\n        \n        <!-- Title -->\n        <v-col cols=\"auto\" class=\"mx-4 align-self-center\">\n          <v-btn\n            @click=\"openInfoDialog\"\n            variant=\"tonal\"\n            class=\"font-weight-bold text-h5 text-white\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-table</v-icon>\n            <p class=\"mx-1 align-self-center\" v-text=\"msg.dashboard.table.title\"></p>\n          </v-btn>\n        </v-col>\n\n        <!-- Search Bar -->\n        <v-col class=\"mx-4 align-self-center\">\n          <v-text-field\n            v-model=\"search\"\n            label=\"Search\"\n            prepend-inner-icon=\"mdi-magnify\"\n            single-line\n            clearable\n            hide-details\n            color=\"white\"\n          ></v-text-field>\n        </v-col>\n\n        <!-- Action Buttons (CSV Upload, CSV Download, Edit, Save, Add New, Discard) -->\n        <v-col cols=\"auto\" class=\"mx-2 align-self-center text-white\">\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"updateTable\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-reload</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Reload</span>\n          </v-btn>\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"downloadCsv\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-export</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Export</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"enableEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Edit</span>\n          </v-btn>\n\n          <!-- Buttons visible in Edit Mode -->\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"openCsvDialog\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-import</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Import</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"addNewItem\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-plus</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Add New</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deploy\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-floppy</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Save</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"discardEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil-off</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Discard</span>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <!-- Data Table with Custom Cell Templates -->\n    <v-data-table\n      v-model=\"selected\"\n      :headers=\"msg.dashboard.table.headers\"\n      :items=\"msg.data\"\n      :search=\"search\"\n      :items-per-page=\"itemsPerPage\"\n      :items-per-page-options=\"[5, 10, 25, 50, -1]\"\n      class=\"elevation-1\"\n      :loading=\"msg.dashboard.loading\"\n      loading-text=\"Loading...\"\n      density=\"default\"\n    >\n<!-- MODIFY DISPLAY HERE -->\n\n      <!-- Toggle Switch for 'enabled' Field -->\n      <template v-slot:item.enabled=\"{ item }\">\n        <v-switch\n          v-model=\"item.enabled\"\n          :model-value=\"item.enabled\"\n          :color=\"getSwitchColor(item)\"\n          :base-color=\"getSwitchColor(item)\"\n          :disabled=\"!editMode\"\n          hide-details\n          @click=\"handleEnabled(item)\"\n        ></v-switch>\n      </template>      \n\n      <!-- Display Endpoints as Chips -->\n      <template v-slot:item.endpoint=\"{ item }\">\n        <div>\n          <v-chip\n            class=\"ma-1\"\n            :color=\"getListColor(msg.dashboard.form.endpoint, item.endpoint, item)\"\n            dark\n          >\n            {{ item.endpoint }}\n          </v-chip>\n        </div>\n      </template>\n\n      <!-- Display Tags as Chips -->\n      <template v-slot:item.tag_tables=\"{ item }\">\n        <div>\n          <v-chip\n            v-for=\"(tag, index) in item.tag_tables\"\n            :key=\"index\"\n            class=\"ma-1\"\n            :color=\"getListColor(msg.dashboard.form.tag_tables.map(tab => tab.name), tag, item)\"\n            dark\n          >\n            {{ tag }}\n          </v-chip>\n        </div>\n      </template>\n\n<!-- END MODIFY -->\n      <!-- Actions Column with Edit and Delete Icons -->\n      <template v-slot:item.actions=\"{ item }\">\n        <div class=\"actions-column\">\n          <v-icon\n            v-show=\"editMode\"\n            small\n            class=\"mr-2\"\n            @click=\"editItem(item)\"\n            color=\"blue-darken-2\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-pencil\n          </v-icon>\n\n          <v-icon\n            v-show=\"editMode\"\n            small\n            @click=\"deleteItem(item)\"\n            color=\"error\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-delete\n          </v-icon>\n        </div>\n      </template>\n\n      <!-- No Data Message -->\n      <template v-slot:no-data>\n        <v-row class=\"ma-4\">\n          <v-alert :value=\"true\" color=\"warning\" icon=\"mdi-alert\">\n            No matching records found.\n          </v-alert>\n        </v-row>\n      </template>\n    </v-data-table>\n  </v-card>\n\n  <!-- Dialog for Adding or Editing Items -->\n  <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">{{ formTitle }}</span>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" v-model=\"valid\" fast-fail @submit.prevent>\n<!-- MODIFY FORM HERE -->\n\n          <!-- Form Fields -->\n          <v-text-field\n            v-model=\"editAction.newItem.name\"\n            label=\"Name\"\n            :rules=\"[v => !!v || 'Name is required']\"\n            required\n          ></v-text-field>\n          <v-text-field\n            v-model=\"editAction.newItem.tag_address\"\n            label=\"Tag Address\"\n            :rules=\"[v => !!v || 'Tag Address is required']\"\n            required\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.endpoint\"\n            label=\"Endpoint\"\n            :items=\"msg.dashboard.form.endpoint\"\n            :rules=\"[v => !!v || 'Endpoint is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-select\n            v-model=\"editAction.newItem.tag_tables\"\n            label=\"Tag Tables\"\n            :items=\"msg.dashboard.form.tag_tables\n                      .map(tab => tab.name)\"\n            multiple\n            chips\n            clearable\n          ></v-select>\n          <v-textarea\n            v-model=\"editAction.newItem.comment\"\n            label=\"Comment\"\n            maxlength=\"200\"\n            counter\n          ></v-text-field>\n\n<!-- END MODIFY-->\n        </v-form>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"saveItem\">Save</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Select a CSV file\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete Confirmation Dialog -->\n  <v-dialog v-model=\"deleteDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting this element will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue-darken-1\" text @click=\"cancelDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"error\" text @click=\"confirmDeletion\">\n          Delete\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Info Dialog -->\n  <v-dialog v-model=\"infoDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Info\n      </v-card-title>\n\n      <v-card-text>\n        <p v-text=\"msg.dashboard.info\"></p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Close Button -->\n        <v-btn color=\"blue\" text @click=\"closeInfoDialog\">\n          OK\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      search: '',\n      page: 1,\n      itemsPerPage: -1,\n      headerNames: [],\n      dialog: false,\n      deleteDialog: false,\n      csvDialog: false,\n      infoDialog: false,\n      csvFile: null,    \n      formTitle: \"\",\n      editMode: false,\n      editAction: {\n        index: -1,\n        oldItem: null,\n        newItem: null,\n      },\n      selected: [],\n      actionsHeader: {\n        title: \"Actions\",\n        value: \"actions\",\n        headerProps: { style: 'font-weight: 700' },\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n    };\n  },\n  computed: {\n    pageCount() {\n      return Math.ceil(this.msg.data.length / this.itemsPerPage);\n    },\n  },\n  watch: {\n    msg: {\n      handler() {\n        if (this.msg?.dashboard?.table?.headers) {\n          this.headerNames = this.msg.dashboard.table.headers.map(header => header.value);\n        };\n        if (\n          this.editMode &&\n          this.msg?.dashboard?.table?.headers?.[this.msg.dashboard.table.headers.length - 1]?.value !== 'actions'\n        ) {\n          this.msg.dashboard.table.headers.push(this.actionsHeader);\n        };\n        // Dynamically update snackbar parameters\n        if (this.msg?.dashboard?.snackbar) {\n          const { show, text, color } = this.msg.dashboard.snackbar;\n          this.snackbar.show = show;\n          this.snackbar.text = text || '';\n          this.snackbar.color = color || 'default';\n        }\n      },\n      deep: true \n    }\n  },\n  methods: {\n    // Sends a message with the current state\n    msgSend() {\n      this.msg.dashboard.snackbar = null;\n      this.send({\n        topic: this.msg.topic,\n        topicMain: this.msg.topicMain,\n        title: this.msg.title,\n        database: this.msg.database,\n        data: this.msg.data,\n        dashboard: this.msg.dashboard,\n        payload: this.msg.payload,\n        time: new Date(),\n      });\n    },\n    \n    // Edit mode controls\n    enableEdit() {\n      this.msg.dashboard.snackbar.show = false;\n      this.msg.dashboard.table.headers.push(this.actionsHeader);\n      this.editMode = true;\n    },\n    disableEdit() {\n      this.msg.dashboard.table.headers = this.msg.dashboard.table.headers.filter(\n        header => header !== this.actionsHeader\n      );\n      this.editMode = false;\n    },\n    \n    // Message Outputs: Update, Deploy and discard edits \n    updateTable() {\n      this.msg.topic = \"update\";\n      this.msg.topicMain = \"update\";\n      this.msg.payload = null;\n      this.msgSend();\n    },\n    deploy() {\n      this.msg.dashboard.loading = true;\n      this.disableEdit();\n      this.msg.topic = \"deploy\";\n      this.msg.topicMain = \"deploy\";\n      this.msgSend();\n      // this.showSnackbar('Deploy action triggered!', 'info');\n    },\n    discardEdit() {\n      this.disableEdit();\n      this.msg.dashboard.history = [];\n      this.updateTable();\n    },\n    \n    // Handling items\n    getDefaultItem() {\n      const defaultItem = {};\n      this.msg.dashboard.table.headers.forEach(header => {\n        if (header.value !== 'actions') {\n          defaultItem[header.value] = header.value === 'enabled' ? true :\n                                        header.value === 'status' ? \"unknown\" : null;\n        }\n      });\n      return defaultItem;\n    },\n    filterItem(item) {\n      if (!item) {\n        return null;\n      }\n      return Object.keys(item)\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exclude keys\n        .filter(key => this.headerNames.includes(key)) // Exclude keys\n        .reduce((obj, key) => {\n          obj[key] = item[key];\n          return obj;\n        }, {});\n    },\n    addEditAction(){\n      let action = JSON.parse(JSON.stringify(this.editAction));\n      action.oldItem = this.filterItem(action.oldItem);\n      action.newItem = this.filterItem(action.newItem);\n      this.msg.dashboard.history.push(action);\n    },\n    addNewItem() {\n      this.editAction.index = -1;\n      this.editAction.oldItem = null;\n      this.editAction.newItem = this.getDefaultItem();\n      this.formTitle = 'Add Item';\n      this.dialog = true;\n    },\n    editItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = { ...item };\n      this.formTitle = 'Edit Item';\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = null;\n      this.deleteDialog = true;\n    },\n\n    // Delete Dialog controls\n    cancelDeletion() {\n      this.deleteDialog = false;\n    },\n    confirmDeletion() {\n      this.deleteDialog = false;\n      if (this.editAction.index > -1) {\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n        // this.showSnackbar('Item deleted successfully!', 'success');\n      }\n    },\n\n    // Form Dialog controls\n    closeDialog() {\n      this.dialog = false;\n      this.$refs.form.reset();\n    },\n    async saveItem() {\n      const { valid } = await this.$refs.form.validate();\n      if (valid) {\n        if (this.editAction.index > -1) {\n          Object.assign(this.msg.data[this.editAction.index], this.editAction.newItem);\n          // this.showSnackbar('Item updated successfully!', 'success');\n        } else {\n          this.msg.data.push({ ...this.editAction.newItem });\n          // this.showSnackbar('Item added successfully!', 'success');\n        }\n        this.addEditAction();\n        this.closeDialog();\n      } else {\n        this.showSnackbar('Please correct the errors in the form.', 'error');\n      }\n    },\n\n    // Info Dialog controls\n    openInfoDialog() {\n      this.infoDialog = true;\n    },\n    closeInfoDialog() {\n      this.infoDialog = false;\n    },\n\n    // CSV Dialog controls\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Data Handling\n    // Stringify function that handles different data types\n    stringifyValue(value) {\n      if (value === undefined || value === null) {\n        return ''; // Handle null or undefined\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value); // Handle arrays by converting them to a JSON string\n      } else if (typeof value === 'object') {\n        return JSON.stringify(value); // Handle objects by converting them to a JSON string\n      } else if (typeof value === 'string') {\n        return value; // Use string as-is\n      } else {\n        return String(value); // Convert other types (number, boolean, etc.) to string\n      }\n    },\n    parseValue(value) {\n      if (typeof value === 'string') {\n        // Handle empty strings\n        if (value === '') return null;\n\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n          value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n          try {\n            return JSON.parse(value);\n          } catch (error) {\n            return value;\n          }\n        }\n        // Check if the string represents a boolean\n        if (value.toLowerCase() === \"true\") return true;\n        if (value.toLowerCase() === \"false\") return false;\n\n        // Check if the string represents a number\n        const parsedNumber = Number(value);\n        if (!isNaN(parsedNumber)) return parsedNumber;\n\n        // Return original value for simple strings\n        return value;\n      }\n      return value;\n    },\n\n    // CSV Upload and Loading\n    async processCsv() {  // Processes the uploaded CSV file\n      if (!this.csvFile) {\n        this.showSnackbar('No file selected!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV successfully uploaded!', 'success');\n      } catch (error) {\n        this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n    parseCsv(content) {  // Parses the CSV file content into an array of objects\n      const rows = content.split(/\\r?\\n/).filter(row => row.trim()); \n      const headers = rows.shift().split(';').map(header => header.trim()); // Use the first row as headers\n      const filteredHeaders = headers.filter(header => !['action', 'status', 'id'].includes(header)) // Exclude some columns\n                        \n      return rows.map(row => {\n          const values = row.split(';');\n          return filteredHeaders.reduce((acc, header) => {\n              const index = headers.indexOf(header); // Ensure the original index is respected\n              if (index !== -1) {\n                  acc[header] = this.parseValue(values[index]); \n              }\n              return acc;\n          }, {});\n      });\n    },\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {  // Check if an item with the same name exists\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n            this.editAction.oldItem = {...existingItem};\n            this.editAction.newItem = {...newItem};\n            this.addEditAction()\n            Object.assign(existingItem, newItem); // Update \n          }\n        } else {\n          this.editAction.oldItem = null;\n          this.editAction.newItem = {...newItem};\n          this.addEditAction()\n          this.msg.data.push(newItem);  // Add new \n        }\n      });\n    },\n    \n    // CSV Generation and Download\n    generateCsv() {\n      const separator = ';';\n      const headersValue = this.msg.dashboard.table.headers\n        .filter(header => !['actions', 'status', 'id'].includes(header.value)) // Exludes some columns\n        .map(header => header.value)\n        headersValue.unshift('id'); // Add id header at the beginning\n      const headers = headersValue.join(separator);\n\n      const rows = this.msg.data.map(item => {\n        return headersValue\n          .map(header => {\n            return this.stringifyValue(item[header]);\n          })\n          .join(separator);\n      }).join('\\n');\n\n\n      return `${headers}\\n${rows}`;\n    },\n    createDownloadLink(csvContent) {\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${this.msg.database.table}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    downloadCsv() {\n      try {\n        const csvContent = this.generateCsv();\n        this.createDownloadLink(csvContent);\n        this.showSnackbar('CSV scaricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante il download del CSV:', error);\n        this.showSnackbar('Errore durante il download del CSV.', 'error');\n      }\n    },\n    \n    // Utility Methods\n    getStatusColor(value) {\n      const colors = {\n        \"unknown\": 'blue',\n        \"connecting\": 'amber',\n        \"connected\": 'green',\n        \"error\": 'red'\n      };\n      if (colors[value]) return colors[value];\n      return 'purple';\n    },\n    getSwitchColor(item) {\n      return item.enabled ? this.getStatusColor(item.status)\n                            : 'grey-lighten-2';\n    },\n    getListColor(list, elem, item) {\n      return item.enabled ? list.includes(elem) ? this.getStatusColor(item.status) : 'red'\n                            : 'grey-lighten-2';\n    },\n    getListColorStatic(list, elem) {\n      return list.includes(elem) ? 'green' : 'red';\n    },\n    handleEnabled(item) {\n      // Custom logic for enabling/disabling\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      item.enabled = !item.enabled;\n      this.editAction.newItem = { ...item };\n      this.addEditAction();\n      \n    },\n    showSnackbar(message, type) {\n      this.snackbar.text = message;\n      this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                          : type === 'error' ? 'red-lighten-3' \n                          : 'blue-lighten-5';\n      this.snackbar.show = true;\n      this.msg.dashboard.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Heading Text Size */\n.text-h5 {\n  font-size: 1.25rem;\n}\n\n/* Actions Column Styling */\n.actions-column {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 60px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 800,
        "y": 120,
        "wires": [
            [
                "2bf66e73c94c054a"
            ]
        ]
    },
    {
        "id": "2bf66e73c94c054a",
        "type": "link out",
        "z": "sf_triggers",
        "name": "ui_table_out",
        "mode": "link",
        "links": [
            "3aa88899efe0863a"
        ],
        "x": 1015,
        "y": 120,
        "wires": []
    },
    {
        "id": "e87455918a3e5b34",
        "type": "function",
        "z": "sf_triggers",
        "name": "switch",
        "func": "// Function to format strings by replacing underscores with spaces and capitalizing each word\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// Init\nconst tabName = env.get('TABLE');\nmsg.title = capitalize(tabName);\nmsg.topicMain = msg.topicMain || msg.topic;\nmsg.database = msg.database || {\n    name: env.get(\"DATABASE\"),\n    schema: env.get(\"SCHEMA\"),\n    table: tabName\n};\nmsg.data = msg.data || flow.get(tabName) || null;\nmsg.dashboard = msg.dashboard || {};\nmsg.dashboard.info = msg.dashboard.info || flow.get(\"info\");\n\nif (msg.database.table !== tabName) {\n    msg.error = \"Message with wrong table\";\n}\n\n// Topic switch\nconst indexMap = {\n    // Previous Error\n    error: 0,\n\n    // Previous Action (postgres response)\n    check_table: 2,\n    deploy_changes: 2,\n    select_data: 3,\n\n    // Next Action\n    start: 1,\n    update: 2,\n    deploy: 4,\n};\n\nconst outputs = [null, null, null, null, null];\n\nif (msg.error) outputs[0] = msg;\nelse if (indexMap[msg.topic] !== undefined) outputs[indexMap[msg.topic]] = msg;\n\nreturn outputs;\n\n\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 220,
        "wires": [
            [
                "f2c7bc7ac41a2026"
            ],
            [
                "93c1505b0fccbfe7",
                "b4129a7acb09168a"
            ],
            [
                "a1621dd8e9e352f6"
            ],
            [
                "e46ff4cadd8b984f"
            ],
            [
                "ce26e11ab0828594"
            ]
        ]
    },
    {
        "id": "f2c7bc7ac41a2026",
        "type": "function",
        "z": "sf_triggers",
        "name": "error_show",
        "func": "msg.dashboard.snackbar = {\n    show: true,\n    text: `${msg.title} - ${msg.topic} error: ${msg.error.message}`,\n    color: \"red-lighten-3\"\n}\n\nnode.status({ fill: \"red\", shape: \"dot\", text: msg.dashboard.snackbar.text });\n\nmsg.dashboard.history = [];\n\nmsg.dashboard.loading = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "b04b2a27a423ecac"
            ]
        ]
    },
    {
        "id": "a1621dd8e9e352f6",
        "type": "function",
        "z": "sf_triggers",
        "name": "select_data",
        "func": "msg.query = `\n\n    SELECT column_name \n    FROM information_schema.columns \n    WHERE table_schema = '${msg.database.schema}'\n    AND table_name = '${msg.database.table}';\n\n    SELECT * \n    FROM ${msg.database.schema}.${msg.database.table}\n    ORDER BY id;\n\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"select_data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "93c1505b0fccbfe7",
        "type": "function",
        "z": "sf_triggers",
        "name": "check_db_table",
        "func": "// Extract schema and table names from the message\nconst schemaName = msg.database.schema;\nconst tableName = msg.database.table;\n\n// Construct the dynamic query for creating the schema and the table\nmsg.query = `\nDO $$\nBEGIN\n   -- Check if schema exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.schemata\n      WHERE schema_name = '${schemaName}'\n   ) THEN\n      CREATE SCHEMA ${schemaName};\n   END IF;\n\n   -- Check if table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${schemaName}' AND table_name = '${tableName}'\n   ) THEN\n      CREATE TABLE ${schemaName}.${tableName} (\n        id SERIAL PRIMARY KEY,\n        enabled BOOLEAN,\n        name TEXT,\n        tag_address TEXT,\n        endpoint TEXT,\n        tag_tables TEXT,\n        comment TEXT\n      );\n   END IF;\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"check_table\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ce26e11ab0828594",
        "type": "function",
        "z": "sf_triggers",
        "name": "update_data",
        "func": "function escapeValue(value) {\n    if (value === null || value === undefined) {\n        // Handles NULL values\n        return 'NULL';\n    }\n    else if (Array.isArray(value) || typeof value === 'object') {\n        // Convert arrays and objects to JSON, then escape single quotes\n        const jsonString = JSON.stringify(value);\n        return `'${jsonString.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'string') {\n        // Escapes dangerous characters like single quotes ('), \n        // replacing them with double single quotes ('')\n        return `'${value.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'boolean') {\n        // PostgreSQL uses 'TRUE'/'FALSE' for boolean values\n        return value ? 'TRUE' : 'FALSE';\n    }\n    else {\n        // For numbers (and other primitive types), return the value directly\n        return value;\n    }\n}\n\n\nlet commands = [];\nconst table = msg.database.table;\nconst schema = msg.database.schema;\n\nfor (const change of msg.dashboard.history) {\n    const { index, oldItem, newItem } = change;\n\n    if (oldItem && !newItem) {\n        // Case: deletion\n        commands.push(`DELETE FROM \"${schema}\".\"${table}\"WHERE name = ${escapeValue(oldItem.name)};`);\n\n    } else if (!oldItem && newItem) {\n        // Case: insertion\n        const keys = Object.keys(newItem);\n        const values = Object.values(newItem)\n            .map(value => `${escapeValue(value)}`) // Escape values\n            .join(', ');\n        commands.push(`INSERT INTO \"${schema}\".\"${table}\" (${keys.join(', ')}) VALUES (${values});`);\n\n    } else if (oldItem && newItem) {\n        // Case: update\n        const updates = Object.keys(newItem)\n            .map(key => `${key} = ${escapeValue(newItem[key])}`) // Escape values\n            .join(', ');\n        commands.push(`UPDATE \"${schema}\".\"${table}\" SET ${updates} WHERE name = ${escapeValue(oldItem.name)};`);\n    }\n}\n\n// Constructs the PL/pgSQL block\nmsg.query = `\nDO $$\nBEGIN\n    ${commands.join('\\n')}\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = 'deploy_changes';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "3aa88899efe0863a",
        "type": "link in",
        "z": "sf_triggers",
        "name": "switch_in",
        "links": [
            "2bf66e73c94c054a"
        ],
        "x": 85,
        "y": 180,
        "wires": [
            [
                "b2a4cb412b9ec286"
            ]
        ]
    },
    {
        "id": "b6db554076626d0f",
        "type": "debug",
        "z": "sf_triggers",
        "name": "Triggers - Switch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 340,
        "wires": []
    },
    {
        "id": "b4129a7acb09168a",
        "type": "function",
        "z": "sf_triggers",
        "name": "info",
        "func": "",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst info = \"Triggers info dialog\"\n\n\n\nflow.set(\"info\", info);",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": []
    },
    {
        "id": "0c3f128b8bdca0f3",
        "type": "status",
        "z": "sf_triggers",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 440,
        "wires": [
            [
                "ac06982622d7aeb3"
            ]
        ]
    },
    {
        "id": "ac06982622d7aeb3",
        "type": "function",
        "z": "sf_triggers",
        "name": "status_filter",
        "func": "if (msg.status){\n    msg.status.fill = msg.status.fill || \"green\";\n    msg.status.shape = msg.status.shape || \"dot\";\n    if (!msg.status.text || msg.status.text === \"0\"){\n        const localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n        msg.status.text = `last update: ${localTime}`;\n    }\n    if (msg.status.fill === \"blue\") {\n        msg.status.fill = \"green\"\n    }\n    return msg;\n}\nreturn null\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "81b234c63b315939",
        "type": "catch",
        "z": "sf_triggers",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 220,
        "y": 80,
        "wires": [
            [
                "f2c7bc7ac41a2026",
                "76d3ea286fccd429"
            ]
        ]
    },
    {
        "id": "961965a0055fb1bd",
        "type": "function",
        "z": "sf_triggers",
        "name": "clear_update",
        "func": "return {\n    topic: (msg.topicMain === 'start') ? 'start' : 'update',\n    time: new Date(),\n    _msgid: msg._msgid\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "1523391ae435432c",
        "type": "http request",
        "z": "sf_triggers",
        "name": "GET current flows",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 320,
        "wires": [
            [
                "f3a97782cff61a33",
                "697a8ed91e7f7cb9"
            ]
        ]
    },
    {
        "id": "f3a97782cff61a33",
        "type": "function",
        "z": "sf_triggers",
        "name": "update_triggers",
        "func": "// This code rewrite the configuration of all connection tabs in Node-RED:\n\n// ________________________Heplpers___________________________\n\n// Helper function to generate unique IDs\nfunction generateId(existingIds) {\n    function randomHex(size) {\n        const chars = \"0123456789abcdef\";\n        let id = \"\";\n        for (let i = 0; i < size; i++) {\n            id += chars[Math.floor(Math.random() * chars.length)];\n        }\n        return id;\n    }\n\n    let id;\n    do {\n        id = randomHex(16);\n    } while (existingIds.includes(id));\n\n    existingIds.push(id);\n    return id;\n}\n\n// Helper function to align x coo\nfunction alignX(targetX, name) {\n    const nodeWidth = 50 + 5 * name.length;\n    return targetX + nodeWidth / 2;\n}\n\n// Helper function to safely parse the endpoint address\nfunction parseEndpointAddress(endpoint) {\n    if (!endpoint || !endpoint.address) {\n        node.error(`Invalid endpoint object or missing address.`);\n        node.status({ fill: \"red\", shape: \"dot\", text: `Invalid endpoint object or missing address` });\n        return null;\n    }\n\n    // Match the address against the regex pattern\n    const match = endpoint.address.match(addressRegex);\n    if (!match) {\n        node.error(`Endpoint ${endpoint.name} address is not in the correct format. Expected format: \"IP:PORT@RACK:SLOT\"`);\n        node.status({ fill: \"red\", shape: \"dot\", text: `Endpoint ${endpoint.name} address is not in the correct format` });\n        return null\n    }\n\n    // Extract matched values\n    const [, address, port, rack, slot] = match;\n\n    return {\n        address,\n        port: String(port),\n        rack: String(rack),\n        slot: String(slot)\n    };\n}\n\n// ________________________Insert Prototypes___________________________\n\n// Function to generate the status and catch flows\nfunction generateStaticNodes() {\n    updatedNodes.push(...[\n        {\n            \"id\": \"nS_triggers\",\n            \"type\": \"status\",\n            \"z\": \"tab_triggers\",\n            \"name\": \"\",\n            \"scope\": null,\n            \"x\": 120,\n            \"y\": 60,\n            \"wires\": [\n                [\n                    \"loS_triggers\"\n                ]\n            ]\n        },\n        {\n            \"id\": \"loS_triggers\",\n            \"type\": \"link out\",\n            \"z\": \"tab_triggers\",\n            \"name\": \"status_triggers\",\n            \"mode\": \"link\",\n            \"links\": [\n                \"liALL_status\"\n            ],\n            \"x\": 235,\n            \"y\": 60,\n            \"wires\": []\n        },\n        {\n            \"id\": \"nC_triggers\",\n            \"type\": \"catch\",\n            \"z\": \"tab_triggers\",\n            \"name\": \"\",\n            \"scope\": null,\n            \"uncaught\": false,\n            \"x\": 520,\n            \"y\": 60,\n            \"wires\": [\n                [\n                    \"loC_triggers\"\n                ]\n            ]\n        },\n        {\n            \"id\": \"loC_triggers\",\n            \"type\": \"link out\",\n            \"z\": \"tab_triggers\",\n            \"name\": \"error_triggers\",\n            \"mode\": \"link\",\n            \"links\": [\n                \"liALL_errors\"\n            ],\n            \"x\": 635,\n            \"y\": 60,\n            \"wires\": []\n        }\n    ]);\n    startY += 150;\n}\n\n// Function to generate the nodes for a S7 trigger with a custom trigger\nfunction generateS7triggers(trigger, endpoint, tag_tables) {\n    const S7endpointId = `S7endpoint_e${endpoint.id}_trig`;\n    const S7inId = `s7in_trig${trigger.id}`;\n    const endpointNode = updatedNodes.find(node => node.id === S7endpointId);\n    if (!trigger.enabled && endpointNode) {\n        updatedNodes = updatedNodes.filter(node => node.id !== S7endpointId);\n        deployNeeded = true;\n    }\n    if (!trigger.enabled) {\n        return;\n    }\n    if (!tag_tables.length) {\n        return;\n    }\n    const parsedAddress = parseEndpointAddress(endpoint);\n    if (!parsedAddress) {\n        return;\n    }\n    const { address, port, rack, slot } = parsedAddress;\n    updatedNodes.push({\n        \"id\": `comment_trig${trigger.id}`,\n        \"type\": \"comment\",\n        \"z\": \"tab_triggers\",\n        \"name\": `Trigger ${trigger.id}: ${trigger.name}`,\n        \"info\": \"\",\n        \"x\": 160,\n        \"y\": startY,\n        \"wires\": []\n    });\n    let commentY = startY;\n    startY += 50;\n\n    // Check if the trigger node for this trigger already exists\n    if (!endpointNode) {\n        deployNeeded = true;\n        updatedNodes.push({\n            \"id\": S7endpointId,\n            \"type\": \"s7 endpoint\",\n            \"transport\": \"iso-on-tcp\",\n            \"address\": address,\n            \"port\": port,\n            \"rack\": rack,\n            \"slot\": slot,\n            \"localtsaphi\": \"01\",\n            \"localtsaplo\": \"00\",\n            \"remotetsaphi\": \"01\",\n            \"remotetsaplo\": \"00\",\n            \"connmode\": \"rack-slot\",\n            \"adapter\": \"\",\n            \"busaddr\": \"2\",\n            \"cycletime\": \"1000\",\n            \"timeout\": \"5000\",\n            \"name\": \"\",\n            \"vartable\": [\n                { addr: trigger.tag_address, name: trigger.name }\n            ]\n        });\n    } else {\n        let varCheck = endpointNode.vartable.find(varNode => varNode.addr === trigger.tag_address && varNode.name === trigger.name);\n        deployNeeded = endpointNode.address !== address || endpointNode.port !== port || endpointNode.rack !== rack || endpointNode.slot !== slot || !varCheck;\n        endpointNode.address = address;\n        endpointNode.port = port;\n        endpointNode.rack = rack;\n        endpointNode.slot = slot;\n        if (!varCheck) {\n            endpointNode.vartable.push({ addr: trigger.tag_address, name: trigger.name });\n        }\n    }\n\n    // Create the data handler flow for each table\n    let sf_trigger_handlerIds = [];\n    let dY = startY + 50;\n    for (let table of tag_tables) {\n        const sf_trigger_handlerId = `sf_trigger_handler_trig${trigger.id}_t${table.id}`;\n        const manualInId = `manual_trig${trigger.id}_t${table.id}`;\n        const linkOutId = `trigger_e${endpoint.id}_t${table.id}_out`;\n        const linkDataHandlerId = `sf_data_handler_e${endpoint.id}_t${table.id}_in`\n        sf_trigger_handlerIds.push(sf_trigger_handlerId);\n        updatedNodes.push(...[\n            {\n                \"id\": sf_trigger_handlerId,\n                \"type\": \"subflow:sf_trigger_handler\",\n                \"z\": \"tab_triggers\",\n                \"name\": `trig${trigger.id} - ${table.name}`,\n                \"env\": [\n                    {\n                        \"name\": \"TRIGGER_ID\",\n                        \"value\": String(trigger.id),\n                        \"type\": \"num\"\n                    },\n                    {\n                        \"name\": \"TAG_TABLE\",\n                        \"value\": table.name,\n                        \"type\": \"str\"\n                    }\n                ],\n                \"x\": 620,\n                \"y\": dY,\n                \"wires\": [\n                    [\n                        linkOutId\n                    ]\n                ]\n            },\n            {\n                \"id\": manualInId,\n                \"type\": \"inject\",\n                \"z\": \"tab_triggers\",\n                \"name\": \"Manual Trigger\",\n                \"props\": [\n                    {\n                        \"p\": \"topic\",\n                        \"vt\": \"str\"\n                    }\n                ],\n                \"repeat\": \"\",\n                \"crontab\": \"\",\n                \"once\": false,\n                \"onceDelay\": 0.1,\n                \"topic\": \"trigger\",\n                \"x\": 220,\n                \"y\": dY,\n                \"wires\": [\n                    [\n                        sf_trigger_handlerId\n                    ]\n                ]\n            },\n            {\n                \"id\": linkOutId,\n                \"type\": \"link out\",\n                \"z\": \"tab_triggers\",\n                \"name\": linkOutId,\n                \"mode\": \"link\",\n                \"links\": [\n                    linkDataHandlerId\n                ],\n                \"x\": 850,\n                \"y\": dY,\n                \"wires\": []\n            }\n        ]);\n        dY += 100;\n    }\n\n    // Create the S7 in and S7 control nodes\n    sf_trigger_handlerIds.sort();\n    updatedNodes.push({\n        \"id\": S7inId,\n        \"type\": \"s7 in\",\n        \"z\": \"tab_triggers\",\n        \"endpoint\": S7endpointId,\n        \"mode\": \"all\",\n        \"variable\": \"\",\n        \"diff\": false,\n        \"name\": \"\",\n        \"x\": 220,\n        \"y\": startY,\n        \"wires\": [\n            sf_trigger_handlerIds\n        ]\n    });\n\n    msg.log.push({ sf_trigger_handlerIds: sf_trigger_handlerIds });\n}\n\n\n// _________________________Main_______________________________\n\nmsg.log = msg.log || [];\n\nconst triggers = msg.data;  // Array of all triggers\nmsg.log.push({ triggers: triggers });\nconst history = msg.history; // Array of all history\nconst allNodes = msg.payload;   // Current nodes\nconst tag_tables = global.get('tag_tables');\nconst endpoints = global.get('endpoints');\nconst addressRegex = /^([\\w\\-.]+):(\\d+)@(\\d+):(\\d+)$/; // Regex to match the trigger address\n\nif (!Array.isArray(triggers) || !Array.isArray(allNodes)) {\n    node.error(\"Input data or allNodes is not in the expected format.\");\n    return;\n}\n\n// Collect all currently existing IDs\nlet existingIds = allNodes.map(node => node.id);\n\n// Filter out all \"tab_triggers\" nodes to rigenerate them\nlet updatedNodes = (JSON.parse(JSON.stringify(allNodes))).filter(node => node.z !== \"tab_triggers\");\nlet deployNeeded = false;\nlet startY = 0;\n\n// Generate nodes\n\ngenerateStaticNodes();\n\nfor (let endpoint of endpoints) {\n    const endp_triggers = triggers.filter(trigger => trigger.endpoint === endpoint.name);\n    msg.log.push({ endpoint: endpoint, triggers: endp_triggers });\n    for (let trigger of endp_triggers) {\n        const trigger_tables = tag_tables.filter(table =>\n            trigger.tag_tables.includes(table.name) &&\n            table.protocol === endpoint.protocol &&\n            [\"trigger\", \"trigger_custom\"].includes(table.sampling_mode)\n        );\n        msg.log.push({ trigger: trigger, tables: trigger_tables });\n        switch (endpoint.protocol) {\n            case \"S7\": {\n                generateS7triggers(trigger, endpoint, trigger_tables);\n\n            }\n        }\n    }\n}\n\n\nfor (let edit of history) {\n    // Remove nodes if the trigger is deleted\n    if (edit.oldItem && !edit.newItem) {\n        const oldTrigger = edit.oldItem;\n        const endpoint_triggers = global.get(\"triggers\").filter(trigger => trigger.enabled && trigger.endpoint === oldTrigger.endpoint);\n        const endpoint = global.get(\"endpoints\").find(endpoint => endpoint.name === oldTrigger.endpoint);\n        const S7endpointId = `S7endpoint_e${endpoint.id}_trig`;\n        if (!endpoint_triggers.length && endpoint) {\n            deployNeeded = true;\n            updatedNodes = updatedNodes.filter(node => node.id !== S7endpointId);\n        } else {\n            let endpointNode = updatedNodes.find(node => node.id === S7endpointId);\n            if (endpointNode) {\n                let varCheck = endpointNode.vartable.find(varNode => varNode.addr === oldTrigger.tag_address && varNode.name === oldTrigger.name);\n                if (varCheck) {\n                    endpointNode.vartable = endpointNode.vartable.filter(varNode => varNode.addr !== oldTrigger.tag_address && varNode.name !== oldTrigger.name);\n                }\n            }\n        }\n    }\n    // Modify vartable if the trigger name or tag_address is modified\n    if (edit.oldItem && edit.newItem) {\n        const oldTrigger = edit.oldItem;\n        const newTrigger = edit.newItem;\n        if (oldTrigger.name !== newTrigger.name || oldTrigger.tag_address !== newTrigger.tag_address) {\n            const endpoint = global.get(\"endpoints\").find(endpoint => endpoint.name === newTrigger.endpoint);\n            const endpointNode = updatedNodes.find(node => node.id === `S7endpoint_e${endpoint.id}_trig`);\n            if (endpointNode) {\n                let varCheck = endpointNode.vartable.find(varNode => varNode.addr === oldTrigger.tag_address && varNode.name === oldTrigger.name);\n                if (varCheck) {\n                    varCheck.addr = newTrigger.tag_address;\n                    varCheck.name = newTrigger.name;\n                    deployNeeded = true;\n                }\n            }\n        }\n    }\n}\n\n// Deploy needed check and return\nconst previousTabNodes = allNodes.filter(node => node.z === \"tab_triggers\").sort((a, b) => a.id.localeCompare(b.id));\nconst updatedTabNodes = updatedNodes.filter(node => node.z === \"tab_triggers\").sort((a, b) => a.id.localeCompare(b.id));\ndeployNeeded = deployNeeded || JSON.stringify(previousTabNodes) !== JSON.stringify(updatedTabNodes);\n\nif (deployNeeded) {\n    const deploycount = global.get(\"dpc_triggers\") + 1 || 1;\n    global.set(\"dpc_triggers\", deploycount);\n    msg.payload = updatedNodes\n    node.status({ fill: \"green\", shape: \"dot\", text: `Deploy ${deploycount} sent` });\n    msg.log.push({ oldFlow: previousTabNodes, newFlow: updatedTabNodes });\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "8203af89e8d9c684",
                "697a8ed91e7f7cb9"
            ],
            [
                "961965a0055fb1bd"
            ]
        ]
    },
    {
        "id": "8203af89e8d9c684",
        "type": "http request",
        "z": "sf_triggers",
        "name": "POST updated flows",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Node-RED-Deployment-Type",
                "valueType": "other",
                "valueValue": "flows"
            }
        ],
        "x": 1100,
        "y": 380,
        "wires": [
            [
                "961965a0055fb1bd"
            ]
        ]
    },
    {
        "id": "697a8ed91e7f7cb9",
        "type": "debug",
        "z": "sf_triggers",
        "name": "Triggers - Flows",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 320,
        "wires": []
    },
    {
        "id": "76d3ea286fccd429",
        "type": "debug",
        "z": "sf_triggers",
        "name": "Triggers - ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 60,
        "wires": []
    },
    {
        "id": "cb6fc57786d97ac1",
        "type": "delay",
        "z": "sf_triggers",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 260,
        "wires": [
            [
                "1523391ae435432c"
            ]
        ]
    },
    {
        "id": "867b0a31a6575085",
        "type": "debug",
        "z": "sf_tag_tables_config",
        "name": "TConfig - Table",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "493d6974b92dca31",
        "type": "function",
        "z": "sf_tag_tables_config",
        "name": "update_status",
        "func": "// Function to replace underscores with spaces and capitalize words\nfunction capitalize(str) {\n    const result = str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n    return result;\n}\n\nfunction parseValue(value) {\n    if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n            value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n            try {\n                const parsed = JSON.parse(value);\n                return parsed;\n            } catch (error) {\n                return value;\n            }\n        }\n        // Return original value for non-JSON types\n        return value;\n    }\n    return value;\n}\n\n// GET DATA\n// Retrieve existing data or initialize\nlet columns = [];\nlet data = global.get(msg.database.table) || [];\n\n// Extract column names from PostgreSQL query\nif (msg.pgsql && msg.pgsql[0] && msg.pgsql[0].rows) {\n    columns = msg.pgsql[0].rows.map(col => col.column_name);\n}\n\n// Extract data rows from PostgreSQL query and parse them\nif (msg.pgsql && msg.pgsql[1] && msg.pgsql[1].rows) {\n    data = msg.pgsql[1].rows;\n    data.forEach((row, rowIndex) => {\n        Object.keys(row).forEach((key) => {\n            let originalValue = row[key];\n            row[key] = parseValue(originalValue);\n        });\n    });\n}\n\n// Extract tag table names\nlet tag_tables = [];\nif (msg.pgsql && msg.pgsql[2] && msg.pgsql[2].rows) {\n    tag_tables = msg.pgsql[2].rows.map(row => row.table_name);\n}\n\n// CHECK DATA\n// Check if all tag tables are present in the database\nlet deploy_needed = false;\ntag_tables.forEach(tableName => {\n    if (!data.some(row => row.name === tableName)) {\n        let newItem = {\n            name: tableName,\n            data_table: tableName + '_data',\n            protocol: null,\n            sampling_mode: 'static',\n            sampling_freq: 'none',\n            comment: 'auto-generated, modification needed for proper configuration',\n        };\n        let editAction = {\n            index: -1,\n            oldItem: null,\n            newItem: newItem,\n        };\n        msg.dashboard.history = msg.dashboard.history || [];\n        msg.dashboard.history.push(editAction);\n        deploy_needed = true;\n    }\n});\n\n// DASHBOARD MANAGEMENT\n// Build dynamic table headers\nconst baseHeaders = columns.length > 0\n    ? columns\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Excludes some columns\n        .map(key => {\n            const header = {\n                title: capitalize(key),\n                value: key,\n                headerProps: { style: 'font-weight: 700' },\n                sortable: true\n            };\n            return header;\n        })\n    : [];\n\nlet snacktext = \"\";\nif (msg.topicMain === \"deploy\") {\n    snacktext = `${msg.title} Saved Successfully!`;\n} else if (msg.topicMain === \"update\") {\n    snacktext = `${msg.title} Updated Successfully!`;\n} else if (msg.topicMain === \"start\") {\n    snacktext = `${msg.title} Started Successfully!`;\n}\n\n// Assign table data to the message\nmsg.data = data;\nmsg.dashboard.table = {\n    title: msg.title,\n    headers: baseHeaders,\n};\nmsg.dashboard.form = {\n    protocol: global.get(\"protocol\"),\n    sampling_mode: global.get(\"sampling_mode\"),\n    sampling_freq: global.get(\"sampling_freq\"),\n};\nmsg.dashboard.history = msg.dashboard.history || [];\nmsg.dashboard.snackbar = {\n    show: true,\n    text: snacktext,\n    color: \"green-lighten-3\"\n};\nmsg.dashboard.loading = false;\n\n// SAVE, NOTIFY, SEND\n// Save data back to the global context\nglobal.set(msg.database.table, data);\n\n// Update status\nconst localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\nnode.status({ fill: \"green\", shape: \"dot\", text: `last update: ${localTime}` });\n\n// Determine the next step based on deploy_needed flag\nif (deploy_needed) {\n    msg.topic = 'deploy';\n    return [null, msg];\n} else {\n    // Prepare the dynamic_insert history and reset the dashboard history\n    msg.history = [...msg.dashboard.history];\n    msg.dashboard.history = [];\n    msg.topic = 'update_status';\n    return [msg, null];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "de97043d5da7a8cf",
                "1639cbdd260d2cff"
            ],
            [
                "89e5ecbbf9264cc4"
            ]
        ]
    },
    {
        "id": "6b787d1e94828298",
        "type": "ui-template",
        "z": "sf_tag_tables_config",
        "group": "4290ffc4397af8c8",
        "page": "",
        "ui": "",
        "name": "table_tags_config",
        "order": 5,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Container -->\n  <v-card>\n    <!-- Card Header with Title, Reload Button, Search Bar, and Action Buttons -->\n    <v-card-item class=\"bg-primary\">\n      <v-row class=\"my-2 align-self-center\" no-gutters>\n        \n        <!-- Title -->\n        <v-col cols=\"auto\" class=\"mx-4 align-self-center\">\n          <v-btn\n            @click=\"openInfoDialog\"\n            variant=\"tonal\"\n            class=\"font-weight-bold text-h5 text-white\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-table</v-icon>\n            <p class=\"mx-1 align-self-center\" v-text=\"msg.dashboard.table.title\"></p>\n          </v-btn>\n        </v-col>\n\n        <!-- Search Bar -->\n        <v-col class=\"mx-4 align-self-center\">\n          <v-text-field\n            v-model=\"search\"\n            label=\"Search\"\n            prepend-inner-icon=\"mdi-magnify\"\n            single-line\n            clearable\n            hide-details\n            color=\"white\"\n          ></v-text-field>\n        </v-col>\n\n        <!-- Action Buttons (CSV Upload, CSV Download, Edit, Save, Add New, Discard) -->\n        <v-col cols=\"auto\" class=\"mx-2 align-self-center text-white\">\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"updateTable\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-reload</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Reload</span>\n          </v-btn>\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"downloadCsv\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-export</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Export</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"enableEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Edit</span>\n          </v-btn>\n\n          <!-- Buttons visible in Edit Mode -->\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"openCsvDialog\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-import</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Import</span>\n          </v-btn>\n          \n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"addNewItem\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-plus</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Add New</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deploy\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-floppy</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Save</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"discardEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil-off</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Discard</span>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <!-- Data Table with Custom Cell Templates -->\n    <v-data-table\n      v-model=\"selected\"\n      :headers=\"msg.dashboard.table.headers\"\n      :items=\"msg.data\"\n      :search=\"search\"\n      :items-per-page=\"itemsPerPage\"\n      :items-per-page-options=\"[5, 10, 25, 50, -1]\"\n      class=\"elevation-1\"\n      :loading=\"msg.dashboard.loading\"\n      loading-text=\"Loading...\"\n      density=\"default\"\n    >\n<!-- MODIFY DISPLAY HERE -->\n\n\n<!-- END MODIFY -->\n      <!-- Actions Column with Edit and Delete Icons -->\n      <template v-slot:item.actions=\"{ item }\">\n        <div class=\"actions-column\">\n          <v-icon\n            v-show=\"editMode\"\n            small\n            class=\"mr-2\"\n            @click=\"editItem(item)\"\n            color=\"blue-darken-2\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-pencil\n          </v-icon>\n\n          <v-icon\n            v-show=\"editMode\"\n            small\n            @click=\"deleteItem(item)\"\n            color=\"error\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-delete\n          </v-icon>\n        </div>\n      </template>\n\n      <!-- No Data Message -->\n      <template v-slot:no-data>\n        <v-row class=\"ma-4\">\n          <v-alert :value=\"true\" color=\"warning\" icon=\"mdi-alert\">\n            No matching records found.\n          </v-alert>\n        </v-row>\n      </template>\n    </v-data-table>\n  </v-card>\n\n  <!-- Dialog for Adding or Editing Items -->\n  <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">{{ formTitle }}</span>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" v-model=\"valid\" fast-fail @submit.prevent>\n<!-- MODIFY FORM HERE -->\n\n          <!-- Form Fields -->\n          <v-text-field\n            v-model=\"editAction.newItem.name\"\n            label=\"Tags Table Name\"\n            :rules=\"[v => !!v || 'Tags Table Name is required']\"\n            required\n          ></v-text-field>\n          <v-text-field\n            v-model=\"editAction.newItem.data_table\"\n            label=\"Data Table Name\"\n            :rules=\"[v => !!v || 'Data Table Name is required']\"\n            required\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.protocol\"\n            label=\"Protocol\"\n            :items=\"msg.dashboard.form.protocol\"\n            :rules=\"[v => !!v || 'Protocol is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-select\n            v-model=\"editAction.newItem.sampling_mode\"\n            label=\"Sampling Mode\"\n            :items=\"msg.dashboard.form.sampling_mode\"\n            :rules=\"[v => !!v || 'Sampling Mode is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-select\n            v-model=\"editAction.newItem.sampling_freq\"\n            label=\"Sampling Frequency\"\n            :items=\"msg.dashboard.form.sampling_freq\"\n            :rules=\"[v => !!v || 'Sampling Frequency is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-textarea\n            v-model=\"editAction.newItem.comment\"\n            label=\"Comment\"\n            maxlength=\"200\"\n            counter\n          ></v-text-field>\n\n<!-- END MODIFY-->\n        </v-form>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"saveItem\">Save</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Select a CSV file\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete Confirmation Dialog -->\n  <v-dialog v-model=\"deleteDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting this element will also remove associated Data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue-darken-1\" text @click=\"cancelDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"error\" text @click=\"confirmDeletion\">\n          Delete\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Info Dialog -->\n  <v-dialog v-model=\"infoDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Info\n      </v-card-title>\n\n      <v-card-text>\n        <p v-text=\"msg.dashboard.info\"></p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Close Button -->\n        <v-btn color=\"blue\" text @click=\"closeInfoDialog\">\n          OK\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      search: '',\n      page: 1,\n      itemsPerPage: -1,\n      headerNames: [],\n      dialog: false,\n      deleteDialog: false,\n      csvDialog: false,\n      infoDialog: false,\n      csvFile: null,    \n      formTitle: \"\",\n      editMode: false,\n      editAction: {\n        index: -1,\n        oldItem: null,\n        newItem: null,\n      },\n      selected: [],\n      actionsHeader: {\n        title: \"Actions\",\n        value: \"actions\",\n        headerProps: { style: 'font-weight: 700' },\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n    };\n  },\n  computed: {\n    pageCount() {\n      return Math.ceil(this.msg.data.length / this.itemsPerPage);\n    },\n  },\n  watch: {\n    msg: {\n      handler() {\n        if (this.msg?.dashboard?.table?.headers) {\n          this.headerNames = this.msg.dashboard.table.headers.map(header => header.value);\n        };\n        if (\n          this.editMode &&\n          this.msg?.dashboard?.table?.headers?.[this.msg.dashboard.table.headers.length - 1]?.value !== 'actions'\n        ) {\n          this.msg.dashboard.table.headers.push(this.actionsHeader);\n        };\n        // Dynamically update snackbar parameters\n        if (this.msg?.dashboard?.snackbar) {\n          const { show, text, color } = this.msg.dashboard.snackbar;\n          this.snackbar.show = show;\n          this.snackbar.text = text || '';\n          this.snackbar.color = color || 'default';\n        }\n      },\n      deep: true \n    }\n  },\n  methods: {\n    // Sends a message with the current state\n    msgSend() {\n      this.msg.dashboard.snackbar = null;\n      this.send({\n        topic: this.msg.topic,\n        topicMain: this.msg.topicMain,\n        title: this.msg.title,\n        database: this.msg.database,\n        data: this.msg.data,\n        dashboard: this.msg.dashboard,\n        payload: this.msg.payload,\n        time: new Date(),\n      });\n    },\n    \n    // Edit mode controls\n    enableEdit() {\n      this.msg.dashboard.snackbar.show = false;\n      this.msg.dashboard.table.headers.push(this.actionsHeader);\n      this.editMode = true;\n    },\n    disableEdit() {\n      this.msg.dashboard.table.headers = this.msg.dashboard.table.headers.filter(\n        header => header !== this.actionsHeader\n      );\n      this.editMode = false;\n    },\n    \n    // Message Outputs: Update, Deploy and discard edits \n    updateTable() {\n      this.msg.topic = \"update\";\n      this.msg.topicMain = \"update\";\n      this.msg.payload = null;\n      this.msgSend();\n    },\n    deploy() {\n      this.msg.dashboard.loading = true;\n      this.disableEdit();\n      this.msg.topic = \"deploy\";\n      this.msg.topicMain = \"deploy\";\n      this.msgSend();\n      // this.showSnackbar('Deploy action triggered!', 'info');\n    },\n    discardEdit() {\n      this.disableEdit();\n      this.msg.dashboard.history = [];\n      this.updateTable();\n    },\n    \n    // Handling items\n    getDefaultItem() {\n      const defaultItem = {};\n      this.msg.dashboard.table.headers.forEach(header => {\n        if (header.value !== 'actions') {\n          defaultItem[header.value] = header.value === 'enabled' ? true :\n                                        header.value === 'status' ? \"unknown\" : null;\n        }\n      });\n      return defaultItem;\n    },\n    filterItem(item) {\n      if (!item) {\n        return null;\n      }\n      return Object.keys(item)\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exclude keys\n        .filter(key => this.headerNames.includes(key)) // Exclude keys\n        .reduce((obj, key) => {\n          obj[key] = item[key];\n          return obj;\n        }, {});\n    },\n    filterHeaders(headers) {\n      return headers.filter(header => !['actions', 'status', 'id'].includes(header.value)) // Exludes some columns\n    },\n    addEditAction(){\n      let action = JSON.parse(JSON.stringify(this.editAction));\n      action.oldItem = this.filterItem(action.oldItem);\n      action.newItem = this.filterItem(action.newItem);\n      this.msg.dashboard.history.push(action);\n    },\n    addNewItem() {\n      this.editAction.index = -1;\n      this.editAction.oldItem = null;\n      this.editAction.newItem = this.getDefaultItem();\n      this.formTitle = 'Add Item';\n      this.dialog = true;\n    },\n    editItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = { ...item };\n      this.formTitle = 'Edit Item';\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = null;\n      this.deleteDialog = true;\n    },\n\n    // Delete Dialog controls\n    cancelDeletion() {\n      this.deleteDialog = false;\n    },\n    confirmDeletion() {\n      this.deleteDialog = false;\n      if (this.editAction.index > -1) {\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n        // this.showSnackbar('Item deleted successfully!', 'success');\n      }\n    },\n\n    // Form Dialog controls\n    closeDialog() {\n      this.dialog = false;\n      this.$refs.form.reset();\n    },\n    async saveItem() {\n      const { valid } = await this.$refs.form.validate();\n      if (valid) {\n        if (this.editAction.index > -1) {\n          Object.assign(this.msg.data[this.editAction.index], this.editAction.newItem);\n          // this.showSnackbar('Item updated successfully!', 'success');\n        } else {\n          this.msg.data.push({ ...this.editAction.newItem });\n          // this.showSnackbar('Item added successfully!', 'success');\n        }\n        this.addEditAction();\n        this.closeDialog();\n      } else {\n        this.showSnackbar('Please correct the errors in the form.', 'error');\n      }\n    },\n\n    // Info Dialog controls\n    openInfoDialog() {\n      this.infoDialog = true;\n    },\n    closeInfoDialog() {\n      this.infoDialog = false;\n    },\n\n    // CSV Dialog controls\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Data Handling\n    // Stringify function that handles different data types\n    stringifyValue(value) {\n      if (value === undefined || value === null) {\n        return ''; // Handle null or undefined\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value); // Handle arrays by converting them to a JSON string\n      } else if (typeof value === 'object') {\n        return JSON.stringify(value); // Handle objects by converting them to a JSON string\n      } else if (typeof value === 'string') {\n        return value; // Use string as-is\n      } else {\n        return String(value); // Convert other types (number, boolean, etc.) to string\n      }\n    },\n    parseValue(value) {\n      if (typeof value === 'string') {\n        // Handle empty strings\n        if (value === '') return null;\n\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n          value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n          try {\n            return JSON.parse(value);\n          } catch (error) {\n            return value;\n          }\n        }\n        // Check if the string represents a boolean\n        if (value.toLowerCase() === \"true\") return true;\n        if (value.toLowerCase() === \"false\") return false;\n\n        // Check if the string represents a number\n        const parsedNumber = Number(value);\n        if (!isNaN(parsedNumber)) return parsedNumber;\n\n        // Return original value for simple strings\n        return value;\n      }\n      return value;\n    },\n\n    // CSV Upload and Loading\n    async processCsv() {  // Processes the uploaded CSV file\n      if (!this.csvFile) {\n        this.showSnackbar('No file selected!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV successfully uploaded!', 'success');\n      } catch (error) {\n        this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n    parseCsv(content) {  // Parses the CSV file content into an array of objects\n      const rows = content.split(/\\r?\\n/).filter(row => row.trim()); \n      const headers = rows.shift().split(';'); // Use the first row as headers\n      return rows.map(row => {\n        const values = row.split(';'); \n        return headers.reduce((acc, header, index) => {\n          acc[header] = this.parseValue(values[index]); // Map headers to corresponding values\n          return acc;\n        }, {});\n      });\n    },\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {  // Check if an item with the same name exists\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n            this.editAction.oldItem = {...existingItem};\n            this.editAction.newItem = {...newItem};\n            this.addEditAction()\n            Object.assign(existingItem, newItem); // Update \n          }\n        } else {\n          this.editAction.oldItem = null;\n          this.editAction.newItem = {...newItem};\n          this.addEditAction()\n          this.msg.data.push(newItem);  // Add new \n        }\n      });\n    },\n    \n    // CSV Generation and Download\n    generateCsv() {\n      const separator = ';';\n      const headers = this.filterHeaders(this.msg.dashboard.table.headers)\n        .map(header => header.value)\n        .join(separator); \n\n      const rows = this.msg.data.map(item => {\n        return this.filterHeaders(this.msg.dashboard.table.headers)\n          .map(header => {\n            return this.stringifyValue(item[header.value]);\n          })\n          .join(separator);\n      }).join('\\n');\n\n\n      return `${headers}\\n${rows}`;\n    },\n    createDownloadLink(csvContent) {\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${this.msg.database.table}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    downloadCsv() {\n      try {\n        const csvContent = this.generateCsv();\n        this.createDownloadLink(csvContent);\n        this.showSnackbar('CSV scaricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante il download del CSV:', error);\n        this.showSnackbar('Errore durante il download del CSV.', 'error');\n      }\n    },\n    \n    // Utility Methods\n    getStatusColor(value) {\n      const colors = {\n        \"unknown\": 'blue',\n        \"connecting\": 'amber',\n        \"connected\": 'green',\n        \"error\": 'red'\n      };\n      if (colors[value]) return colors[value];\n      return 'purple';\n    },\n    getSwitchColor(item) {\n      return item.enabled ? this.getStatusColor(item.status)\n                            : 'grey-lighten-2';\n    },\n    getListColor(list, elem, item) {\n      return item.enabled ? list.includes(elem) ? this.getStatusColor(item.status) : 'red'\n                            : 'grey-lighten-2';\n    },\n    getListColorStatic(list, elem) {\n      return list.includes(elem) ? 'green' : 'red';\n    },\n    handleEnabled(item) {\n      // Custom logic for enabling/disabling\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      item.enabled = !item.enabled;\n      this.editAction.newItem = { ...item };\n      this.addEditAction();\n      \n    },\n    showSnackbar(message, type) {\n      this.snackbar.text = message;\n      this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                          : type === 'error' ? 'red-lighten-3' \n                          : 'blue-lighten-5';\n      this.snackbar.show = true;\n      this.msg.dashboard.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Heading Text Size */\n.text-h5 {\n  font-size: 1.25rem;\n}\n\n/* Actions Column Styling */\n.actions-column {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 60px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 810,
        "y": 120,
        "wires": [
            [
                "9a78439fe0ef36c6"
            ]
        ]
    },
    {
        "id": "9a78439fe0ef36c6",
        "type": "link out",
        "z": "sf_tag_tables_config",
        "name": "ui_table_out",
        "mode": "link",
        "links": [
            "3439ee7afb735a34"
        ],
        "x": 1015,
        "y": 120,
        "wires": []
    },
    {
        "id": "a32e742fd6349a59",
        "type": "function",
        "z": "sf_tag_tables_config",
        "name": "switch",
        "func": "// Function to format strings by replacing underscores with spaces and capitalizing each word\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// Init\nconst tabName = env.get('TABLE');\nmsg.title = capitalize(tabName);\nmsg.topicMain = msg.topicMain || msg.topic;\n\nmsg.database = msg.database || {};\nmsg.database.name = env.get(\"DATABASE\");\nmsg.database.schema = env.get(\"SCHEMA\");\nmsg.database.table = tabName;\nmsg.database.tagsSchema = env.get(\"TAGS_SCHEMA\");\nmsg.database.dataSchema = env.get(\"DATA_SCHEMA\");\n\nglobal.set(\"dataSchema\", env.get(\"DATA_SCHEMA\"));  // Save data schema for common tags_table use\nmsg.data = msg.data || flow.get(tabName) || null;\nmsg.dashboard = msg.dashboard || {};\nmsg.dashboard.info = msg.dashboard.info || flow.get(\"info\");\n\nif (msg.database.table !== tabName) {\n    msg.error = \"Message with wrong table\";\n}\n\n// Topic switch\nconst indexMap = {\n    // Previous Error\n    error:          0,\n\n    // Previous Action (postgres response)\n    check_table:    2,\n    deploy_changes: 2,\n    select_data:    3,\n\n    // Next Action\n    start:          1,\n    update:         2,\n    deploy:         4,   \n};\n\nconst outputs = [null, null, null, null, null];\n\nif (msg.error) outputs[0] = msg;\nelse if (indexMap[msg.topic] !== undefined) outputs[indexMap[msg.topic]] = msg;\n\nreturn outputs;\n\n\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 220,
        "wires": [
            [
                "2eed54bb56e3675e"
            ],
            [
                "f4196adaf4b495fc",
                "8bc572c410a11e6b"
            ],
            [
                "cf3a69ba53110e22"
            ],
            [
                "493d6974b92dca31"
            ],
            [
                "89e5ecbbf9264cc4"
            ]
        ]
    },
    {
        "id": "2eed54bb56e3675e",
        "type": "function",
        "z": "sf_tag_tables_config",
        "name": "error_show",
        "func": "msg.dashboard.snackbar = {\n    show: true,\n    text: `${msg.title} - ${msg.topic} error: ${msg.error.message}`,\n    color: \"red-lighten-3\"\n}\n\nnode.status({ fill: \"red\", shape: \"dot\", text: msg.dashboard.snackbar.text });\n\nmsg.dashboard.history = [];\n\nmsg.dashboard.loading = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "1639cbdd260d2cff"
            ]
        ]
    },
    {
        "id": "cf3a69ba53110e22",
        "type": "function",
        "z": "sf_tag_tables_config",
        "name": "select_data",
        "func": "msg.query = `\n\n    SELECT column_name \n    FROM information_schema.columns \n    WHERE table_schema = '${msg.database.schema}'\n    AND table_name = '${msg.database.table}';\n\n    SELECT * \n    FROM ${msg.database.schema}.${msg.database.table}\n    ORDER BY id;\n\n    SELECT table_name\n    FROM information_schema.tables\n    WHERE table_schema = '${msg.database.tagsSchema}'\n    ORDER BY table_name;\n\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"select_data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f4196adaf4b495fc",
        "type": "function",
        "z": "sf_tag_tables_config",
        "name": "check_db_table",
        "func": "// Extract schema and table names from the message\nconst schemaName = msg.database.schema;\nconst tableName = msg.database.table;\n\n// Construct the dynamic query for creating the schema and the table\nmsg.query = `\nDO $$\nBEGIN\n   -- Check if schema exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.schemata\n      WHERE schema_name = '${schemaName}'\n   ) THEN\n      CREATE SCHEMA ${schemaName};\n   END IF;\n\n   -- Check if table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${schemaName}' AND table_name = '${tableName}'\n   ) THEN\n      CREATE TABLE ${schemaName}.${tableName} (\n         id SERIAL,\n         name TEXT PRIMARY KEY,\n         data_table TEXT,\n         protocol TEXT,\n         sampling_mode TEXT,\n         sampling_freq TEXT,\n         comment TEXT\n      );\n   END IF;\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"check_table\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "89e5ecbbf9264cc4",
        "type": "function",
        "z": "sf_tag_tables_config",
        "name": "update_data",
        "func": "function escapeValue(value) {\n    if (value === null || value === undefined) {\n        return 'NULL';\n    } else if (Array.isArray(value) || typeof value === 'object') {\n        const jsonString = JSON.stringify(value);\n        return `'${jsonString.replace(/'/g, \"''\")}'`; // Wrap JSON in single quotes\n    } else if (typeof value === 'string') {\n        return `'${value.replace(/'/g, \"''\")}'`; // Escape single quotes\n    } else if (typeof value === 'boolean') {\n        return value ? 'TRUE' : 'FALSE'; // PostgreSQL boolean\n    } else {\n        return value; // Numbers and others\n    }\n}\n\nfunction escapeIdentifier(identifier) {\n    return `\"${identifier.replace(/\"/g, '\"\"')}\"`; // Escape double quotes\n}\n\nlet commands = [];\n\nconst table = escapeIdentifier(msg.database.table);\nconst schema = escapeIdentifier(msg.database.schema);\nconst tagsSchema = escapeIdentifier(msg.database.tagsSchema);\nconst dataSchema = escapeIdentifier(msg.database.dataSchema);\n\nfor (const change of msg.dashboard.history) {\n    const { index, oldItem, newItem } = change;\n    const oldName = oldItem ? escapeIdentifier(oldItem.name) : null;\n    const oldDataTable = oldItem ? escapeIdentifier(oldItem.data_table) : null;\n\n    if (oldItem && !newItem) {\n        commands.push(`DELETE FROM ${schema}.${table} WHERE name = ${escapeValue(oldItem.name)};`);\n        commands.push(`DROP TABLE IF EXISTS ${tagsSchema}.${oldName} CASCADE;`);\n        commands.push(`DROP TABLE IF EXISTS ${dataSchema}.${oldDataTable} CASCADE;`);\n    } else if (!oldItem && newItem) {\n        const keys = Object.keys(newItem).map(escapeIdentifier);\n        const values = Object.values(newItem).map(escapeValue).join(', ');\n        commands.push(`INSERT INTO ${schema}.${table} (${keys.join(', ')}) VALUES (${values});`);\n    } else if (oldItem && newItem) {\n        const updates = Object.keys(newItem)\n            .map(key => `${escapeIdentifier(key)} = ${escapeValue(newItem[key])}`)\n            .join(', ');\n        commands.push(`UPDATE ${schema}.${table} SET ${updates} WHERE name = ${escapeValue(oldItem.name)};`);\n\n        if (oldItem.name !== newItem.name) {\n            commands.push(`ALTER TABLE IF EXISTS ${tagsSchema}.${oldName} RENAME TO ${escapeIdentifier(newItem.name)};`);\n        }\n        if (oldDataTable !== newItem.data_table) {\n            commands.push(`ALTER TABLE IF EXISTS ${dataSchema}.${oldDataTable} RENAME TO ${escapeIdentifier(newItem.data_table)};`);\n        }\n    }\n}\n\nmsg.query = `\nDO $$\nBEGIN\n    ${commands.join('\\n')}\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = 'deploy_changes';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "3439ee7afb735a34",
        "type": "link in",
        "z": "sf_tag_tables_config",
        "name": "switch_in",
        "links": [
            "9a78439fe0ef36c6"
        ],
        "x": 85,
        "y": 180,
        "wires": [
            [
                "b0e07cfe068bad1f"
            ]
        ]
    },
    {
        "id": "3f0b799a977415c5",
        "type": "debug",
        "z": "sf_tag_tables_config",
        "name": "TConfig - Switch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 340,
        "wires": []
    },
    {
        "id": "8bc572c410a11e6b",
        "type": "function",
        "z": "sf_tag_tables_config",
        "name": "info",
        "func": "const info = `${msg.title} info dialog`\n\n\n\nflow.set(\"info\", info);",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": []
    },
    {
        "id": "e7395bef25d1c1bf",
        "type": "function",
        "z": "sf_tag_tables_config",
        "name": "clear_update",
        "func": "return {\n    topic: (msg.topicMain === 'start') ? 'start' : 'update',\n    time: new Date(),\n    _msgid: msg._msgid\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "de97043d5da7a8cf",
        "type": "http request",
        "z": "sf_tag_tables_config",
        "name": "GET current flows",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 320,
        "wires": [
            [
                "ee4fb0293f18f00a"
            ]
        ]
    },
    {
        "id": "ee4fb0293f18f00a",
        "type": "function",
        "z": "sf_tag_tables_config",
        "name": "update_tag_tables",
        "func": "// This code checks if each item in msg.data has a corresponding subflow in the allNodes (msg.payload)\n\n\n// ________________________Insert Prototypes___________________________\n\n// Function to generate the status and catch flows\nfunction generateStaticNodes() {\n    updatedNodes.push(...[\n        {\n            \"id\": \"nS_tag_tables\",\n            \"type\": \"status\",\n            \"z\": \"tab_tag_tables\",\n            \"name\": \"\",\n            \"scope\": null,\n            \"x\": 120,\n            \"y\": 60,\n            \"wires\": [\n                [\n                    \"loS_tag_tables\"\n                ]\n            ]\n        },\n        {\n            \"id\": \"loS_tag_tables\",\n            \"type\": \"link out\",\n            \"z\": \"tab_tag_tables\",\n            \"name\": \"status_tag_tables\",\n            \"mode\": \"link\",\n            \"links\": [\n                \"liALL_status\"\n            ],\n            \"x\": 235,\n            \"y\": 60,\n            \"wires\": []\n        },\n        {\n            \"id\": \"nC_tag_tables\",\n            \"type\": \"catch\",\n            \"z\": \"tab_tag_tables\",\n            \"name\": \"\",\n            \"scope\": null,\n            \"uncaught\": false,\n            \"x\": 520,\n            \"y\": 60,\n            \"wires\": [\n                [\n                    \"loC_tag_tables\"\n                ]\n            ]\n        },\n        {\n            \"id\": \"loC_tag_tables\",\n            \"type\": \"link out\",\n            \"z\": \"tab_tag_tables\",\n            \"name\": \"error_tag_tables\",\n            \"mode\": \"link\",\n            \"links\": [\n                \"liALL_errors\"\n            ],\n            \"x\": 635,\n            \"y\": 60,\n            \"wires\": []\n        }\n    ]);\n    startY += 160;\n}\n\n// Function to create the required nodes for a specific item\nfunction generateTagTables(item) {\n    const name = item.name;\n    const baseId = `sf_tag_table_t${item.id}`;\n    const linkInId = `sf_tag_table_t${item.id}_in`;\n    const linkCallId = `sf_tag_table_t${item.id}_call`;\n\n    updatedNodes.push(...[\n        {\n            id: baseId,\n            type: \"subflow:sf_tag_table\",\n            z: \"tab_tag_tables\",\n            name: name,\n            env: [\n                { name: \"SCHEMA\", value: \"tags\", type: \"str\" },\n                { name: \"TABLE\", value: name, type: \"str\" },\n                { name: \"DATA_SCHEMA\", value: msg.database.dataSchema, type: \"str\" },\n                { name: \"DATA_TABLE\", value: item.data_table, type: \"str\" },\n                { name: \"PROTOCOL\", value: item.protocol, type: \"str\" }\n            ],\n            x: 410,\n            y: startY, // Position below the current maximum Y\n            wires: [[linkCallId]]\n        },\n        {\n            id: linkInId,\n            type: \"link in\",\n            z: \"tab_tag_tables\",\n            name: name,\n            links: [\"lo_endpoints\"],\n            x: 180,\n            y: startY, // Match Y position\n            wires: [[baseId]]\n        },\n        {\n            id: linkCallId,\n            type: \"link call\",\n            z: \"tab_tag_tables\",\n            name: \"to_database\",\n            links: [],\n            linkType: \"dynamic\",\n            timeout: \"30\",\n            x: 700,\n            y: startY, // Match Y position\n            wires: [[baseId]]\n        }\n    ]);\n    startY += 100;\n    return linkInId;\n}\n\n\n\n// _________________________Main_______________________________\n\nconst tag_tables = msg.data; // Array of objects to verify\nlet allNodes = msg.payload;   // Current nodes\nlet deployNeded = false;    // Flag to indicate if a deploy is needed\n\nif (!Array.isArray(tag_tables) || !Array.isArray(allNodes)) {\n    node.error(\"Input data or allNodes is not in the expected format.\");\n    return;\n}\n\n// Collect all currently existing IDs\nlet existingIds = allNodes.map(node => node.id);\n\n// Filter out all \"tab_tag_tables\" nodes to rigenerate them\nlet updatedNodes = (JSON.parse(JSON.stringify(allNodes))).filter(node => node.z !== \"tab_tag_tables\");\nlet deployNeeded = false;\nlet startY = 0;\n\n// Generate nodes\n\ngenerateStaticNodes();\n\n\nlet links = [];\nfor (let table of tag_tables) {\n    links.push(generateTagTables(table));\n}\nlinks.sort();\n\n\n// Deploy needed check and return\nconst previousTabNodes = allNodes.filter(node => node.z === \"tab_tag_tables\").sort((a, b) => a.id.localeCompare(b.id));\nconst updatedTabNodes = updatedNodes.filter(node => node.z === \"tab_tag_tables\").sort((a, b) => a.id.localeCompare(b.id));\ndeployNeeded = deployNeeded || JSON.stringify(previousTabNodes) !== JSON.stringify(updatedTabNodes);\n\nif (deployNeeded) {\n    const deploycount = global.get(\"dpc_tag_tables\") + 1 || 1;\n    global.set(\"dpc_tag_tables\", deploycount);\n    // Update link in\n    let loNode = updatedNodes.find(node => node.id === \"lo_endpoints\");\n    loNode.links = links;\n    // Return updated nodes\n    msg.log = msg.log || [];\n    msg.log.push({ oldFlow: previousTabNodes, newFlow: updatedTabNodes });\n    msg.payload = updatedNodes\n    node.status({ fill: \"green\", shape: \"dot\", text: `Deploy ${deploycount} sent` });\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 380,
        "wires": [
            [
                "9c8c8dc838a3539b",
                "ff18f2ac9c5ca151"
            ],
            [
                "e7395bef25d1c1bf"
            ]
        ]
    },
    {
        "id": "ff18f2ac9c5ca151",
        "type": "http request",
        "z": "sf_tag_tables_config",
        "name": "POST updated flows",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Node-RED-Deployment-Type",
                "valueType": "other",
                "valueValue": "flows"
            }
        ],
        "x": 1100,
        "y": 380,
        "wires": [
            [
                "e7395bef25d1c1bf"
            ]
        ]
    },
    {
        "id": "9c8c8dc838a3539b",
        "type": "debug",
        "z": "sf_tag_tables_config",
        "name": "TConfig - Flows",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 320,
        "wires": []
    },
    {
        "id": "74b28ec9a9105ea8",
        "type": "status",
        "z": "sf_tag_tables_config",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 440,
        "wires": [
            [
                "e7fded8890d93372"
            ]
        ]
    },
    {
        "id": "e7fded8890d93372",
        "type": "function",
        "z": "sf_tag_tables_config",
        "name": "status_filter",
        "func": "if (msg.status){\n    msg.status.fill = msg.status.fill || \"green\";\n    msg.status.shape = msg.status.shape || \"dot\";\n    if (!msg.status.text){\n        const localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n        msg.status.text = `last update: ${localTime}`;\n    }\n    return msg;\n}\nreturn null\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "d2c43b1043c725ca",
        "type": "catch",
        "z": "sf_tag_tables_config",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 220,
        "y": 80,
        "wires": [
            [
                "2eed54bb56e3675e",
                "7b25a39f2c919154"
            ]
        ]
    },
    {
        "id": "7b25a39f2c919154",
        "type": "debug",
        "z": "sf_tag_tables_config",
        "name": "TConfig - ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 60,
        "wires": []
    },
    {
        "id": "5eec11117ed59706",
        "type": "debug",
        "z": "sf_tag_table",
        "name": "TT - IN Template",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 60,
        "wires": []
    },
    {
        "id": "a74b79495efd24d7",
        "type": "function",
        "z": "sf_tag_table",
        "name": "update_status",
        "func": "// Function to replace underscores with spaces and capitalize words\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\nfunction parseValue(value) {\n    if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n            value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n            try {\n                return JSON.parse(value);\n            } catch (error) {\n                return value;\n            }\n        }\n        // Return original value for non-JSON types\n        return value;\n    }\n    return value;\n}\n\n// GET DATA\n// Retrieve existing data or initialize\nlet columns = [];\nlet data = global.get(msg.database.table) || [];\n\nconst endpoints = (global.get(\"endpoints\") || [])\n    .filter(ep => Array.isArray(ep.tag_tables) && ep.tag_tables.some(tag => tag === msg.database.table));\nconst endpointNames = endpoints.map(ep => ep.name);\n\n// Extract column names from PostgreSQL query\nif (msg.pgsql && msg.pgsql[0] && msg.pgsql[0].rows) {\n    columns = msg.pgsql[0].rows.map(col => col.column_name);\n}\n\n// Extract data rows from PostgreSQL query and parse them\nif (msg.pgsql && msg.pgsql[1] && msg.pgsql[1].rows) {\n    data = msg.pgsql[1].rows;\n    data.forEach((row, rowIndex) => {\n        Object.keys(row).forEach((key) => {\n            let originalValue = row[key];\n            row[key] = parseValue(originalValue)\n        });\n    });\n}\n\n// CHECK DATA\nlet deploy_needed = false;\nif (msg.database.replace_all_procedures) {\n    deploy_needed = true;\n}\n\n// DASHBOARD MANAGEMENT\n// Build dynamic table headers\nconst baseHeaders = columns.length > 0\n    ? columns\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exludes some columns\n        .map(key => ({\n            title: capitalize(key),\n            value: key,\n            headerProps: { style: 'font-weight: 700' },\n            sortable: true\n        }))\n    : [];\n\n// Build table header for endpoints\nconst endpointsHeader = {\n    title: \"Endpoints\",\n    value: \"endpoints\",\n    headerProps: { style: 'font-weight: 700' },\n};\n\n// Define possible states for endpoints\nconst states = [\"unknown\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connected\", \"connecting\", \"error\"];\nconst lengthItems = states.length;\n\n// Ensure random states are assigned to endpoints if not already set\nfor (let datum of data) { // Explicitly declare loop variables\n    for (let endpoint of endpoints) {\n        // Check if the datum does not already have a value for the endpoint name\n        if (!datum[endpoint.name]) {\n            if (endpoint.status === \"connected\") {\n                // Ensure lengthItems is the length of states\n                let randomIndex = Math.floor(Math.random() * states.length);\n                datum[endpoint.name] = states[randomIndex];\n            } else {\n                datum[endpoint.name] = endpoint.status;\n            }\n        }\n    }\n}\n\nlet snacktext = \"\";\nif (msg.topicMain === \"deploy\") {\n    snacktext = `${msg.title} Saved Successfully!`;\n} else if (msg.topicMain === \"update\") {\n    snacktext = `${msg.title} Updated Successfully!`;\n} else if (msg.topicMain === \"start\") {\n    snacktext = `${msg.title} Started Successfully!`;\n}\n\n// Assign data to the message\nmsg.data = data;\nmsg.endpoints = endpoints;\n\nmsg.dashboard.table = {\n    title: msg.title,\n    headers: [...baseHeaders, endpointsHeader],\n    baseHeaders: baseHeaders,\n    otherHeaders: [endpointsHeader]\n};\nmsg.dashboard.form = {\n    data_type: Object.keys(global.get(\"data_type\")),\n    access: global.get(\"access\"),\n    aggregation_type: global.get(\"aggregation_type\"),\n    protocol: env.get(\"PROTOCOL\")\n};\n\nmsg.dashboard.history = msg.dashboard.history || [];\n\nmsg.dashboard.snackbar = {\n    show: true,\n    text: snacktext,\n    color: \"green-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\n// SAVE, NOTIFY, SEND\n// Save data back to the global context\nglobal.set(msg.database.table, data);\n\n// Node State Update\nconst localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\nnode.status({ fill: \"green\", shape: \"dot\", text: `last update: ${localTime}` });\n\n\nif (deploy_needed) {\n    msg.topic = 'deploy';\n    return [null, msg];\n} else {\n    // Prapare the dynamic_insert history and resets the dashboard history\n    msg.history = [...msg.dashboard.history];\n    msg.dashboard.history = [];\n\n    msg.topic = 'update_status';\n    return [msg, null];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "5630f19781fbb5f5",
                "fb4ae1d74584cfe9"
            ],
            [
                "a5a228e2f528d133"
            ]
        ]
    },
    {
        "id": "9e8e8fa3ae2dd93e",
        "type": "debug",
        "z": "sf_tag_table",
        "name": "TT - OUT Template",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 60,
        "wires": []
    },
    {
        "id": "9fded1b5e119a203",
        "type": "ui-template",
        "z": "sf_tag_table",
        "group": "362ab153d16b0184",
        "page": "",
        "ui": "",
        "name": "tag_table",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Container -->\n  <v-card>\n    <!-- Card Header with Title, Reload Button, Search Bar, and Action Buttons -->\n    <v-card-item class=\"bg-primary\">\n      <v-row class=\"my-2 align-self-center\" no-gutters>\n        \n        <!-- Title -->\n        <v-col cols=\"auto\" class=\"mx-4 align-self-center\">\n          <v-btn\n            @click=\"openInfoDialog\"\n            variant=\"tonal\"\n            class=\"font-weight-bold text-h5 text-white\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-table</v-icon>\n            <p class=\"mx-1 align-self-center\" v-text=\"msg.dashboard.table.title\"></p>\n          </v-btn>\n        </v-col>\n\n        <!-- Search Bar -->\n        <v-col class=\"mx-4 align-self-center\">\n          <v-text-field\n            v-model=\"search\"\n            label=\"Search\"\n            prepend-inner-icon=\"mdi-magnify\"\n            single-line\n            clearable\n            hide-details\n            color=\"white\"\n          ></v-text-field>\n        </v-col>\n\n        <!-- Action Buttons (CSV Upload, CSV Download, Edit, Save, Add New, Discard) -->\n        <v-col cols=\"auto\" class=\"mx-2 align-self-center text-white\">\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"updateTable\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-reload</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Reload</span>\n          </v-btn>\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"downloadCsv\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-export</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Export</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"enableEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Edit</span>\n          </v-btn>\n\n          <!-- Buttons visible in Edit Mode -->\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deleteAll\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-delete-alert</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Delete All</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"openCsvDialog\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-import</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Import</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"addNewItem\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-plus</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Add New</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deploy\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-floppy</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Save</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"discardEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil-off</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Discard</span>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <!-- Data Table with Custom Cell Templates -->\n    <v-data-table\n      v-model=\"selected\"\n      :headers=\"msg.dashboard.table.headers\"\n      :items=\"msg.data\"\n      :search=\"search\"\n      :items-per-page=\"itemsPerPage\"\n      :items-per-page-options=\"[5, 10, 25, 50, -1]\"\n      class=\"elevation-1\"\n      :loading=\"msg.dashboard.loading\"\n      loading-text=\"Loading...\"\n      density=\"default\"\n    >\n<!-- MODIFY DISPLAY HERE -->\n\n      <!-- Toggle Switch for 'enabled' Field -->\n      <template v-slot:item.enabled=\"{ item }\">\n        <v-switch\n          v-model=\"item.enabled\"\n          :model-value=\"item.enabled\"\n          :disabled=\"!editMode\"\n          color=\"blue-darken-2\"\n          hide-details\n          @click=\"handleEnabled(item)\"\n        ></v-switch>\n      </template>      \n\n      <!-- Custom Endpoint Chips -->\n      <template v-slot:item.endpoints=\"{ item }\">\n        <div>\n          <v-chip \n            v-for=\"(endp, index) in msg.endpoints\"\n            :key=\"index\"\n            class=\"ma-1\"\n            :color=\"getSwitchColor({enabled: endp.enabled, status: item[endp.name]})\"\n            size=\"small\"\n          >\n            {{ endp.name }}\n          </v-chip>\n        </div>\n      </template>\n\n<!-- END MODIFY -->\n      <!-- Actions Column with Edit and Delete Icons -->\n      <template v-slot:item.actions=\"{ item }\">\n        <div class=\"actions-column\">\n          <v-icon\n            v-show=\"editMode\"\n            small\n            class=\"mr-2\"\n            @click=\"editItem(item)\"\n            color=\"blue-darken-2\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-pencil\n          </v-icon>\n\n          <v-icon\n            v-show=\"editMode\"\n            small\n            @click=\"deleteItem(item)\"\n            color=\"error\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-delete\n          </v-icon>\n        </div>\n      </template>\n\n      <!-- No Data Message -->\n      <template v-slot:no-data>\n        <v-row class=\"ma-4\">\n          <v-alert :value=\"true\" color=\"amber-lighten-4\" icon=\"mdi-alert\">\n            No matching records found.\n          </v-alert>\n        </v-row>\n      </template>\n    </v-data-table>\n  </v-card>\n\n  <!-- Dialog for Adding or Editing Items -->\n  <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">{{ formTitle }}</span>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" v-model=\"valid\" fast-fail @submit.prevent>\n<!-- MODIFY FORM HERE -->\n\n          <!-- Form Fields -->\n          <v-text-field \n            v-model=\"editAction.newItem.name\" \n            label=\"Name\" \n            :rules=\"[v => !!v || 'Name is required']\" \n            required\n          ></v-text-field>\n          <v-text-field \n            v-model=\"editAction.newItem.label\" \n            label=\"Label\"\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.data_type\"\n            label=\"Data Type\"\n            :items=\"msg.dashboard.form.data_type\"\n            :rules=\"[v => !!v || 'Data Type is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-text-field \n            v-model=\"editAction.newItem.address\" \n            label=\"Address\" \n            :rules=\"[v => !!v || 'Address is required']\" \n            required\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.access\"\n            label=\"Access\"\n            :items=\"msg.dashboard.form.access\"\n            :rules=\"[v => !!v || 'Access is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-textarea\n            v-model=\"editAction.newItem.comment\" \n            label=\"Comment\"\n            maxlength=\"200\"\n            rows=\"2\"\n            counter\n            auto-grow\n          ></v-text-field>\n\n<!-- END MODIFY-->\n        </v-form>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"saveItem\">Save</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Select a CSV file\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete Confirmation Dialog -->\n  <v-dialog v-model=\"deleteDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting this element will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue-darken-1\" text @click=\"cancelDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"error\" text @click=\"confirmDeletion\">\n          Delete\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete All Confirmation Dialog -->\n  <v-dialog v-model=\"deleteAllDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting all table items will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue-darken-1\" text @click=\"cancelAllDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"error\" text @click=\"confirmAllDeletion\">\n          Delete All\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Info Dialog -->\n  <v-dialog v-model=\"infoDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Info\n      </v-card-title>\n\n      <v-card-text>\n        <p v-text=\"msg.dashboard.info\"></p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Close Button -->\n        <v-btn color=\"blue\" text @click=\"closeInfoDialog\">\n          OK\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      search: '',\n      page: 1,\n      itemsPerPage: 10,\n      headerNames: [],\n      dialog: false,\n      deleteDialog: false,\n      deleteAllDialog: false,\n      csvDialog: false,\n      infoDialog: false,\n      csvFile: null,    \n      formTitle: \"\",\n      editMode: false,\n      editAction: {\n        index: -1,\n        oldItem: null,\n        newItem: null,\n      },\n      selected: [],\n      actionsHeader: {\n        title: \"Actions\",\n        value: \"actions\",\n        headerProps: { style: 'font-weight: 700' },\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n    };\n  },\n  computed: {\n    pageCount() {\n      return Math.ceil(this.msg.data.length / this.itemsPerPage);\n    },\n  },\n  watch: {\n    msg: {\n      handler() {\n        if (this.msg?.dashboard?.table?.headers) {\n          this.headerNames = this.msg.dashboard.table.baseHeaders.map(header => header.value);\n        };\n        if (\n          this.editMode &&\n          this.msg?.dashboard?.table?.headers?.[this.msg.dashboard.table.headers.length - 1]?.value !== 'actions'\n        ) {\n          this.msg.dashboard.table.headers.push(this.actionsHeader);\n        };\n        // Dynamically update snackbar parameters\n        if (this.msg?.dashboard?.snackbar) {\n          const { show, text, color } = this.msg.dashboard.snackbar;\n          this.snackbar.show = show;\n          this.snackbar.text = text || '';\n          this.snackbar.color = color || 'default';\n        }\n      },\n      deep: true \n    }\n  },\n  methods: {\n    // Sends a message with the current state\n    msgSend() {\n      this.msg.dashboard.snackbar = null;\n      this.send({\n        topic: this.msg.topic,\n        topicMain: this.msg.topicMain,\n        title: this.msg.title,\n        database: this.msg.database,\n        data: this.msg.data,\n        dashboard: this.msg.dashboard,\n        payload: this.msg.payload,\n        time: new Date(),\n      });\n    },\n    \n    // Edit mode controls\n    enableEdit() {\n      this.msg.dashboard.snackbar.show = false;\n      this.msg.dashboard.table.headers.push(this.actionsHeader);\n      this.editMode = true;\n    },\n    disableEdit() {\n      this.msg.dashboard.table.headers = this.msg.dashboard.table.headers.filter(\n        header => header !== this.actionsHeader\n      );\n      this.editMode = false;\n    },\n    \n    // Message Outputs: Update, Deploy and discard edits \n    updateTable() {\n      this.msg.topic = \"update\";\n      this.msg.topicMain = \"update\";\n      this.msg.payload = null;\n      this.msgSend();\n    },\n    deploy() {\n      this.msg.dashboard.loading = true;\n      this.disableEdit();\n      this.msg.topic = \"deploy\";\n      this.msg.topicMain = \"deploy\";\n      this.msgSend();\n      // this.showSnackbar('Deploy action triggered!', 'info');\n    },\n    discardEdit() {\n      this.disableEdit();\n      this.msg.dashboard.history = [];\n      this.updateTable();\n    },\n    \n    // Handling items\n    getDefaultItem() {\n      const defaultItem = {};\n      this.msg.dashboard.table.baseHeaders.forEach(header => {\n        if (header.value !== 'actions') {\n          defaultItem[header.value] = header.value === 'enabled' ? true :\n                                        header.value === 'status' ? \"unknown\" : null;\n        }\n      });\n      return defaultItem;\n    },\n    filterItem(item) {\n      if (!item) {\n        return null;\n      }\n      return Object.keys(item)\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exclude keys\n        .filter(key => this.headerNames.includes(key)) // Exclude keys\n        .reduce((obj, key) => {\n          obj[key] = item[key];\n          return obj;\n        }, {});\n    },\n    filterHeaders(headers) {\n      return headers.filter(header => !['actions', 'status', 'id'].includes(header.value)) // Exludes some columns\n    },\n    addEditAction(){\n      let action = JSON.parse(JSON.stringify(this.editAction));\n      action.oldItem = this.filterItem(action.oldItem);\n      action.newItem = this.filterItem(action.newItem);\n      this.msg.dashboard.history.push(action);\n    },\n    addNewItem() {\n      this.editAction.index = -1;\n      this.editAction.oldItem = null;\n      this.editAction.newItem = this.getDefaultItem();\n      this.formTitle = 'Add Item';\n      this.dialog = true;\n    },\n    editItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = { ...item };\n      this.formTitle = 'Edit Item';\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = null;\n      this.deleteDialog = true;\n    },\n    deleteAll() {\n      this.deleteAllDialog = true;\n    },\n\n\n    // Delete Dialog controls\n    cancelDeletion() {\n      this.deleteDialog = false;\n    },\n    confirmDeletion() {\n      this.deleteDialog = false;\n      if (this.editAction.index > -1) {\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n        // this.showSnackbar('Item deleted successfully!', 'success');\n      }\n    },\n\n    // Delete All Dialog controls\n    cancelAllDeletion() {\n      this.deleteAllDialog = false;\n    },\n    confirmAllDeletion() {\n      this.deleteAllDialog = false;\n      let data_copy = JSON.parse(JSON.stringify(this.msg.data));\n      for (let item of data_copy) {\n        this.editAction.index = this.msg.data.indexOf(item);\n        this.editAction.oldItem = { ...item };\n        this.editAction.newItem = null;\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n      }\n    },\n\n    // Form Dialog controls\n    closeDialog() {\n      this.dialog = false;\n      this.$refs.form.reset();\n    },\n    async saveItem() {\n      const { valid } = await this.$refs.form.validate();\n      if (valid) {\n        if (this.editAction.index > -1) {\n          Object.assign(this.msg.data[this.editAction.index], this.editAction.newItem);\n          // this.showSnackbar('Item updated successfully!', 'success');\n        } else {\n          this.msg.data.push({ ...this.editAction.newItem });\n          // this.showSnackbar('Item added successfully!', 'success');\n        }\n        this.addEditAction();\n        this.closeDialog();\n      } else {\n        this.showSnackbar('Please correct the errors in the form.', 'error');\n      }\n    },\n\n    // Info Dialog controls\n    openInfoDialog() {\n      this.infoDialog = true;\n    },\n    closeInfoDialog() {\n      this.infoDialog = false;\n    },\n\n    // CSV Dialog controls\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Data Handling\n    // Stringify function that handles different data types\n    stringifyValue(value) {\n      if (value === undefined || value === null) {\n        return ''; // Handle null or undefined\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value); // Handle arrays by converting them to a JSON string\n      } else if (typeof value === 'object') {\n        return JSON.stringify(value); // Handle objects by converting them to a JSON string\n      } else if (typeof value === 'string') {\n        return value; // Use string as-is\n      } else {\n        return String(value); // Convert other types (number, boolean, etc.) to string\n      }\n    },\n    parseValue(value) {\n      if (typeof value === 'string') {\n        // Handle empty strings\n        if (value === '') return null;\n\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n          value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n          try {\n            return JSON.parse(value);\n          } catch (error) {\n            return value;\n          }\n        }\n        // Check if the string represents a boolean\n        if (value.toLowerCase() === \"true\") return true;\n        if (value.toLowerCase() === \"false\") return false;\n\n        // Check if the string represents a number\n        const parsedNumber = Number(value);\n        if (!isNaN(parsedNumber)) return parsedNumber;\n\n        // Return original value for simple strings\n        return value;\n      }\n      return value;\n    },\n\n    // CSV Upload and Loading\n    async processCsv() {  // Processes the uploaded CSV file\n      if (!this.csvFile) {\n        this.showSnackbar('No file selected!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV successfully uploaded!', 'success');\n      } catch (error) {\n        this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n    parseCsv(content) {  // Parses the CSV file content into an array of objects\n      const rows = content.split(/\\r?\\n/).filter(row => row.trim()); \n      const headers = rows.shift().split(';'); // Use the first row as headers\n      return rows.map(row => {\n        const values = row.split(';'); \n        return headers.reduce((acc, header, index) => {\n          acc[header] = this.parseValue(values[index]); // Map headers to corresponding values\n          return acc;\n        }, {});\n      });\n    },\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {  // Check if an item with the same name exists\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n            this.editAction.oldItem = {...existingItem};\n            this.editAction.newItem = {...newItem};\n            this.addEditAction()\n            Object.assign(existingItem, newItem); // Update \n          }\n        } else {\n          this.editAction.oldItem = null;\n          this.editAction.newItem = {...newItem};\n          this.addEditAction()\n          this.msg.data.push(newItem);  // Add new \n        }\n      });\n    },\n    \n    // CSV Generation and Download\n    generateCsv() {\n      const separator = ';';\n      const headers = this.filterHeaders(this.msg.dashboard.table.baseHeaders)\n        .map(header => header.value)\n        .join(separator); \n\n      const rows = this.msg.data.map(item => {\n        return this.filterHeaders(this.msg.dashboard.table.baseHeaders)\n          .map(header => {\n            return this.stringifyValue(item[header.value]);\n          })\n          .join(separator);\n      }).join('\\n');\n\n\n      return `${headers}\\n${rows}`;\n    },\n    createDownloadLink(csvContent) {\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${this.msg.database.table}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    downloadCsv() {\n      try {\n        const csvContent = this.generateCsv();\n        this.createDownloadLink(csvContent);\n        this.showSnackbar('CSV scaricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante il download del CSV:', error);\n        this.showSnackbar('Errore durante il download del CSV.', 'error');\n      }\n    },\n    \n    // Utility Methods\n    getStatusColor(value) {\n      const colors = {\n        \"unknown\": 'blue',\n        \"connecting\": 'amber',\n        \"connected\": 'green',\n        \"error\": 'red'\n      };\n      if (colors[value]) return colors[value];\n      return 'purple';\n    },\n    getSwitchColor(item) {\n      return item.enabled ? this.getStatusColor(item.status)\n                            : 'grey-lighten-2';\n    },\n    getListColor(list, elem, item) {\n      return item.enabled ? list.includes(elem) ? this.getStatusColor(item.status) : 'red'\n                            : 'grey-lighten-2';\n    },\n    getListColorStatic(list, elem) {\n      return list.includes(elem) ? 'green' : 'red';\n    },\n    handleEnabled(item) {\n      // Custom logic for enabling/disabling\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      item.enabled = !item.enabled;\n      this.editAction.newItem = { ...item };\n      this.addEditAction();\n      \n    },\n    showSnackbar(message, type) {\n      this.snackbar.text = message;\n      this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                          : type === 'error' ? 'red-lighten-3' \n                          : 'blue-lighten-5';\n      this.snackbar.show = true;\n      this.msg.dashboard.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Heading Text Size */\n.text-h5 {\n  font-size: 1.25rem;\n}\n\n/* Actions Column Styling */\n.actions-column {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 60px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 780,
        "y": 100,
        "wires": [
            [
                "6a2c581d23afb47f",
                "9e8e8fa3ae2dd93e"
            ]
        ]
    },
    {
        "id": "6a2c581d23afb47f",
        "type": "link out",
        "z": "sf_tag_table",
        "name": "ui_table_out",
        "mode": "link",
        "links": [
            "ecac83872ed8bc4e"
        ],
        "x": 995,
        "y": 100,
        "wires": []
    },
    {
        "id": "289ed522f9d46c0e",
        "type": "function",
        "z": "sf_tag_table",
        "name": "switch",
        "func": "// Function to format strings by replacing underscores with spaces and capitalizing each word\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// Init\nconst tabName = env.get('TABLE');\nmsg.title = capitalize(tabName);\nmsg.topicMain = msg.topicMain || msg.topic;\n\nmsg.database = msg.database || {};\nmsg.database.name = env.get(\"DATABASE\");\nmsg.database.schema = env.get(\"SCHEMA\");\nmsg.database.table = tabName;\nmsg.database.dataSchema = env.get(\"DATA_SCHEMA\");\nmsg.database.dataTable = env.get(\"DATA_TABLE\");\n\nmsg.data = msg.data || flow.get(tabName) || null;\nmsg.dashboard = msg.dashboard || {};\nmsg.dashboard.info = msg.dashboard.info || flow.get(\"info\");\n\nif (msg.database.table !== tabName) {\n    msg.error = \"Message with wrong table\";\n}\n\n// Topic switch\nconst indexMap = {\n    // Previous Error\n    error: 0,\n\n    // Previous Action (postgres response)\n    check_table: 2, \n    deploy_changes: 2,\n    select_data: 3,\n\n    // Next Action\n    start: 1,\n    update: 2,\n    deploy: 4,\n};\n\nconst outputs = [null, null, null, null, null];\n\nif (msg.error) outputs[0] = msg;\nelse if (indexMap[msg.topic] !== undefined) outputs[indexMap[msg.topic]] = msg;\n\nreturn outputs;\n\n\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 200,
        "wires": [
            [
                "84dffe0ac4e466b5"
            ],
            [
                "7c52eb13244670e4",
                "9fce59067ffcfd37"
            ],
            [
                "60bd7628bf41b9fc"
            ],
            [
                "a74b79495efd24d7"
            ],
            [
                "a5a228e2f528d133"
            ]
        ]
    },
    {
        "id": "84dffe0ac4e466b5",
        "type": "function",
        "z": "sf_tag_table",
        "name": "error_show",
        "func": "msg.dashboard.snackbar = {\n    show: true,\n    text: `${msg.title} - ${msg.topic} error: ${msg.error.message}`,\n    color: \"red-lighten-3\"\n}\n\nnode.status({ fill: \"red\", shape: \"dot\", text: msg.dashboard.snackbar.text });\n\nmsg.dashboard.history = [];\n\nmsg.dashboard.loading = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 80,
        "wires": [
            [
                "fb4ae1d74584cfe9"
            ]
        ]
    },
    {
        "id": "60bd7628bf41b9fc",
        "type": "function",
        "z": "sf_tag_table",
        "name": "select_data",
        "func": "msg.query = `\n\n    SELECT column_name \n    FROM information_schema.columns \n    WHERE table_schema = '${msg.database.schema}'\n    AND table_name = '${msg.database.table}';\n\n    SELECT * \n    FROM ${msg.database.schema}.${msg.database.table}\n    ORDER BY id;\n\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"select_data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7c52eb13244670e4",
        "type": "function",
        "z": "sf_tag_table",
        "name": "check_db_table",
        "func": "// Extract schema and table names from the message\nconst schemaName = msg.database.schema;\nconst tableName = msg.database.table;\nconst dataSchema = msg.database.dataSchema;\nconst dataTable = msg.database.dataTable;\n\n// Construct the dynamic query for creating the schema and the table\nmsg.query = `\nDO $$\nBEGIN\n   -- Check if schema exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.schemata\n      WHERE schema_name = '${schemaName}'\n   ) THEN\n      CREATE SCHEMA ${schemaName};\n   END IF;\n\n   -- Check if tags table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${schemaName}' AND table_name = '${tableName}'\n   ) THEN\n      CREATE TABLE ${schemaName}.${tableName} (\n        id SERIAL,\n        enabled BOOLEAN,\n        name TEXT PRIMARY KEY,\n        label TEXT,\n        data_type TEXT,\n        address TEXT,\n        access TEXT,\n        comment TEXT\n      );\n   END IF;\n\n   -- Check if data table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${dataSchema}' AND table_name = '${dataTable}'\n   ) THEN\n      CREATE TABLE ${dataSchema}.${dataTable} (\n         created_at TIMESTAMP,\n         endpoint NUMERIC,\n         PRIMARY KEY (created_at, endpoint)\n      );\n   END IF;\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"check_table\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a5a228e2f528d133",
        "type": "function",
        "z": "sf_tag_table",
        "name": "update_data",
        "func": "function escapeValue(value) {\n    if (value === null || value === undefined) {\n        // Handles NULL values\n        return 'NULL';\n    }\n    else if (Array.isArray(value) || typeof value === 'object') {\n        // Convert arrays and objects to JSON, then escape single quotes\n        const jsonString = JSON.stringify(value);\n        return `'${jsonString.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'string') {\n        // Escapes dangerous characters like single quotes ('), replacing them with double single quotes ('')\n        return `'${value.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'boolean') {\n        // PostgreSQL uses 'TRUE'/'FALSE' for boolean values\n        return value ? 'TRUE' : 'FALSE';\n    }\n    else {\n        // For numbers (and other primitive types), return the value directly\n        return value;\n    }\n}\n\nfunction escapeIdentifier(identifier) {\n    // Ensures proper escaping of column and table names using double quotes\n    return `\"${identifier.replace(/\"/g, '\"\"')}\"`;\n}\n\nlet commands = [];\nconst table = escapeIdentifier(msg.database.table);\nconst schema = escapeIdentifier(msg.database.schema);\nconst tagTable = `${schema}.${table}`;\nconst dataSchema = escapeIdentifier(msg.database.dataSchema);\nconst dataTableName = escapeIdentifier(msg.database.dataTable);\nconst dataTable = `${dataSchema}.${dataTableName}`;\nconst data_type_dict = global.get(\"data_type\");\n\nfor (const change of msg.dashboard.history) {\n    const { index, oldItem, newItem } = change;\n\n    if (oldItem && !newItem) {\n        // Case: deletion\n        const oldName = escapeIdentifier(oldItem.name.toLowerCase());\n        commands.push(`DELETE FROM ${tagTable} WHERE name = ${escapeValue(oldItem.name.toLowerCase())};`);\n        commands.push(`ALTER TABLE IF EXISTS ${dataTable} DROP COLUMN IF EXISTS ${oldName};`);\n\n    } else if (!oldItem && newItem) {\n        // Case: insertion\n        const keys = Object.keys(newItem).map(key => escapeIdentifier(key));\n        const values = Object.values(newItem)\n            .map(value => `${escapeValue(value)}`) // Escape values\n            .join(', ');\n        commands.push(`INSERT INTO ${tagTable} (${keys.join(', ')}) VALUES (${values});`);\n        const data_type = data_type_dict[newItem.data_type] ? data_type_dict[newItem.data_type] : 'TEXT';\n        commands.push(`ALTER TABLE IF EXISTS ${dataTable} ADD COLUMN IF NOT EXISTS ${escapeIdentifier(newItem.name.toLowerCase())} ${data_type};`);\n\n    } else if (oldItem && newItem) {\n        // Case: update\n        const updates = Object.keys(newItem)\n            .map(key => `${escapeIdentifier(key)} = ${escapeValue(newItem[key])}`) // Escape values and identifiers\n            .join(', ');\n        commands.push(`UPDATE ${tagTable} SET ${updates} WHERE name = ${escapeValue(oldItem.name.toLowerCase())};`);\n        if (oldItem.name.toLowerCase() !== newItem.name.toLowerCase()) {\n            commands.push(`ALTER TABLE IF EXISTS ${dataTable} RENAME COLUMN ${escapeIdentifier(oldItem.name.toLowerCase())} TO ${escapeIdentifier(newItem.name.toLowerCase())};`);\n        }\n        if (oldItem.data_type !== newItem.data_type) {\n            const data_type = data_type_dict[newItem.data_type] ? data_type_dict[newItem.data_type] : 'TEXT';\n            commands.push(`ALTER TABLE IF EXISTS ${dataTable} ALTER COLUMN ${escapeIdentifier(newItem.name.toLowerCase())} TYPE ${data_type};`);\n        }\n    }\n}\n\n// Prototype for calling the PostgreSQL function `create_views_by_label`\n// CALL create_views_by_label(tag_table TEXT, data_table TEXT, view_prefix TEXT);\n\n// commands.push(`CALL create_views_by_label('${tagTable}', '${dataTable}', '${dataTableName}');`);\nmsg.database.replace_all_procedures = false\n\n\n// Constructs the PL/pgSQL block\nmsg.query = `\nDO $$ \nBEGIN\n    ${commands.join('\\n    ')}\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = 'deploy_changes';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ecac83872ed8bc4e",
        "type": "link in",
        "z": "sf_tag_table",
        "name": "switch_in",
        "links": [
            "6a2c581d23afb47f"
        ],
        "x": 85,
        "y": 160,
        "wires": [
            [
                "df46bed50bf4daed"
            ]
        ]
    },
    {
        "id": "950353991ce401e6",
        "type": "debug",
        "z": "sf_tag_table",
        "name": "TT - IN Switch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 320,
        "wires": []
    },
    {
        "id": "9fce59067ffcfd37",
        "type": "function",
        "z": "sf_tag_table",
        "name": "info",
        "func": "const info = `${msg.title} info dialog`\n\n\nflow.set(\"info\", info);",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": []
    },
    {
        "id": "066adc7e84081c61",
        "type": "status",
        "z": "sf_tag_table",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 420,
        "wires": [
            [
                "5bee533b3895ff7d"
            ]
        ]
    },
    {
        "id": "5bee533b3895ff7d",
        "type": "function",
        "z": "sf_tag_table",
        "name": "status_filter",
        "func": "if (msg.status){\n    msg.status.fill = msg.status.fill || \"green\";\n    msg.status.shape = msg.status.shape || \"dot\";\n    if (!msg.status.text){\n        const localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n        msg.status.text = `last update: ${localTime}`;\n    }\n    return msg;\n}\nreturn null\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "b3f8c0a34e8fe8b0",
        "type": "catch",
        "z": "sf_tag_table",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 220,
        "y": 60,
        "wires": [
            [
                "84dffe0ac4e466b5"
            ]
        ]
    },
    {
        "id": "5630f19781fbb5f5",
        "type": "http request",
        "z": "sf_tag_table",
        "name": "GET current flows",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 300,
        "wires": [
            [
                "0dd79f41d5ff339d",
                "6c7762b9bcc1d9d8"
            ]
        ]
    },
    {
        "id": "0dd79f41d5ff339d",
        "type": "function",
        "z": "sf_tag_table",
        "name": "update_connections",
        "func": "// ___________________Insert Prototypes________________________\nfunction updateS7tags(endpoint, meta_table) {\n    let suffix = '';\n    if (['continous', 'continous_on_change'].includes(meta_table.sampling_mode)) {\n        suffix = `_${meta_table.sampling_freq}`;\n    }\n    const S7endpointId = `S7endpoint_e${endpoint.id}${suffix}`;\n    const S7endpointNode = updatedNodes.find(node => node.id === S7endpointId);\n    if (!S7endpointNode) {\n        logs.push(`S7 endpoint NOT FOUND`);\n        return;\n    }\n    logs.push(`S7 endpoint found`);\n    const vartable = tags.map(tag => ({ addr: tag.address, name: tag.name }));\n    const completeVartable = Array.from(\n        new Map(\n          [...JSON.parse(JSON.stringify(S7endpointNode.vartable)), ...vartable].map(item => [JSON.stringify(item), item])\n        ).values()\n      );      \n    if (JSON.stringify(completeVartable) !== JSON.stringify(S7endpointNode.vartable)) {\n        logs.push(`Vartable updated`);\n        S7endpointNode.vartable = completeVartable;\n        deployNeeded = true;\n    } else {\n        logs.push(`Vartable not updated (no changes)`);\n    }\n}\n\n\n// _________________________Main_______________________________\n\nconst tags = msg.data;  // Array of all tags\nconst table = msg.database.table;  // Table name\nconst meta_table = global.get('tag_tables').find(t => t.name === table);  // Table metadata\nconst allNodes = msg.payload;   // Current nodes\nconst endpoints = global.get('endpoints');\n\nif (!Array.isArray(tags) || !Array.isArray(allNodes)) {\n    return [null, null];\n}\n\n// Filter out all \"tab_connections\" nodes to rigenerate them\nlet updatedNodes = JSON.parse(JSON.stringify(allNodes));\nlet deployNeeded = false;\nlet logs = [];\n\n// Update endpoint nodes\nfor (let endpoint of endpoints) {\n    logs.push(`Endpoint: ${endpoint.name}`);\n    if (!endpoint.enabled || !endpoint.tag_tables.includes(table)) {\n        logs.push(`Endpoint disabled or not containing ${table}`);\n        continue;\n    }\n    switch (endpoint.protocol) {\n        case \"S7\": {\n            logs.push(`Updating S7 tags`);\n            updateS7tags(endpoint, meta_table);\n        }\n        default:\n            logs.push(`Protocol not supported`);\n    }\n}\n\nlet msg2 = { payload: logs };\nif (deployNeeded) {\n    let deploycount = global.get(\"dpc_tags\") || 0;\n    deploycount++;\n    global.set(\"dpc_tags\", deploycount);\n    msg.payload = updatedNodes\n    node.status({ fill: \"green\", shape: \"dot\", text: `Deploy ${deploycount} sent` });\n    return [msg, msg2];\n}\nreturn [null, msg2];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 360,
        "wires": [
            [
                "ca2046ad97be51c9",
                "7734827746ddc579"
            ],
            [
                "fa8beedbac204747"
            ]
        ],
        "info": "msg.payload = {\r\n    flows: flows,\r\n    deploy: deployType\r\n};\r\n\r\n\r\n\"full\": Deploy completo (default).\r\n\"nodes\": Deploy solo dei nodi modificati.\r\n\"flows\": Deploy solo dei flussi modificati."
    },
    {
        "id": "ca2046ad97be51c9",
        "type": "http request",
        "z": "sf_tag_table",
        "name": "POST updated flows",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Node-RED-Deployment-Type",
                "valueType": "other",
                "valueValue": "flows"
            }
        ],
        "x": 820,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "7734827746ddc579",
        "type": "debug",
        "z": "sf_tag_table",
        "name": "TT - Modified Flows",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 360,
        "wires": []
    },
    {
        "id": "6c7762b9bcc1d9d8",
        "type": "debug",
        "z": "sf_tag_table",
        "name": "TT - Get Flows",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 300,
        "wires": []
    },
    {
        "id": "fa8beedbac204747",
        "type": "debug",
        "z": "sf_tag_table",
        "name": "TT - Logs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 420,
        "wires": []
    },
    {
        "id": "86615f513a209ccc",
        "type": "function",
        "z": "sf_data_handler",
        "name": "check_and_parse_data",
        "func": "msg.created_at = new Date();\nconst timeLast = flow.get('timeLast') || msg.created_at - msg.period;\nconst min_interval = msg.period * 0.95;\n\nswitch (msg.endpoint.protocol) {\n    case 'S7': {\n        if (!msg.isTrigger) {\n            if (msg.created_at - timeLast < min_interval) {\n                msg.status = { fill: 'blue', shape: 'ring', text: 'Data received but not sent - min interval not passed' };\n                return null;\n            }    \n        }\n        msg.data = JSON.parse(JSON.stringify(msg.payload));\n        break;\n    }\n    case 'Modbus': {\n        if (!msg.isTrigger) {\n            // check if is coherent with sample time\n        }\n        node.warn('Modbus protocol not implemented yet');\n        return null;\n        // put correct data in msg.payload\n    }\n    case 'OPC-UA': {\n        if (!msg.isTrigger) {\n            // check if is coherent with sample time\n        }\n        node.warn('OPC-UA protocol not implemented yet');\n        return null;\n        // put correct data in msg.payload\n    }\n    case 'MQTT': {\n        if (!msg.isTrigger) {\n            // check if is coherent with sample time\n        }\n        node.warn('MQTT protocol not implemented yet');\n        return null;\n        // put correct data in msg.payload\n    }\n    case 'HTTP': {\n        if (!msg.isTrigger) {\n            // check if is coherent with sample time\n        }\n        node.warn('HTTP protocol not implemented yet');\n        return null;\n        // put correct data in msg.payload\n    }\n}\n\n// Optimized code for filtering and updating msg.tag_table and msg.payload efficiently\n\nconst knownKeysSet = new Set(msg.tag_table.filter(t => t.enabled).map(t => t.name.toLowerCase()));\nconst validKeysSet = new Set(\n    Object.keys(msg.data).filter(key => knownKeysSet.has(key.toLowerCase()))\n);\n\nmsg.tag_table.forEach(tag => {\n    tag[msg.endpoint.name] = validKeysSet.has(tag.name) ? \"good\" : \"error\";\n});\n\nmsg.payload = Object.fromEntries(\n    Object.entries(msg.data).filter(([key]) => validKeysSet.has(key))\n);\n\nflow.set('timeLast', msg.created_at);\nglobal.set(msg.meta_table.name, msg.tag_table);\n\n// msg.knownSet = knownKeysSet;\nmsg.validSet = validKeysSet;\nmsg.unvalidSet = new Set(\n    Object.keys(msg.data).filter(key => !knownKeysSet.has(key.toLowerCase()))\n);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 120,
        "wires": [
            [
                "0f0a228ee2485f05"
            ]
        ]
    },
    {
        "id": "e0b7b86e0fe972d0",
        "type": "function",
        "z": "sf_data_handler",
        "name": "endpoint_control",
        "func": "switch (msg.endpoint.protocol) {\n    case 'S7': {\n        msg.target = `s7control_e${msg.endpoint.id}_in`;\n        msg.topic = `trigger_sent`;\n        break;\n    }\n    case 'Modbus': {\n        msg.target = `modbuscontrol_e${msg.endpoint.id}_in`;\n        msg.topic = `trigger_sent`;\n        break;\n    }\n    case 'OPC-UA': {\n        msg.target = `opcuacontrol_e${msg.endpoint.id}_in`;\n        msg.topic = `trigger_sent`;\n        break;\n    }\n    case 'MQTT': {\n        msg.target = `mqttcontrol_e${msg.endpoint.id}_in`;\n        msg.topic = `trigger_sent`;\n        break;\n    }\n    case 'HTTP': {\n        msg.target = `httpcontrol_e${msg.endpoint.id}_in`;\n        msg.topic = `trigger_sent`;\n        break;\n    }\n    default: {\n        node.error(`Invalid protocol - ${msg.endpoint.protocol}`);\n        msg.topic = `trigger_sent`;\n        return null;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "1e02bad20c4678c8",
        "type": "function",
        "z": "sf_data_handler",
        "name": "switch",
        "func": "// Helper function to convert time strings to milliseconds\nfunction timeToMilliseconds(timeStr) {\n    if (timeStr === undefined || timeStr === null || timeStr === '' || timeStr.toLowerCase() === 'none') {\n        return 0;\n    }\n    // Extract the numeric part and the unit part\n    const num = parseFloat(timeStr);\n    const unit = timeStr.replace(num, '').trim();\n\n    // Convert based on the unit\n    switch (unit) {\n        case 'ms':\n            return num; // Already in milliseconds\n        case 's':\n            return num * 1000; // Convert seconds to milliseconds\n        case 'm':\n            return num * 1000 * 60; // Convert minutes to milliseconds\n        case 'h':\n            return num * 1000 * 60 * 60; // Convert hours to milliseconds\n        case 'd':\n            return num * 1000 * 60 * 60 * 24; // Convert days to milliseconds\n        default:\n            node.error(`Invalid time unit - ${timeStr} - ${num} - ${unit}`);\n    }\n}\n\nif (msg.error) {\n    node.status({ fill: 'red', shape: 'ring', text: msg.error.message });\n    return [null, null];\n}\n\nconst endpoint = global.get('endpoints').filter(e => e.id === env.get('ENDPOINT_ID'))[0];\nlet tag_table = global.get(env.get('TAG_TABLE'));\nlet meta_table = global.get('tag_tables').filter(t => t.name === env.get('TAG_TABLE'))[0];\nlet isData = false;\nlet isTrigger = false;\n\n// In next versions checks must be made at tables level\nif (!endpoint || !endpoint.protocol) {\n    const text = `Invalid endpoint - ${env.get('ENDPOINT_ID')}: ${!endpoint}, ${!endpoint.protocol}`\n    node.error(text);\n    node.status({ fill: 'red', shape: 'dot', text: text });\n    return [null, null];\n}\n\nif (!meta_table || !meta_table.sampling_mode || !meta_table.sampling_freq || !meta_table.protocol) {\n    const text = `Missing tag_table configuration - ${env.get('TAG_TABLE')}: ${!meta_table}, ${!meta_table.sampling_mode}, ${!meta_table.sampling_freq}, ${!meta_table.protocol}`;\n    node.error(text);\n    node.status({ fill: 'red', shape: 'dot', text: text });\n    return [null, null];\n}\n\nif (meta_table.protocol !== endpoint.protocol) {\n    const text = `Different protocols - ${env.get('TAG_TABLE')}: ${meta_table.protocol} / ${endpoint.protocol}`;\n    node.error(text);\n    node.status({ fill: 'red', shape: 'dot', text: text });\n    return [null, null];\n}\n\nif (!tag_table || !Array.isArray(tag_table) || tag_table.length === 0) {\n    const text = `Invalid tag table - ${env.get('TAG_TABLE')}: ${!tag_table}, ${!Array.isArray(tag_table)}, ${tag_table.length}`;\n    node.error(text);\n    node.status({ fill: 'red', shape: 'dot', text: text });\n    return [null, null];\n}\n\nmsg.period = timeToMilliseconds(meta_table.sampling_freq);\nmsg.endpoint = endpoint;\nmsg.tag_table = tag_table;\nmsg.meta_table = meta_table;\nmsg.isTrigger = ['Trigger', 'Trigger Custom', 'trigger', 'trigger_custom'].includes(meta_table.sampling_mode);\n\n// Topic Switch (for trigger messages)\nif (msg.topic === 'trigger') {\n    return [null, msg];\n} else if (msg.topic === 'trigger_sent') {\n    return [null, null];\n} else if (msg.topic === `insert_${msg.meta_table.name}` && msg.params && msg.params.length > 0) {\n    const localTime = msg.params[0].toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n    node.status({ fill: 'green', shape: 'dot', text: `Last Sample at ${localTime} - ${msg.params.length - 2} values` });\n    return [null, null];\n}\n\n// Protocol Switch (for other messages)\nlet test1 = undefined;\nlet test2 = undefined;\nlet test3 = undefined;\nlet test4 = undefined;\nswitch (endpoint.protocol) {\n    case 'S7': {\n        // const allowedKeys = ['topic', 'payload', '_msgid'];\n        // const msgKeys = Object.keys(msg);\n        // test1 = msgKeys.every(key => allowedKeys.includes(key));\n        // test2 = msgKeys.length === allowedKeys.length;\n        test3 = Object.keys(msg.payload).some(key => tag_table.map(t => t.name.toLowerCase()).includes(key.toLowerCase()));\n        isData = test3;\n        break;\n    }\n    case 'Modbus': {\n        node.status({ fill: 'yellow', shape: 'ring', text: 'Modbus protocol not implemented yet' });\n        return [null, null];\n    }\n    case 'OPC-UA': {\n        node.status({ fill: 'yellow', shape: 'ring', text: 'OPC-UA protocol not implemented yet' });\n        return [null, null];\n    }\n    case 'MQTT': {\n        node.status({ fill: 'yellow', shape: 'ring', text: 'MQTT protocol not implemented yet' });\n        return [null, null];\n    }\n    case 'HTTP': {\n        node.status({ fill: 'yellow', shape: 'ring', text: 'HTTP protocol not implemented yet' });\n        return [null, null];\n    }\n    default: {\n        node.error(`Invalid protocol - ${endpoint.protocol}`);\n        return [null, null];\n    }\n}\n\nif (isData) {\n    return [msg, null];\n} else {\n    node.error(`Invalid message format - ${endpoint.id}: ${endpoint.name} - ${env.get('TAG_TABLE')} - tests ${test1} ${test2} ${test3} ${test4}`);\n    return [null, null];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 180,
        "wires": [
            [
                "86615f513a209ccc"
            ],
            [
                "e0b7b86e0fe972d0"
            ]
        ]
    },
    {
        "id": "0f0a228ee2485f05",
        "type": "function",
        "z": "sf_data_handler",
        "name": "database_insert",
        "func": "// SQL Insert Query \n\nmsg.query = `\n\nINSERT INTO ${msg.meta_table.data_table} (created_at, endpoint, ${msg.tag_table.map(t => t.name).join(', ')}) VALUES ($1, $2, ${msg.tag_table.map((t, i) => `$${i + 3}`).join(', ')})\n\n`;\n\nmsg.params = [msg.created_at, msg.endpoint.id, ...msg.tag_table.map(t => msg.payload[t.name])];\n\nmsg.target = 'edge'\nmsg.topic = `insert_${msg.meta_table.name}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "483806c33bc652b3",
        "type": "status",
        "z": "sf_data_handler",
        "name": "",
        "scope": null,
        "x": 300,
        "y": 340,
        "wires": [
            [
                "414e445a894e624d"
            ]
        ]
    },
    {
        "id": "d1d8fe6d1551574e",
        "type": "catch",
        "z": "sf_data_handler",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "1e02bad20c4678c8",
                "7ec8f9fa6a551824"
            ]
        ]
    },
    {
        "id": "414e445a894e624d",
        "type": "function",
        "z": "sf_data_handler",
        "name": "status_filter",
        "func": "if (msg.status) {\n    msg.status.fill = msg.status.fill || \"green\";\n    msg.status.shape = msg.status.shape || \"dot\";\n    if (!msg.status.text) {\n        const localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n        msg.status.text = `last update: ${localTime}`;\n    }\n    return msg;\n}\nreturn null",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "0746e62dae658d4e",
        "type": "debug",
        "z": "sf_data_handler",
        "name": "DH - Switch IN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 280,
        "wires": []
    },
    {
        "id": "7ec8f9fa6a551824",
        "type": "debug",
        "z": "sf_data_handler",
        "name": "DH - Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 80,
        "wires": []
    },
    {
        "id": "3927eeaf023d23e0",
        "type": "status",
        "z": "sf_trigger_handler",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 240,
        "wires": [
            [
                "ad705621ff62a773"
            ]
        ]
    },
    {
        "id": "ad705621ff62a773",
        "type": "function",
        "z": "sf_trigger_handler",
        "name": "status_filter",
        "func": "if (msg.status) {\n    msg.status.fill = msg.status.fill || \"green\";\n    msg.status.shape = msg.status.shape || \"dot\";\n    if (!msg.status.text) {\n        const localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n        msg.status.text = `last update: ${localTime}`;\n    }\n    flow.set('lastStatus', msg.status);\n    return msg;\n}\nreturn null",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "0508d805f74e5f67",
        "type": "function",
        "z": "sf_trigger_handler",
        "name": "trigger_logic",
        "func": "let endpoint = context.get('endpoint');\nlet trigger = context.get('trigger');\nlet lastVal = context.get('lastVal');\nlet nowVal = undefined;\n\nif (msg.topic === 'trigger') {\n    const localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n    node.status({ fill: \"green\", shape: \"dot\", text: `${trigger.name} - Tiggered at ${localTime}` });\n    return { \n        topic: 'trigger',\n        time: localTime,\n        trigger: trigger,\n        payload: 'manual_trigger',\n        _msgid: msg._msgid \n    };\n}\n\n\nswitch (endpoint.protocol) {\n    case \"S7\":\n        nowVal = msg.payload[trigger.name];\n        break;\n    case \"Modbus\":\n        nowVal = msg.payload.values[trigger.name];\n        break;\n    case \"OPC-UA\":\n        nowVal = msg.payload[trigger.name];\n        break;\n    case \"HTTP\":\n        nowVal = msg.payload[trigger.name];\n        break;\n    case \"MQTT\":\n        nowVal = msg.payload[trigger.name];\n        break;\n    default:\n        node.status({fill:\"red\",shape:\"dot\",text:`protocol not recognised - ${endpoint.protocol}`});\n        break;\n}\n\n// node.status({fill:\"blue\",shape:\"dot\",text:`${trigger.name} - nv: ${nowVal}, lv: ${lastVal}`});\nif (nowVal !== lastVal) {\n    if (nowVal === undefined) {\n        node.status({ fill: \"red\", shape: \"dot\", text: `${trigger.name} not found` });\n        return null;\n    } \n    if (nowVal === null) {\n        node.status({ fill: \"yellow\", shape: \"dot\", text: `${trigger.name} has null value` });\n        return null;\n    }\n    context.set('lastVal', nowVal);\n    if(nowVal){\n        const localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n        node.status({ fill: \"green\", shape: \"dot\", text: `${trigger.name} - Tiggered at ${localTime}` });\n        return { \n            topic: 'trigger',\n            time: localTime,\n            trigger: trigger,\n            payload: nowVal,\n            _msgid: msg._msgid \n        };\n    }\n}\nlet lastStatus = flow.get('lastStatus');\nif (lastStatus.fill === \"green\" && lastStatus.shape !== \"ring\") {\n    node.status({ fill: lastStatus.fill, shape: \"ring\", text: lastStatus.text });\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "let trigger = global.get('triggers').find(t => t.id === env.get('TRIGGER_ID'));\nlet endpoint = global.get('endpoints').find(e => e.name === trigger.endpoint);\nlet meta_table = global.get('tag_tables').find(tt => tt.name === trigger.tag_table);\n\ncontext.set('trigger', trigger);\ncontext.set('endpoint', endpoint);\ncontext.set('meta_table', meta_table);",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 120,
        "wires": [
            [
                "a84afc21f8d88e98"
            ]
        ]
    },
    {
        "id": "f351a4ea0b3520c6",
        "type": "debug",
        "z": "sf_trigger_handler",
        "name": "TRIG IN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "a84afc21f8d88e98",
        "type": "debug",
        "z": "sf_trigger_handler",
        "name": "TRIG OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 80,
        "wires": []
    },
    {
        "id": "dc53367a90e2bbcd",
        "type": "catch",
        "z": "sf_trigger_handler",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 180,
        "wires": [
            [
                "c666567005681eae"
            ]
        ]
    },
    {
        "id": "ce7e8367bc04d90f",
        "type": "status",
        "z": "sf_simulator",
        "name": "",
        "scope": null,
        "x": 260,
        "y": 380,
        "wires": [
            [
                "1d780b05536feb75"
            ]
        ]
    },
    {
        "id": "5b66952a5a5486dd",
        "type": "function",
        "z": "sf_simulator",
        "name": "generate_data",
        "func": "// Function Node for Node-RED: Simulate Lime Kiln Data with cycle_time as the sum of other times\n\n// Utility function to generate random integer between min and max (inclusive)\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Utility function to generate random float between min and max with specified decimals\nfunction getRandomFloat(min, max, decimals = 2) {\n    const factor = Math.pow(10, decimals);\n    return Math.round((Math.random() * (max - min) + min) * factor) / factor;\n}\n\n// Utility function to get gaussian random number between min and max with factor precision\nfunction getGaussianRandom(min, max, decimals = 2) {\n    const factor = Math.pow(10, decimals);\n    let u = 0, v = 0;\n    while (u === 0) u = Math.random(); // Avoid zero\n    while (v === 0) v = Math.random(); // Avoid zero\n\n    // Box-Muller transform\n    let z = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n\n    // Normalize to the desired range\n    let mean = (max + min) / 2;\n    let stddev = (max - min) / 6; // Approx 99.7% of data within [min, max]\n\n    let value = mean + z * stddev;\n\n    // Clamp the value to stay within bounds and round it with the factor\n    value = Math.max(min, Math.min(max, value));\n    return Math.round(value * factor) / factor;\n}\n\n// Utility function to generate random float with waithed probability\nfunction getWeightedRandomItem(items) {\n    // 1) Get total weight\n    let totalWeight = 0;\n    for (let item of items) {\n        totalWeight += item.weight;\n    }\n\n    // 2) Generate a random number in [0, totalWeight)\n    let random = Math.random() * totalWeight;\n\n    // 3) Iterate until we find which key we land on\n    let sum = 0;\n    for (let item of items) {\n        sum += item.weight;\n        if (random <= sum) {\n            return item;\n        }\n    }\n    return items[-1];\n}\n\n// Helper function to distribute total time into 'count' random parts\nfunction distributeTime(total, count) {\n    if (count === 0) return [];\n    if (count === 1) return [total];\n\n    let points = [];\n    for (let i = 0; i < count - 1; i++) {\n        points.push(Math.random());\n    }\n    points.sort((a, b) => a - b);\n\n    let times = [];\n    let prev = 0;\n    for (let i = 0; i < points.length; i++) {\n        times.push(Math.round((points[i] - prev) * total));\n        prev = points[i];\n    }\n    times.push(Math.round((1 - prev) * total));\n\n    return times;\n}\n\n// Define Cycle Number and Shaft\nlet CY = (flow.get(\"CY\") || 0) + 1;\nflow.set(\"CY\", CY);\n\nlet S = flow.get(\"S\") || 1;\nS = S === 1 ? 2 : 1;\nflow.set('S', S);\n\n// Define setpoints\nlet TCYsp = context.get('TCYsp'); // Cycle time setpoint [s]\nlet TCOsp = context.get('TCOsp'); // Combustion time setpoint [s]\nlet TFSsp = context.get('TFSsp'); // Time fuel supply setpoint [s]\n\nlet LSCY1sp = context.get('LSCY1sp'); // Limestone for cycle, first charge - Setpoint [kg/cy]\nlet LSCY2sp = context.get('LSCY2sp'); // Limestone for cycle, second charge - Setpoint [kg/cy]\nlet LSCY3sp = context.get('LSCY3sp'); // Limestone for cycle, third charge - Setpoint [kg/cy]\nlet HCsp = context.get('HCsp'); // Heat consumption - Setpoint [kcal/kg]\nlet FCYsp = context.get('FCYsp'); // Fuel for Cycle - Setpoint [m3(n)/cy]\nlet EANsp = context.get('EANsp'); // Combustion air index (Excess of air) - Setpoint [#]\nlet ALCsp = context.get('ALCsp'); // Lime cooling air ratio - Setpoint [#]\n\n// Define cycle times for different operations\nlet TCY = 0;\nlet TCO = 0;\nlet TFS = 0;\nlet TI = 0;\n\nlet TWaitPar = context.get('TWaitPar') // weight for probaility, min time, max time\nlet TWaitAll = TWaitPar.reduce((acc, item) => ({ ...acc, [item.name]: 0 }), {});\n\nlet TOffPar = context.get('TOffPar') // weight for probaility, min time, max time\nlet TOffAll = TOffPar.reduce((acc, item) => ({ ...acc, [item.name]: 0 }), {});\n\n// Randomly generate maintenance or issue\nlet flag_maintenance = getRandomInt(0, 100) < context.get('maintenance_probability'); // % chance of maintenance\nlet flag_issue = getRandomInt(0, 100) < context.get('issue_probability'); // % chance of issue\n\n// Cycles with issues\nif (flag_issue) {\n    let issue = getWeightedRandomItem(TOffPar);\n    let time = getRandomFloat(issue.tRange[0], issue.tRange[1]);\n    for (let item of TOffPar) {\n        if (issue === item) { TOffAll[item.name] = time; }\n    }\n\n    flag_maintenance = getRandomInt(0, 100) < 50; // 50% chance of maintenance after issue\n\n    TCY = getRandomFloat(TCYsp * 0.2, TCYsp * 0.8);\n    TCO = getRandomFloat(Math.min(TCOsp * 0.1, TCY), Math.min(TCOsp * 0.8, TCY));\n    TFS = getRandomFloat(Math.min(TFSsp * 0.1, TCO), Math.min(TFSsp * 0.8, TCO));\n    TI = TCY - TCO;\n\n    // Cycles without issues\n} else {\n    TCY = getGaussianRandom(TCYsp * 0.9, TCYsp * 1.1);\n    TCO = getGaussianRandom(TCOsp * 0.9, Math.min(TCOsp * 1.1, TCY));\n    TFS = getGaussianRandom(TFSsp * 0.9, Math.min(TFSsp * 1.1, TCO));\n    TI = TCY - TCO;\n}\n\n// Cycles with maintenance\nif (flag_maintenance) {\n    for (let i = 0; i < getRandomInt(1, 3); i++) { // 1 to 3 maintenances types\n        let maintenance = getWeightedRandomItem(TWaitPar);\n        let time = getRandomFloat(maintenance.tRange[0], maintenance.tRange[1]);\n        for (let item of TWaitPar) {\n            if (maintenance === item) { TWaitAll[item.name] = time; }\n        }\n    }\n}\n\nlet TWait = Math.max(...Object.values(TWaitAll)); // max of all TWait values\nlet TOff = Math.max(...Object.values(TOffAll)); // max of all TOff values\nlet TStop = TWait + TOff;\n\nlet LSCYsp = LSCY1sp + LSCY2sp + LSCY3sp; // Limestone for cycle - Setpoint [kg/cy]\nlet LSCYpv = getGaussianRandom(LSCYsp * 0.9, LSCYsp * 1.1); // Limestone for cycle - Process Value [kg/cy]\nlet LCY = getGaussianRandom(LSCYpv * 0.7, LSCYpv * 0.9); // Lime for cycle [kg/cy]\nlet NP = LCY / (TCY + TStop) * 86.4; // Nominal production [tpd]\n\nlet S1PS = getGaussianRandom(LCY / 15, LCY / 10, 0); // Shaft 1 - Prim Number of Strokes\nlet S1SS = getGaussianRandom(LCY / 15, LCY / 10, 0); // Shaft 1 - Sec Number of Strokes\nlet S2PS = getGaussianRandom(LCY / 15, LCY / 10, 0); // Shaft 2 - Prim- Number of Strokes\nlet S2SS = getGaussianRandom(LCY / 15, LCY / 10, 0); // Shaft 2 - Sec- Number of Strokes\nlet S1tot = S1PS + S1SS; // Shaft 1 - Number of Total Strokes [#]\nlet S2tot = S2PS + S2SS; // Shaft 2 - Number of Total Strokes [#]\n\nlet ATMP = getGaussianRandom(1000, 1020); // Barometric pressure [mbar]\n\n// flow set: TCY, TOff, TWait\nflow.set('TCY', TCY);\nflow.set('TOff', TOff);\nflow.set('TWait', TWait);\n\n// Return the initial values for the simulation\nconst initialValues = {\n    CY: CY, // Progressive Cycle Number (1 to 99999)[#]\n    S: S, // Shaft in combustion [#]\n    TCY: TCY, // Cycle time [s]\n    TCO: TCO, // Combustion time [s]\n    TI: TI, // Inversion time [s]\n    TStop: TStop, // Time Cycle Disabled [s]\n    TFS: TFS, // Time fuel supply [s]\n    LSCYpv: LSCYpv, // Limestone for cycle - Process Value [kg/cy]\n    LSCYsp: LSCYsp, // Limestone for cycle - Setpoint [kg/cy]\n    LCY: LCY, // Lime for cycle [kg/cy]\n    NP: NP, // Nominal production [tpd]\n    HCpv: getGaussianRandom(5000 * 0.9, 5000 * 1.1), // Heat consumption - Process Value [kcal/kg]\n    HCsp: 5000, // Heat consumption - Setpoint [kcal/kg]\n    FCYpv: getGaussianRandom(60 * 0.9, 60 * 1.1), // Fuel for cycle Process Value [Nm3/cy]\n    FCYsp: 60, // Fuel for Cycle - Setpoint [m3(n)/cy]\n    FFpv: getGaussianRandom(100 * 0.9, 100 * 1.1), // Fuel flow - Process Value [Nm3/h]\n    FFsp: 100, // Fuel Flow - Set Point\n    LHV: 7000, // Low heat value [kacl/Nm3]\n    SA: 25, // Stoichiometric air [#]\n    CAF: getGaussianRandom(300 * 0.9, 300 * 1.1), // Combustion air flow [Nm3/h]\n    EANpv: getGaussianRandom(30 * 0.9, 30 * 1.1), // Combustion air index - Process Value [#]\n    EANsp: 30, // Combustion air index (Excess of air) - Setpoint [#]\n    LCAF: getGaussianRandom(400 * 0.9, 400 * 1.1), // Lime cooling air flow [Nm3/h]\n    ALCpv: getGaussianRandom(40 * 0.9, 40 * 1.1),  // Lime cooling air ratio - Process Value [#]\n    ALCsp: 40, // Lime cooling air ratio - Setpoint [#]\n    TC1: getGaussianRandom(90, 110), // Channel temperature 1 [�C]\n    TC2: getGaussianRandom(90, 110), // Channel temperature 2 [�C]\n    TWG: getGaussianRandom(120, 140), // Waste gases temperature-outlet kiln [�C]\n    TFLT: getGaussianRandom(90, 110), // Waste gases temperature-inlet kiln filter [�C]\n    LT1: getGaussianRandom(350, 400), // Skip side Shaft 1 - lime temperature (Inspection door ZS204101)\n    LT2: getGaussianRandom(150, 250), // External side Shaft 1 - lime temperature (Inspection door ZS204102)\n    LT3: getGaussianRandom(150, 250), // External side Shaft 1 - lime temperature (Inspection door ZS204103)\n    LT4: getGaussianRandom(500, 700), // Pipe side Shaft 1 - lime temperature (Inspection door ZS204104)\n    LT5: getGaussianRandom(500, 700), // Pipe side Shaft 1 - lime temperature (Inspection door ZS204105)\n    LT6: getGaussianRandom(600, 800), // Internal side Shaft 1 - lime temperature (Inspection door ZS204106)\n    LT7: getGaussianRandom(600, 800), // Internal side Shaft 1 - lime temperature (Inspection door ZS204107)\n    LT8: getGaussianRandom(350, 400), // Skip side Shaft 1 - lime temperature (Inspection door ZS204109)\n    LT9: getGaussianRandom(350, 400), // Skip side Shaft 2 - lime temperature (Inspection door ZS204201)\n    LT10: getGaussianRandom(150, 250), // External side Shaft 2 - lime temperature (Inspection door ZS204202)\n    LT11: getGaussianRandom(150, 250), // External side Shaft 2 - lime temperature (Inspection door ZS204203)\n    LT12: getGaussianRandom(500, 700), // Pipe side Shaft 2 - lime temperature (Inspection door ZS204204)\n    LT13: getGaussianRandom(500, 700), // Pipe side Shaft 2 - lime temperature (Inspection door ZS204205)\n    LT14: getGaussianRandom(600, 800), // Internal side Shaft 2 - lime temperature (Inspection door ZS204206)\n    LT15: getGaussianRandom(600, 800), // Internal side Shaft 2 - lime temperature (Inspection door ZS204207)\n    LT16: getGaussianRandom(350, 400), // Skip side Shaft 2 - lime temperature (Inspection door ZS204209)\n    CBAP: getGaussianRandom(50, 100), // Combustion air pressure [mbar]\n    CLAP: getGaussianRandom(50, 100), // Lime cooling air pressure [mbar]\n    CHAP: getGaussianRandom(50, 100), // Channel air pressure [mbar]\n    CTAP: getGaussianRandom(50, 100), // Transport air pressure [mbar]\n    ATMP: ATMP, // Barometric pressure [mbar]\n    LCAPS1: getGaussianRandom(50, 100), // Shaft 1 - Lances cooling / Final injection air pressure [mbar]\n    LCAPS2: getGaussianRandom(50, 100), // Shaft 2 - Lances cooling / Final injection air pressure [mbar]\n    S1tot: S1tot, // Shaft 1 - Number of Total Strokes [#]\n    S1PS: S1PS, // Shaft 1 - Prim Number of Strokes\n    S1SS: S1SS, // Shaft 1 - Sec Number of Strokes\n    S2tot: S2tot, // Shaft 2 - Number of Total Strokes [#]\n    S2PS: S2PS, // Shaft 2 - Prim- Number of Strokes\n    S2SS: S2SS, // Shaft 2 - Sec- Number of Strokes\n    DBLINE1: getGaussianRandom(0, 5), // Delta pressure line 1 - Fuel coal [mbar]\n    DBLINE2: getGaussianRandom(0, 5), // Delta pressure line 2 - Fuel coal [mbar]\n    DBLINE3: getGaussianRandom(0, 5), // Delta pressure line 3 - Fuel coal [mbar]\n    DBLINE4: getGaussianRandom(0, 5), // Delta pressure line 4 - Fuel coal [mbar]\n    DBLINE5: getGaussianRandom(0, 5), // Delta pressure line 5 - Fuel coal [mbar]\n    DBLINE6: getGaussianRandom(0, 5), // Delta pressure line 6 - Fuel coal [mbar]\n    DBLINE7: getGaussianRandom(0, 5), // Delta pressure line 7 - Fuel coal [mbar]\n    DBLINE8: getGaussianRandom(0, 5), // Delta pressure line 8 - Fuel coal [mbar]\n    DBLINE9: getGaussianRandom(0, 5), // Delta pressure line 9 - Fuel coal [mbar]\n    RATIOS1LN1: getGaussianRandom(90, 100), // Shaft 1 - Speed ratio line 1 [%]\n    RATIOS1LN2: getGaussianRandom(90, 100), // Shaft 1 - Speed ratio line 2 [%]\n    RATIOS1LN3: getGaussianRandom(90, 100), // Shaft 1 - Speed ratio line 3 [%]\n    RATIOS1LN4: getGaussianRandom(90, 100), // Shaft 1 - Speed ratio line 4 [%]\n    RATIOS1LN5: getGaussianRandom(90, 100), // Shaft 1 - Speed ratio line 5 [%]\n    RATIOS1LN6: getGaussianRandom(90, 100), // Shaft 1 - Speed ratio line 6 [%]\n    RATIOS1LN7: getGaussianRandom(90, 100), // Shaft 1 - Speed ratio line 7 [%]\n    RATIOS1LN8: getGaussianRandom(90, 100), // Shaft 1 - Speed ratio line 8 [%]\n    RATIOS1LN9: getGaussianRandom(90, 100), // Shaft 1 - Speed ratio line 9 [%]\n    RATIOS2LN1: getGaussianRandom(90, 100), // Shaft 2 - Speed ratio line 1 [%]\n    RATIOS2LN2: getGaussianRandom(90, 100), // Shaft 2 - Speed ratio line 2 [%]\n    RATIOS2LN3: getGaussianRandom(90, 100), // Shaft 2 - Speed ratio line 3 [%]\n    RATIOS2LN4: getGaussianRandom(90, 100), // Shaft 2 - Speed ratio line 4 [%]\n    RATIOS2LN5: getGaussianRandom(90, 100), // Shaft 2 - Speed ratio line 5 [%]\n    RATIOS2LN6: getGaussianRandom(90, 100), // Shaft 2 - Speed ratio line 6 [%]\n    RATIOS2LN7: getGaussianRandom(90, 100), // Shaft 2 - Speed ratio line 7 [%]\n    RATIOS2LN8: getGaussianRandom(90, 100), // Shaft 2 - Speed ratio line 8 [%]\n    RATIOS2LN9: getGaussianRandom(90, 100), // Shaft 2 - Speed ratio line 9 [%]\n    S1SPEEDL1: getGaussianRandom(10, 20), // Shaft 1 - Speed line 1 - Process value [rpm]\n    S1SPEEDL2: getGaussianRandom(10, 20), // Shaft 1 - Speed line 2 - Process value [rpm]\n    S1SPEEDL3: getGaussianRandom(10, 20), // Shaft 1 - Speed line 3 - Process value [rpm]\n    S1SPEEDL4: getGaussianRandom(10, 20), // Shaft 1 - Speed line 4 - Process value [rpm]\n    S1SPEEDL5: getGaussianRandom(10, 20), // Shaft 1 - Speed line 5 - Process value [rpm]\n    S1SPEEDL6: getGaussianRandom(10, 20), // Shaft 1 - Speed line 6 - Process value [rpm]\n    S1SPEEDL7: getGaussianRandom(10, 20), // Shaft 1 - Speed line 7 - Process value [rpm]\n    S1SPEEDL8: getGaussianRandom(10, 20), // Shaft 1 - Speed line 8 - Process value [rpm]\n    S1SPEEDL9: getGaussianRandom(10, 20), // Shaft 1 - Speed line 9 - Process value [rpm]\n    S2SPEEDL1: getGaussianRandom(10, 20), // Shaft 2 - Speed line 1 - Process value [rpm]\n    S2SPEEDL2: getGaussianRandom(10, 20), // Shaft 2 - Speed line 2 - Process value [rpm]\n    S2SPEEDL3: getGaussianRandom(10, 20), // Shaft 2 - Speed line 3 - Process value [rpm]\n    S2SPEEDL4: getGaussianRandom(10, 20), // Shaft 2 - Speed line 4 - Process value [rpm]\n    S2SPEEDL5: getGaussianRandom(10, 20), // Shaft 2 - Speed line 5 - Process value [rpm]\n    S2SPEEDL6: getGaussianRandom(10, 20), // Shaft 2 - Speed line 6 - Process value [rpm]\n    S2SPEEDL7: getGaussianRandom(10, 20), // Shaft 2 - Speed line 7 - Process value [rpm]\n    S2SPEEDL8: getGaussianRandom(10, 20), // Shaft 2 - Speed line 8 - Process value [rpm]\n    S2SPEEDL9: getGaussianRandom(10, 20), // Shaft 2 - Speed line 9 - Process value [rpm]\n    COALTANKP: getGaussianRandom(200, 250), // Fuel Coal - Pressure weighed tank T235301_1 [mbar]\n    COALTANKT: getGaussianRandom(200, 250), // Fuel Coal - Temperature weighed tank T235301_1 [�C]\n    HYT: getGaussianRandom(20, 30), // Hydraulic Oil - Temperature [�C]\n    HYP: getGaussianRandom(150, 200), // Hydraulic Oil - Pressure [bar]\n    TWait: TWait, // Waitnig Time [s]\n    TOff: TOff, // Unavailability time [s]\n    TWait1: TWaitAll.TWait1, // Drawer Sampling [s]\n    TWait2: TWaitAll.TWait2, // Valves time maintenance [s]\n    TWait3: TWaitAll.TWait3, // Hydraulic oil unit time maintenance [s]\n    TWait4: TWaitAll.TWait4, // Hydraulic oil plant time maintenance [s]\n    TWait5: TWaitAll.TWait5, // Blower time maintenance [s]\n    TWait6: TWaitAll.TWait6, // Skip time maintenance [s]\n    TWait7: TWaitAll.TWait7, // Weighed hopper calibration [s]\n    TWait8: TWaitAll.TWait8, // Coal weighed tank calibration [s]\n    TWait9: TWaitAll.TWait9, // Other maintenance [s]\n    TOff1: TOffAll.TOff1, // Mechanical issue [s]\n    TOff2: TOffAll.TOff2, // Electrical issue [s]\n    TOff3: TOffAll.TOff3, // Process issue[s]\n    TOff4: TOffAll.TOff4, // Other issue [s]\n    SKIP_ULD1CHpv: getGaussianRandom(40, 60), // ULD skip side position at first charge - Process Value [%]\n    PIPE_ULD1CHpv: getGaussianRandom(40, 60), // ULD pipe side position at first charge - Process Value [%]\n    ULD1CHsp: 50, // ULD position at first charge - Setpoint [%]\n    SKIP_ULD2CHpv: getGaussianRandom(40, 60), // ULD skip side position at second charge - Process Value [%]\n    PIPE_ULD2CHpv: getGaussianRandom(40, 60), // ULD pipe side position at second charge - Process Value [%]\n    ULD2CHsp: 50, // ULD position at second charge - Setpoint [%]\n    SKIP_ULD3CHpv: getGaussianRandom(40, 60), // ULD skip side position at third charge - Process Value [%]\n    PIPE_ULD3CHpv: getGaussianRandom(40, 60), // ULD pipe side position at third charge - Process Value [%]\n    ULD3CHsp: 50, // ULD position at third charge - Setpoint [%]\n    LSCY1pv: getGaussianRandom(LSCY1sp * 0.9, LSCY1sp * 1.1), // LSCY at first charge - Process Value [Kg]\n    LSCY1sp: LSCY1sp, // LSCY at first charge - Setpoint [Kg]\n    LSCY2pv: getGaussianRandom(LSCY1sp * 0.9, LSCY1sp * 1.1), // LSCY at second charge - Process Value [Kg]\n    LSCY2sp: LSCY2sp, // LSCY at second charge - Setpoint [Kg]\n    LSCY3pv: getGaussianRandom(LSCY1sp * 0.9, LSCY1sp * 1.1), // LSCY at third charge - Process Value [Kg]\n    LSCY3sp: LSCY3sp, // LSCY at third charge - Setpoint [Kg]\n    TCH1: getGaussianRandom(TCY * 0.1, TCY * 0.15), // Time first charge [s]\n    TCH2: getGaussianRandom(TCY * 0.2, TCY * 0.25), // Time second charge [s]\n    TCH3: getGaussianRandom(TCY * 0.3, TCY * 0.35), // Time third charge [s]\n    LSTARCMB: getGaussianRandom(10, 25), // Level position in shaft in combustion at cycle start [%]\n    LSTOPCMB: getGaussianRandom(90, 100), // Level position in shaft in combustion at cycle end [%]\n    LSTARPRH: getGaussianRandom(10, 25), // Level position in shaft in preheating at cycle start [%]\n    LSTOPPRH: getGaussianRandom(90, 100), // Level position in shaft in preheating at cycle end [%]\n    LVLCMBsp: getGaussianRandom(40, 50), // Setpoint level in shaft in combustion [%]\n    LVLPRHsp: getGaussianRandom(30, 40), // Setpoint level in shaft in preheating [%]\n    EXTCMB: 0, // Extraction Mode in Combustion [0=By level; 1=By Strokes] [#]\n    EXTPRH: 0, // Extraction Mode in Preheating [0=By level; 1=By Strokes] [#]\n    S1EXTAUTO: 1, // Shaft 1 - Drawmatic in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]\n    S2EXTAUTO: 1, // Shaft 2 - Drawmatic in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]\n    S1MNRATIO: 100, // Shaft 1 - Ratio Setpoint of Strokes main drawer [#]\n    S1SCRATIO: 99, // Shaft 1 - Ratio Setpoint of Strokes secondary drawer [#]\n    S1FSTLVL: 5, // Shaft 1 - Delay start fast extraction in level mode [s]\n    S1STROKsp: Math.round(S1tot / 10) * 10, // Shaft 1 - Setpoint of total strokes [#]\n    S1SDELAYsp: 2, // Shaft 1 - Setpoint delay time between two strokes [s]\n    S1FSTSTRT: 4, // Shaft 1 - Delay start fast extraction in strokes mode [s]\n    S2MNRATIO: 98, // Shaft 2 - Ratio Setpoint of Strokes main drawer [#]\n    S2SCRATIO: 97, // Shaft 2 - Ratio Setpoint of Strokes secondary drawer [#]\n    S2FSTLVL: 6, // Shaft 2 - Delay start fast extraction in level mode [s]\n    S2STROKsp: Math.round(S2tot / 10) * 10, // Shaft 2 - Setpoint of total strokes [#]\n    S2SDELAYsp: 3, // Shaft 2 - Setpoint delay time between two strokes [s]\n    S2FSTSTR: 7, // Shaft 2 - Delay start fast extraction in strokes mode [s]\n    EANAUTO: 1, // EANMATIC in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]\n    ALCAUTO: 1, // COOLMATIC in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]\n    FUELAUTO: 1, // FUELMATIC in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]\n    FILTERAUTO: 1, // FILTERMATIC in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]\n    REDAUTO: 1, // FIREREDUCTION in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]\n    CUTAUTO: 1, // FIRECUT in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]\n    TSTRREDsp: 1000, // Temperature Setpoint for start fuel reduction [�C]\n    TSTPREDsp: 900, // Temperature Setpoint for stop fuel reduction [�C]\n    PERCREDsp: 20, // Percentage of fuel reduction [%]\n    TSTRCUTsp: 1100, // Temperature Setpoint for start fuel cut [�C]\n    TSTPCUTsp: 1000, // Temperature Setpoint for stop fuel cut [�C]\n    REDENABL: 1, // Fuel reduction enabled during last cycle [#]\n    REDTIMEpv: TCYsp * 0.2, // Working time of Fuel reduction during last cycle [s]\n    CUTENABL: 1, // Fuel cut enabled during last cycle [#]\n    CUTTIMEpv: TCYsp * 0.1, // Working time of Fuel cut during last cycle [s]\n    PATM: ATMP, // Barometric Pressure [mbar]\n    FCVS1pv: getGaussianRandom(75, 85), // FCV Lime cooling valve - Shaft 1 - Process value [%]\n    FCVS1sp: 80, // FCV Lime cooling valve - Shaft 1 - Setpoint [%]\n    FCVS1AUTO: 1, // Shaft 1 - Flow Control Valve in auto mode [0=Manual Mode; 1=Automatic Mode] [#]\n    FCVS2pv: getGaussianRandom(75, 85), // FCV Lime cooling valve - Shaft 2 - Process value [%]\n    FCVS2sp: 80, // FCV Lime cooling valve - Shaft 2 - Setpoint [%]\n    FCVS2AUTO: 1, // Shaft 2 - Flow Control Valve in auto mode [0=Manual Mode; 1=Automatic Mode] [#]\n    CMB1pv: getGaussianRandom(1800 * 0.9, 1800 * 1.1), // Combustion Air Blower 1 - Speed - Process Value [rpm]\n    CMB1sp: 1800, // Combustion Air Blower 1 - Speed - Setpoint [rpm]\n    CMB2pv: getGaussianRandom(2000 * 0.9, 2000 * 1.1), // Combustion Air Blower 2 - Speed - Process Value [rpm]\n    CMB2SP: 2000, // Combustion Air Blower 2 - Speed - Set Point [rpm]\n    CMB3pv: getGaussianRandom(2200 * 0.9, 2200 * 1.1), // Combustion Air Blower 3 - Speed - Process Value [rpm]\n    CMB3sp: 2200, // Combustion Air Blower 3 - Speed - Set Point [rpm]\n    LCB1pv: getGaussianRandom(2000 * 0.9, 2000 * 1.1), // Lime Cooling Air Blower 1 - Speed - Process Value [rpm]\n    LCB1sp: 2000, // Lime Cooling Air Blower 1 - Speed - Setpoint [rpm]\n    LCB2pv: getGaussianRandom(2400 * 0.9, 2400 * 1.1), // Lime Cooling Air Blower 2 - Speed - Process Value [rpm]\n    LCB2sp: 2400, // Lime Cooling Air Blower 2 - Speed - Set Point [rpm]\n    FANpv: getGaussianRandom(1200 * 0.9, 1200 * 1.1), // Filter Fan - Speed - Process Value [rpm]\n    FANsp: 1200, // Filter Fan - Speed - Setpoint [rpm]\n    S1CAPSPpv: getGaussianRandom(1800 * 0.9, 1800 * 1.1), // Shaft 1 - Lances cooling blower - Speed - Process value [rpm]\n    S1CAPSPsp: 1800, // Shaft 1 - Lances cooling blower - Speed - Setpoint [rpm]\n    S2CAPSPpv: getGaussianRandom(1800 * 0.9, 1800 * 1.1), // Shaft 2 - Lances cooling blower - Speed - Process value [rpm]\n    S2CAPSPsp: 1800, // Shaft 2 - Lances cooling blower - Speed - Setpoint [rpm]\n    CTBSPpv: getGaussianRandom(1400 * 0.9, 1400 * 1.1), // Transport air - Speed - Process value [rpm]\n    CTBSPsp: 1400, // Transport air - Speed - Setpoint [rpm]\n    CMB1CUR: getGaussianRandom(150, 200), // Combustion Air Blower 1 - Current - Process Value\n    CMB2CUR: getGaussianRandom(150, 200), // Combustion Air Blower 2 - Current - Process Value\n    CMB3CUR: getGaussianRandom(150, 200), // Combustion Air Blower 3 - Current - Process Value\n    LCB1CUR: getGaussianRandom(150, 200), // Lime Cooling Air Blower 1 - Current - Process Value\n    LCB2CUR: getGaussianRandom(150, 200), // Lime Cooling Air Blower 2 - Current - Process Value\n    FANCUR: getGaussianRandom(100, 150), // Filter Fan - Current - Process Value\n    S1CAPCUR: getGaussianRandom(150, 200), // Shaft 1 - Lance cooling blower - Current - Process value\n    S2CAPCUR: getGaussianRandom(150, 200), // Shaft 2 - Lance cooling blower - Current - Process value\n    CTBCURR: getGaussianRandom(200, 250), // Transport air - Current - Process value\n    HYDP1CUR: getGaussianRandom(75, 100), // Hydraulic Unit - Pump 1 - Current\n    HYDP2CUR: getGaussianRandom(75, 100), // Hydraulic Unit - Pump 2 - Current\n};\n\n/*\n// Generate simulated data\nlet initialValues = {\n    CY: CY,\n    \n    // Production Data\n    S: shaft, // e.g., number of combustions\n    limestone_cycle: getRandomFloat(100.0, 500.0), // tons per cycle\n    limestone_cycle_setpoint: 400.0, // target tons per cycle\n    lime_cycle: getRandomFloat(200.0, 600.0), // tons produced per cycle\n    nominal_prod: 500.0, // nominal production capacity in tons\n    shaft1_strokes: getRandomInt(1000, 5000),\n    shaft2_strokes: getRandomInt(1000, 5000),\n    \n    // Fuel Data\n    heat_consumption: getRandomFloat(1000.0, 5000.0), // e.g., kJ\n    heat_consumption_setpoint: 4000.0,\n    fuel_cycle: getRandomFloat(200.0, 800.0), // liters per cycle\n    fuel_cycle_setpoint: 600.0,\n    fuel_flow: getRandomFloat(50.0, 300.0), // liters per hour\n    fuel_flow_setpoint: 250.0,\n    natural_gas_output_regulator: getRandomFloat(1.0, 5.0), // regulator setting\n    \n    // Air Data\n    low_heat_val_air_calc: getRandomFloat(0.5, 2.0),\n    stoich_air_calc: getRandomFloat(1.0, 3.0),\n    combustion_air_flow_theo: getRandomFloat(500.0, 1500.0), // theoretical air flow\n    combustion_air_flow: getRandomFloat(450.0, 1600.0),\n    combustion_air_index: getRandomFloat(0.95, 1.05),\n    combustion_air_index_setpoint: 1.00,\n    combustion_air_blower_speed: getRandomFloat(1500.0, 2500.0), // RPM\n    combustion_air_blower_speed_setpoint: 2000.0,\n    cool_air_flow_theo: getRandomFloat(300.0, 1000.0),\n    cool_air_flow: getRandomFloat(350.0, 950.0),\n    cool_air_ratio: getRandomFloat(1.0, 2.0),\n    cool_air_ratio_setpoint: 1.5,\n    cool_air_blower_speed: getRandomFloat(1000.0, 2000.0),\n    cool_air_blower_speed_setpoint: 1500.0,\n    \n    // Temperatures\n    channel_temp1: getRandomFloat(200.0, 800.0), // °C\n    channel_temp2: getRandomFloat(200.0, 800.0),\n    waste_gases_temp_outlet_kiln: getRandomFloat(300.0, 900.0),\n    waste_gases_temp_inlet_kiln_filter: getRandomFloat(150.0, 400.0),\n    shaft1_drawer_pipe_temp: getRandomFloat(100.0, 300.0),\n    shaft1_drawer_skip_temp: getRandomFloat(100.0, 300.0),\n    shaft2_drawer_pipe_temp: getRandomFloat(100.0, 300.0),\n    shaft2_drawer_skip_temp: getRandomFloat(100.0, 300.0),\n    natural_gas_temp: getRandomFloat(20.0, 100.0), // °C\n    hydraulic_oil_temp: getRandomFloat(40.0, 90.0), // °C\n    \n    // Pressures\n    combustion_air_pressure: getRandomFloat(1.0, 5.0), // bar\n    lime_cool_air_pressure: getRandomFloat(1.0, 5.0),\n    channel_air_pressure: getRandomFloat(1.0, 5.0),\n    shaft1_lances_cool_air_pressure: getRandomFloat(1.0, 5.0),\n    shaft2_lances_cool_air_pressure: getRandomFloat(1.0, 5.0),\n    natural_gas_pressure: getRandomFloat(1.0, 5.0),\n    hydraulic_oil_pressure: getRandomFloat(10.0, 100.0), // bar\n    \n    // Cycle Times (to be defined below)\n    // cycle_time will be set as the sum of the following times:\n    // combustion_time, inversion_time, cycle_disabled_time, fuel_supply_time,\n    // waiting_time, unavailability_time, drawer_sampling_time, valves_maint_time,\n    // hyd_oil_unit_maint_time, hyd_oil_plant_maint_time, blower_maint_time,\n    // skip_maint_time, limestone_hopper_time, other_maint_time,\n    // mechanical_issue_time, electrical_issue_time, process_issue_time,\n    // other_issue_time\n};\n\n// Define cycle_time between 10 and 15 minutes (600 to 900 seconds)\nlet cycle_time = getRandomInt(600, 900); // in seconds\npayload.cycle_time = cycle_time;\n\n// List of other time-related variables to distribute cycle_time\nlet timeVariables = [\n    \"combustion_time\",\n    \"inversion_time\",\n    \"cycle_disabled_time\",\n    \"fuel_supply_time\",\n    \"waiting_time\",\n    \"unavailability_time\",\n    \"drawer_sampling_time\",\n    \"valves_maint_time\",\n    \"hyd_oil_unit_maint_time\",\n    \"hyd_oil_plant_maint_time\",\n    \"blower_maint_time\",\n    \"skip_maint_time\",\n    \"limestone_hopper_time\",\n    \"other_maint_time\",\n    \"mechanical_issue_time\",\n    \"electrical_issue_time\",\n    \"process_issue_time\",\n    \"other_issue_time\"\n];\n\n// Distribute cycle_time among the other time variables\nlet distributedTimes = distributeTime(cycle_time, timeVariables.length);\n\n// Assign the distributed times to the payload\nfor (let i = 0; i < timeVariables.length; i++) {\n    payload[timeVariables[i]] = distributedTimes[i];\n}\n\n// Continue assigning other variables that are not part of cycle_time\n// Example: If there are other variables not related to cycle_time, assign them here\n// (In this case, all time-related variables are handled above)\n\n*/\n\n\n// Assign the payload to msg.payload\nmsg.topic = \"start\";\nmsg.payload = initialValues;\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Define setpoints and parameters for the simulation\n\ncontext.set('maintenance_probability', 10); // Maintenance probability [%]\ncontext.set('issue_probability', 1); // Issue probability [%]\n\nlet TCYsp = env.get('CYCLE_TIME'); // Cycle time setpoint [s]\ncontext.set('TCYsp', TCYsp);\ncontext.set('TCOsp', 750.0); // Combustion time setpoint [s]\ncontext.set('TFSsp', 600.0); // Time fuel supply setpoint [s]\n\ncontext.set('LSCY1sp', 1800.0); // Limestone for cycle, first charge - Setpoint [kg/cy]\ncontext.set('LSCY2sp', 1200.0); // Limestone for cycle, second charge - Setpoint [kg/cy]\ncontext.set('LSCY3sp', 1200.0); // Limestone for cycle, third charge - Setpoint [kg/cy]\ncontext.set('HCsp', 5000.0); // Heat consumption - Setpoint [kcal/kg]\ncontext.set('FCYsp', 1800.0); // Fuel for Cycle - Setpoint [m3(n)/cy]\ncontext.set('EANsp', 25.0); // Combustion air index (Excess of air) - Setpoint [#]\ncontext.set('ALCsp', 40.0); // Lime cooling air ratio - Setpoint [#]\n\n\nlet TWaitPar = [  // weight for probaility, min time, max time\n    { name: 'TWait1', weight: 0.65, tRange: [TCYsp * 0.05, TCYsp * 0.15] },  // Drawer Sampling [s]\t\n    { name: 'TWait2', weight: 0.05, tRange: [TCYsp * 0.2, TCYsp * 0.8] },  // Valves Maintenance [s]\n    { name: 'TWait3', weight: 0.05, tRange: [TCYsp * 0.8, TCYsp * 2.0] },  // Hydraulic Oil Unit Maintenance [s]\n    { name: 'TWait4', weight: 0.05, tRange: [TCYsp * 1.0, TCYsp * 3.0] },  // Hydraulic Oil Plant Maintenance [s]\n    { name: 'TWait5', weight: 0.05, tRange: [TCYsp * 0.5, TCYsp * 1.5] },  // Blower Maintenance [s]\n    { name: 'TWait6', weight: 0.05, tRange: [TCYsp * 0.4, TCYsp * 2.0] },  // Skip Maintenance [s]\n    { name: 'TWait7', weight: 0.02, tRange: [TCYsp * 0.2, TCYsp * 0.4] },  // Weighed hopper calibration [s]\n    { name: 'TWait8', weight: 0.02, tRange: [TCYsp * 0.2, TCYsp * 0.5] },  // Coal weighed tank calibration [s]\n    { name: 'TWait9', weight: 0.06, tRange: [TCYsp * 0.5, TCYsp * 2.0] }   // Other Maintenance [s]\n];\ncontext.set('TWaitPar', TWaitPar);\n\nlet TOffPar = [  // weight for probaility, min time, max time\n    { name: 'TOff1', weight: 0.30, tRange: [TCYsp * 1.0, TCYsp * 3.0] },   // Mechanical Issue [s]\n    { name: 'TOff2', weight: 0.20, tRange: [TCYsp * 0.5, TCYsp * 2.0] },   // Electrical Issue [s]\n    { name: 'TOff3', weight: 0.30, tRange: [TCYsp * 0.5, TCYsp * 2.0] },   // Process Issue [s]\n    { name: 'TOff4', weight: 0.20, tRange: [TCYsp * 0.5, TCYsp * 3.0] }    // Other Issue [s]\n];\ncontext.set('TOffPar', TOffPar);\n\n// Reset simulation running status\ncontext.set('simulationRunning', false);",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 120,
        "wires": [
            [
                "897168b439eba41b",
                "b84b821ab043f0a0"
            ]
        ]
    },
    {
        "id": "897168b439eba41b",
        "type": "function",
        "z": "sf_simulator",
        "name": "insert_data",
        "func": "// Node-RED function node JavaScript code to generate an INSERT query for PostgreSQL\n\n// Fetch the global variable storing the table definition\nmsg.tag_table = env.get('TAG_TABLE');\nmsg.data_table = env.get('DATA_TABLE');\nmsg.endpoint_id = env.get('ENDPOINT_ID');\n\nconst payload = msg.payload;\n\n// Filter only the columns that are enabled\nconst table = global.get(msg.tag_table)\nconst enabledColumns = table.filter(col => col.enabled);\n\n// Generate column names and values based on the payload, adding 'created_at' and 'endpoint' first\nconst create_at = msg.time || new Date();\nconst columns = ['created_at', 'endpoint', ...enabledColumns.map(col => col.name)];\nconst values = [new Date(create_at).toISOString(), msg.endpoint_id, ...enabledColumns.map(col => payload[col.name])];\n\n// Generate the SQL query string using parameterized queries\nmsg.query = `INSERT INTO ${msg.data_table} (${columns.join(', ')}) VALUES (${columns.map((_, index) => `$${index + 1}`).join(', ')})`;\nmsg.params = values;\n\n// Return the message object with the generated query and parameters\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "28b05381dcc5cbb9",
        "type": "function",
        "z": "sf_simulator",
        "name": "select_last_data",
        "func": "let table_name = env.get('DATA_TABLE');\nlet endpoint = env.get('ENDPOINT_ID');\n\nif (msg.error) {\n    node.error(msg.error.message, msg)\n    node.status({ fill: 'red', shape: 'ring', text: `${msg.error.message}` });\n    return null;\n}\n\nmsg = {};\nmsg.topic = \"update\";\n\nmsg.query = `\n\nSELECT created_at, CY, TCY, TOff, TWait\nFROM ${table_name}\nWHERE endpoint = ${endpoint}\nORDER BY CY DESC\nLIMIT 1\n\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7828819b3b6a017d",
        "type": "function",
        "z": "sf_simulator",
        "name": "simulation_trigger",
        "func": "// Get flow context values\nlet last_time = new Date(flow.get('last_time')) || new Date();\nlet last_CY = flow.get('CY') || 0;\nlet last_TCY = flow.get('TCY') || 0;\nlet last_TOff = flow.get('TOff') || 0;\nlet last_TWait = flow.get('TWait') || 0;\n\n// Calculate the next cycle time\nlet new_time = last_time.getTime() + (last_TCY + last_TOff + last_TWait) * 1000;\nlet waitTime = new_time - Date.now();\n\n// START - STOP simulation\nif (msg.error) {\n    node.status({ fill: 'red', shape: 'ring', text: `${msg.error.message}` });\n    return null;\n}\nif (msg.topic === 'run') {\n    msg = { topic: 'simulation_trigger' };\n    if (context.get('simulationRunning')) {\n        node.status({ fill: 'green', shape: 'ring', text: 'Simulation already running' });\n        return null;  // Prevent starting a new simulation if already running\n    }\n    context.set('simulationRunning', true);\n    node.status({ fill: 'blue', shape: 'ring', text: `Starting ...` });\n    if (waitTime <= 0) {\n        msg.time = new_time;\n        node.status({ fill: 'blue', shape: 'dot', text: 'Starting New Cycle ...' });\n        context.set('simulationRunning', false);\n        return msg;\n    }\n    let interval = setInterval(() => {\n        waitTime -= 1000;\n        if (waitTime <= 0 && context.get('simulationRunning')) {\n            clearInterval(interval);\n            msg.time = new_time;\n            node.status({ fill: 'blue', shape: 'dot', text: `Starting New Cycle ...` });\n            context.set('simulationRunning', false);\n            node.send(msg);\n        } else if (!context.get('simulationRunning')) {\n            clearInterval(interval);\n            node.status({ fill: 'yellow', shape: 'ring', text: 'Simulation stopped' });\n        } else {\n            const localTime = last_time.toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n            node.status({\n                fill: 'green', shape: 'dot', text: ` \n                Last Cycle: ${last_CY}, \n                Created at: ${localTime}, \n                Waiting ${Math.ceil(waitTime / 1000)} sec\n            ` });\n        }\n    }, 1000);\n    return null;\n}\nelse if (msg.topic === 'stop') {\n    if (!context.get('simulationRunning')) {\n        node.status({ fill: 'red', shape: 'ring', text: 'No simulation running' });\n        return null;  // Prevent stopping if no simulation is running\n    }\n    context.set('simulationRunning', false);\n    node.status({ fill: 'yellow', shape: 'dot', text: 'Simulation stopped' });\n    return null;\n}\nelse {\n    node.status({ fill: 'red', shape: 'ring', text: 'Invalid topic' });\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 120,
        "wires": [
            [
                "5b66952a5a5486dd"
            ]
        ]
    },
    {
        "id": "7cbb3f089bb76e14",
        "type": "switch",
        "z": "sf_simulator",
        "name": "switch",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "run",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 250,
        "y": 220,
        "wires": [
            [
                "7828819b3b6a017d"
            ],
            [
                "7828819b3b6a017d"
            ],
            [
                "28b05381dcc5cbb9"
            ],
            [
                "be21cdc1cc6164d2"
            ]
        ]
    },
    {
        "id": "d27e0cd92baa9007",
        "type": "catch",
        "z": "sf_simulator",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "0887c241d5bcc730",
                "7828819b3b6a017d"
            ]
        ]
    },
    {
        "id": "0887c241d5bcc730",
        "type": "debug",
        "z": "sf_simulator",
        "name": "simulation_error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 80,
        "wires": []
    },
    {
        "id": "be21cdc1cc6164d2",
        "type": "function",
        "z": "sf_simulator",
        "name": "update_data",
        "func": "if (msg.topic === 'update' && !msg.error) {\n    if (msg.payload && msg.payload.length) {\n        flow.set('last_time', msg.payload[0].created_at);\n        flow.set('CY', msg.payload[0].cy);\n        flow.set('TCY', msg.payload[0].tcy);\n        flow.set('TOff', msg.payload[0].toff);\n        flow.set('TWait', msg.payload[0].twait);\n    } else {\n        flow.set('last_time', new Date().toISOString());\n        flow.set('CY', 0);\n        flow.set('TCY', 0);\n        flow.set('TOff', 0);\n        flow.set('TWait', 0);\n    }\n}\n\nmsg = {};\nmsg.topic = 'run'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 300,
        "wires": [
            [
                "fe7f0f074ebce959"
            ]
        ]
    },
    {
        "id": "814c0a6f9d540e5a",
        "type": "debug",
        "z": "sf_simulator",
        "name": "simulation_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 300,
        "wires": []
    },
    {
        "id": "fe7f0f074ebce959",
        "type": "link out",
        "z": "sf_simulator",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "4bf1b0f029d8d514"
        ],
        "x": 715,
        "y": 300,
        "wires": []
    },
    {
        "id": "4bf1b0f029d8d514",
        "type": "link in",
        "z": "sf_simulator",
        "name": "link in 1",
        "links": [
            "fe7f0f074ebce959"
        ],
        "x": 75,
        "y": 180,
        "wires": [
            [
                "36933a576cbc8d2d"
            ]
        ]
    },
    {
        "id": "1d780b05536feb75",
        "type": "function",
        "z": "sf_simulator",
        "name": "status_filter",
        "func": "if (msg.status){\n    msg.status.fill = msg.status.fill || \"green\";\n    msg.status.shape = msg.status.shape || \"dot\";\n    if (!msg.status.text){\n        const localTime = new Date().toLocaleString(\"it-IT\", { timeZone: global.get('tz') }).replace(',', '');\n        msg.status.text = `last update: ${localTime}`;\n    }\n    return msg;\n}\nreturn null\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "b84b821ab043f0a0",
        "type": "debug",
        "z": "sf_simulator",
        "name": "generated_data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 120,
        "wires": []
    },
    {
        "id": "b0c1a0c91308577b",
        "type": "function",
        "z": "tab_settings",
        "name": "set_global_variables",
        "func": "",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Function node script to initialize global variables as column-based arrays\n\nconst tz = \"Europe/Rome\";\n\n// Data from the table\nconst protocol = [\n    \"S7\",\n    \"ModBus\",\n    \"OPC-UA\",\n    \"MQTT\",\n    \"HTTP\"\n];\nconst data_type = {\n    \"Bool\": \"BOOLEAN\",\n    \"Byte\": \"SMALLINT\",\n    \"Char\": \"CHAR(1)\",\n    \"Word\": \"SMALLINT\",\n    \"DWord\": \"INTEGER\",\n    \"LWord\": \"BIGINT\",\n    \"SInt\": \"SMALLINT\",\n    \"USInt\": \"SMALLINT\",\n    \"Int\": \"SMALLINT\",\n    \"UInt\": \"INTEGER\",\n    \"DInt\": \"INTEGER\",\n    \"UDInt\": \"BIGINT\",\n    \"LInt\": \"BIGINT\",\n    \"ULInt\": \"NUMERIC\",\n    \"Real\": \"REAL\",\n    \"LReal\": \"DOUBLE PRECISION\",\n    \"Time\": \"INTERVAL\",\n    \"Date\": \"DATE\",\n    \"TimeOfDay\": \"TIME\",\n    \"Date_And_Time\": \"TIMESTAMP\",\n    \"String\": \"VARCHAR(254)\",\n    \"WString\": \"TEXT\"\n};\nconst access = [\n    \"read\",\n    \"write\",\n    \"read/write\"\n];\nconst sampling_mode = [\n    \"static\",\n    \"continous\",\n    \"continous_on_change\",\n    \"trigger_custom\"\n];\nconst sampling_freq = [\n    \"none\",\n    \"500ms\",\n    \"1s\",\n    \"2s\",\n    \"5s\"\n];\nconst aggregations = [\n    \"none\",\n    \"1m\",\n    \"3m\",\n    \"5m\",\n    \"15m\",\n    \"30m\",\n    \"1h\",\n    \"12h\",\n    \"1g\",\n    \"1w\",\n    \"1M\",\n    [\"1m\", \"1h\"],\n    [\"1m\", \"1h\", \"1g\", \"1w\"],\n    [\"1m\", \"1h\", \"1g\", \"1w\", \"1M\"]\n];\nconst aggregation_type = [\n    \"none\",\n    \"sum\",\n    \"mean\"\n];\n\n\n// Initialize global variables\nglobal.set(\"tz\", tz);\nglobal.set(\"protocol\", protocol);\nglobal.set(\"data_type\", data_type);\nglobal.set(\"access\", access);\nglobal.set(\"sampling_mode\", sampling_mode);\nglobal.set(\"sampling_freq\", sampling_freq);\nglobal.set(\"aggregations\", aggregations);\nglobal.set(\"aggregation_type\", aggregation_type);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Global variables initialized\" });",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 80,
        "wires": []
    },
    {
        "id": "6e0b6a5407e0305f",
        "type": "inject",
        "z": "tab_settings",
        "name": "update",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "update",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "5bf67e2b2433103b"
            ]
        ]
    },
    {
        "id": "f3981e9d60e4fe04",
        "type": "inject",
        "z": "tab_settings",
        "name": "start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "start",
        "x": 210,
        "y": 200,
        "wires": [
            [
                "5bf67e2b2433103b"
            ]
        ]
    },
    {
        "id": "ed1594514e826d82",
        "type": "link call",
        "z": "tab_settings",
        "name": "to_database",
        "links": [
            "b845df89960615f1"
        ],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 730,
        "y": 240,
        "wires": [
            [
                "5bf67e2b2433103b"
            ]
        ]
    },
    {
        "id": "5bf67e2b2433103b",
        "type": "subflow:sf_machines",
        "z": "tab_settings",
        "name": "",
        "env": [
            {
                "name": "SCHEMA",
                "value": "config",
                "type": "str"
            }
        ],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "ed1594514e826d82"
            ],
            [
                "ae388e9bdc57b3c7"
            ]
        ]
    },
    {
        "id": "6720a64d617a6d73",
        "type": "link call",
        "z": "tab_settings",
        "name": "to_database",
        "links": [
            "b845df89960615f1"
        ],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 730,
        "y": 440,
        "wires": [
            [
                "f6ae7a47c89c5b74"
            ]
        ]
    },
    {
        "id": "f6ae7a47c89c5b74",
        "type": "subflow:sf_endpoints",
        "z": "tab_settings",
        "name": "",
        "env": [
            {
                "name": "SCHEMA",
                "value": "config",
                "type": "str"
            }
        ],
        "x": 440,
        "y": 440,
        "wires": [
            [
                "6720a64d617a6d73"
            ],
            [
                "3d4271864d2496af"
            ]
        ]
    },
    {
        "id": "lo_endpoints",
        "type": "link out",
        "z": "tab_settings",
        "name": "to_tag_tables",
        "mode": "link",
        "links": [
            "sf_tag_table_t17_in",
            "sf_tag_table_t19_in",
            "sf_tag_table_t24_in",
            "sf_tag_table_t25_in",
            "sf_tag_table_t3_in",
            "sf_tag_table_t4_in"
        ],
        "x": 385,
        "y": 640,
        "wires": []
    },
    {
        "id": "9740fa96b5bdecc7",
        "type": "link call",
        "z": "tab_settings",
        "name": "to_database",
        "links": [
            "b845df89960615f1"
        ],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 730,
        "y": 340,
        "wires": [
            [
                "ae388e9bdc57b3c7"
            ]
        ]
    },
    {
        "id": "ae388e9bdc57b3c7",
        "type": "subflow:sf_tag_tables_config",
        "z": "tab_settings",
        "name": "",
        "env": [
            {
                "name": "TABLE",
                "value": "tag_tables",
                "type": "str"
            }
        ],
        "x": 470,
        "y": 340,
        "wires": [
            [
                "9740fa96b5bdecc7"
            ],
            [
                "f6ae7a47c89c5b74"
            ]
        ]
    },
    {
        "id": "1203f6a564266c36",
        "type": "inject",
        "z": "tab_settings",
        "name": "create label views",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "database.replace_all_procedures",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "x": 160,
        "y": 620,
        "wires": [
            [
                "lo_endpoints"
            ]
        ]
    },
    {
        "id": "2f81efbb2bc1f0e9",
        "type": "status",
        "z": "tab_settings",
        "name": "",
        "scope": null,
        "x": 440,
        "y": 60,
        "wires": [
            [
                "b343a177e547c7ab"
            ]
        ]
    },
    {
        "id": "b343a177e547c7ab",
        "type": "link out",
        "z": "tab_settings",
        "name": "status_settings",
        "mode": "link",
        "links": [
            "liALL_status"
        ],
        "x": 565,
        "y": 60,
        "wires": []
    },
    {
        "id": "097f9f75e3439951",
        "type": "catch",
        "z": "tab_settings",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 440,
        "y": 100,
        "wires": [
            [
                "32defa6408e7fa1b"
            ]
        ]
    },
    {
        "id": "32defa6408e7fa1b",
        "type": "link out",
        "z": "tab_settings",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "liALL_errors"
        ],
        "x": 565,
        "y": 100,
        "wires": []
    },
    {
        "id": "07d0449245179b7c",
        "type": "ui-button",
        "z": "tab_settings",
        "group": "4290ffc4397af8c8",
        "name": "btn_refresh_settings",
        "label": "Refresh",
        "order": 1,
        "width": "6",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "date",
        "topic": "update",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "5bf67e2b2433103b"
            ]
        ]
    },
    {
        "id": "2e50c8e095cbc4fe",
        "type": "ui-button",
        "z": "tab_settings",
        "group": "362ab153d16b0184",
        "name": "btn_refresh_tags",
        "label": "Refresh",
        "order": 1,
        "width": "6",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "date",
        "topic": "update",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "5bf67e2b2433103b"
            ]
        ]
    },
    {
        "id": "799b32fbff50d207",
        "type": "inject",
        "z": "tab_settings",
        "name": "update",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "update",
        "x": 200,
        "y": 660,
        "wires": [
            [
                "lo_endpoints"
            ]
        ]
    },
    {
        "id": "3d4271864d2496af",
        "type": "subflow:sf_triggers",
        "z": "tab_settings",
        "name": "",
        "x": 440,
        "y": 540,
        "wires": [
            [
                "5c20a5f9e79dc096"
            ],
            [
                "lo_endpoints"
            ]
        ]
    },
    {
        "id": "5c20a5f9e79dc096",
        "type": "link call",
        "z": "tab_settings",
        "name": "to_database",
        "links": [
            "b845df89960615f1"
        ],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "3d4271864d2496af"
            ]
        ]
    },
    {
        "id": "nS_tag_tables",
        "type": "status",
        "z": "tab_tag_tables",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "loS_tag_tables"
            ]
        ]
    },
    {
        "id": "loS_tag_tables",
        "type": "link out",
        "z": "tab_tag_tables",
        "name": "status_tag_tables",
        "mode": "link",
        "links": [
            "liALL_status"
        ],
        "x": 235,
        "y": 60,
        "wires": []
    },
    {
        "id": "nC_tag_tables",
        "type": "catch",
        "z": "tab_tag_tables",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 520,
        "y": 60,
        "wires": [
            [
                "loC_tag_tables"
            ]
        ]
    },
    {
        "id": "loC_tag_tables",
        "type": "link out",
        "z": "tab_tag_tables",
        "name": "error_tag_tables",
        "mode": "link",
        "links": [
            "liALL_errors"
        ],
        "x": 635,
        "y": 60,
        "wires": []
    },
    {
        "id": "sf_tag_table_t3",
        "type": "subflow:sf_tag_table",
        "z": "tab_tag_tables",
        "name": "tags_odr_modbus",
        "env": [
            {
                "name": "SCHEMA",
                "value": "tags",
                "type": "str"
            },
            {
                "name": "TABLE",
                "value": "tags_odr_modbus",
                "type": "str"
            },
            {
                "name": "DATA_SCHEMA",
                "value": "public",
                "type": "str"
            },
            {
                "name": "DATA_TABLE",
                "value": "data_odr_modbus",
                "type": "str"
            },
            {
                "name": "PROTOCOL",
                "value": "ModBus",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "sf_tag_table_t3_call"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t3_in",
        "type": "link in",
        "z": "tab_tag_tables",
        "name": "tags_odr_modbus",
        "links": [
            "lo_endpoints"
        ],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "sf_tag_table_t3"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t3_call",
        "type": "link call",
        "z": "tab_tag_tables",
        "name": "to_database",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 700,
        "y": 160,
        "wires": [
            [
                "sf_tag_table_t3"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t4",
        "type": "subflow:sf_tag_table",
        "z": "tab_tag_tables",
        "name": "tags_live_s7",
        "env": [
            {
                "name": "SCHEMA",
                "value": "tags",
                "type": "str"
            },
            {
                "name": "TABLE",
                "value": "tags_live_s7",
                "type": "str"
            },
            {
                "name": "DATA_SCHEMA",
                "value": "public",
                "type": "str"
            },
            {
                "name": "DATA_TABLE",
                "value": "data_live_s7",
                "type": "str"
            },
            {
                "name": "PROTOCOL",
                "value": "S7",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 260,
        "wires": [
            [
                "sf_tag_table_t4_call"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t4_in",
        "type": "link in",
        "z": "tab_tag_tables",
        "name": "tags_live_s7",
        "links": [
            "lo_endpoints"
        ],
        "x": 180,
        "y": 260,
        "wires": [
            [
                "sf_tag_table_t4"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t4_call",
        "type": "link call",
        "z": "tab_tag_tables",
        "name": "to_database",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 700,
        "y": 260,
        "wires": [
            [
                "sf_tag_table_t4"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t17",
        "type": "subflow:sf_tag_table",
        "z": "tab_tag_tables",
        "name": "tags_odr_reversy_s7",
        "env": [
            {
                "name": "SCHEMA",
                "value": "tags",
                "type": "str"
            },
            {
                "name": "TABLE",
                "value": "tags_odr_reversy_s7",
                "type": "str"
            },
            {
                "name": "DATA_SCHEMA",
                "value": "public",
                "type": "str"
            },
            {
                "name": "DATA_TABLE",
                "value": "data_odr_reversy_s7",
                "type": "str"
            },
            {
                "name": "PROTOCOL",
                "value": "S7",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 360,
        "wires": [
            [
                "sf_tag_table_t17_call"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t17_in",
        "type": "link in",
        "z": "tab_tag_tables",
        "name": "tags_odr_reversy_s7",
        "links": [
            "lo_endpoints"
        ],
        "x": 180,
        "y": 360,
        "wires": [
            [
                "sf_tag_table_t17"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t17_call",
        "type": "link call",
        "z": "tab_tag_tables",
        "name": "to_database",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 700,
        "y": 360,
        "wires": [
            [
                "sf_tag_table_t17"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t19",
        "type": "subflow:sf_tag_table",
        "z": "tab_tag_tables",
        "name": "tags_odr_reversy_opcua",
        "env": [
            {
                "name": "SCHEMA",
                "value": "tags",
                "type": "str"
            },
            {
                "name": "TABLE",
                "value": "tags_odr_reversy_opcua",
                "type": "str"
            },
            {
                "name": "DATA_SCHEMA",
                "value": "public",
                "type": "str"
            },
            {
                "name": "DATA_TABLE",
                "value": "data_odr_reversy_opcua",
                "type": "str"
            },
            {
                "name": "PROTOCOL",
                "value": "OPCUA",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "sf_tag_table_t19_call"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t19_in",
        "type": "link in",
        "z": "tab_tag_tables",
        "name": "tags_odr_reversy_opcua",
        "links": [
            "lo_endpoints"
        ],
        "x": 180,
        "y": 460,
        "wires": [
            [
                "sf_tag_table_t19"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t19_call",
        "type": "link call",
        "z": "tab_tag_tables",
        "name": "to_database",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 700,
        "y": 460,
        "wires": [
            [
                "sf_tag_table_t19"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t24",
        "type": "subflow:sf_tag_table",
        "z": "tab_tag_tables",
        "name": "tags_odr_reversy_s7_continous",
        "env": [
            {
                "name": "SCHEMA",
                "value": "tags",
                "type": "str"
            },
            {
                "name": "TABLE",
                "value": "tags_odr_reversy_s7_continous",
                "type": "str"
            },
            {
                "name": "DATA_SCHEMA",
                "value": "public",
                "type": "str"
            },
            {
                "name": "DATA_TABLE",
                "value": "data_odr_reversy_s7_continous",
                "type": "str"
            },
            {
                "name": "PROTOCOL",
                "value": "S7",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 560,
        "wires": [
            [
                "sf_tag_table_t24_call"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t24_in",
        "type": "link in",
        "z": "tab_tag_tables",
        "name": "tags_odr_reversy_s7_continous",
        "links": [
            "lo_endpoints"
        ],
        "x": 180,
        "y": 560,
        "wires": [
            [
                "sf_tag_table_t24"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t24_call",
        "type": "link call",
        "z": "tab_tag_tables",
        "name": "to_database",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 700,
        "y": 560,
        "wires": [
            [
                "sf_tag_table_t24"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t25",
        "type": "subflow:sf_tag_table",
        "z": "tab_tag_tables",
        "name": "tags_odr_reversy_s7_coc",
        "env": [
            {
                "name": "SCHEMA",
                "value": "tags",
                "type": "str"
            },
            {
                "name": "TABLE",
                "value": "tags_odr_reversy_s7_coc",
                "type": "str"
            },
            {
                "name": "DATA_SCHEMA",
                "value": "public",
                "type": "str"
            },
            {
                "name": "DATA_TABLE",
                "value": "data_odr_reversy_s7_coc",
                "type": "str"
            },
            {
                "name": "PROTOCOL",
                "value": "S7",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 660,
        "wires": [
            [
                "sf_tag_table_t25_call"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t25_in",
        "type": "link in",
        "z": "tab_tag_tables",
        "name": "tags_odr_reversy_s7_coc",
        "links": [
            "lo_endpoints"
        ],
        "x": 180,
        "y": 660,
        "wires": [
            [
                "sf_tag_table_t25"
            ]
        ]
    },
    {
        "id": "sf_tag_table_t25_call",
        "type": "link call",
        "z": "tab_tag_tables",
        "name": "to_database",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 700,
        "y": 660,
        "wires": [
            [
                "sf_tag_table_t25"
            ]
        ]
    },
    {
        "id": "21a0d91b198eb334",
        "type": "inject",
        "z": "tab_database_sql",
        "name": "check_databases",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "check_database",
        "x": 180,
        "y": 220,
        "wires": [
            [
                "246fbd0e6e68b33d"
            ]
        ]
    },
    {
        "id": "febc1580eb9df353",
        "type": "function",
        "z": "tab_database_sql",
        "name": "check_database",
        "func": "// Ensure the database name is provided in msg.payload\nif (!msg.database.name) {\n    node.error(\"Database name is required in msg.database.name\");\n    return null;\n}\n\n// First, check if the database exists\nmsg.query = `\nSELECT 1 AS exists \nFROM pg_database \nWHERE datname = '${msg.database.name}';\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 220,
        "wires": [
            [
                "89ae823686f10fd9"
            ]
        ]
    },
    {
        "id": "89ae823686f10fd9",
        "type": "link out",
        "z": "tab_database_sql",
        "name": "check_database",
        "mode": "link",
        "links": [
            "b845df89960615f1"
        ],
        "x": 825,
        "y": 220,
        "wires": []
    },
    {
        "id": "246fbd0e6e68b33d",
        "type": "change",
        "z": "tab_database_sql",
        "name": "edge",
        "rules": [
            {
                "t": "set",
                "p": "database.name",
                "pt": "msg",
                "to": "edge",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 220,
        "wires": [
            [
                "febc1580eb9df353"
            ]
        ]
    },
    {
        "id": "abcc8fef4f2b4546",
        "type": "postgresql",
        "z": "tab_database_sql",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "70c20df5376a0781",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 380,
        "y": 440,
        "wires": [
            [
                "24a22c8abb6c235c",
                "2ad6a504a7bde1cb"
            ]
        ]
    },
    {
        "id": "24a22c8abb6c235c",
        "type": "debug",
        "z": "tab_database_sql",
        "name": "DBout Postgres",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 380,
        "wires": []
    },
    {
        "id": "b845df89960615f1",
        "type": "link in",
        "z": "tab_database_sql",
        "name": "postgres",
        "links": [
            "89ae823686f10fd9",
            "8c9c451ef71f414f"
        ],
        "x": 205,
        "y": 440,
        "wires": [
            [
                "abcc8fef4f2b4546",
                "22f454c1d4a10625"
            ]
        ]
    },
    {
        "id": "22f454c1d4a10625",
        "type": "debug",
        "z": "tab_database_sql",
        "name": "DBin Postgres",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 380,
        "wires": []
    },
    {
        "id": "8c9c451ef71f414f",
        "type": "link out",
        "z": "tab_database_sql",
        "name": "init_database",
        "mode": "link",
        "links": [
            "b845df89960615f1"
        ],
        "x": 915,
        "y": 440,
        "wires": []
    },
    {
        "id": "0345f209c7024da9",
        "type": "function",
        "z": "tab_database_sql",
        "name": "init_database",
        "func": "// Check if payload exists\nif (!msg.payload) {\n    node.error(\"No payload\");\n    return [null, null];\n}\n\n// Retrieve the database name from msg.database.name\nif (!msg.database.name) {\n    node.error(\"Database name is missing\");\n    return [null, null];\n}\n\n// Check if the database already exists based on payload length\nif (msg.payload.length > 0) {\n    // Database already exists --> skip creation\n    return [null, msg];\n}\n\n// Construct the CREATE DATABASE query with proper syntax\nmsg.query = `\n\n    CREATE DATABASE \"${msg.database.name}\";\n    \n`;\n\n// Set topic\nmsg.topic = \"init_database\";\n\nreturn [msg, null];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 440,
        "wires": [
            [
                "8c9c451ef71f414f"
            ],
            []
        ]
    },
    {
        "id": "2ad6a504a7bde1cb",
        "type": "switch",
        "z": "tab_database_sql",
        "name": "switch",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "check_database",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 440,
        "wires": [
            [
                "0345f209c7024da9"
            ],
            []
        ]
    },
    {
        "id": "5f77ae8fd9bdfdbb",
        "type": "comment",
        "z": "tab_database_sql",
        "name": "maintenance database",
        "info": "",
        "x": 160,
        "y": 320,
        "wires": []
    },
    {
        "id": "12fd21f7819015fd",
        "type": "comment",
        "z": "tab_database_sql",
        "name": "initialize and manual_check",
        "info": "",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "9c3cf8741609cf37",
        "type": "inject",
        "z": "tab_database_sql",
        "name": "insert error",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "SELECT * FROM tabella_che_non_esise;",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "check_database",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "abcc8fef4f2b4546"
            ]
        ]
    },
    {
        "id": "bf8ad430a770555a",
        "type": "postgresql",
        "z": "tab_database_sql",
        "name": "edge",
        "query": "",
        "postgreSQLConfig": "841bfed957343a4e",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 370,
        "y": 720,
        "wires": [
            [
                "afdbdfdb07f2e33d",
                "6f71f4b10ba6ad3a"
            ]
        ]
    },
    {
        "id": "afdbdfdb07f2e33d",
        "type": "debug",
        "z": "tab_database_sql",
        "name": "DBout Edge",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 660,
        "wires": []
    },
    {
        "id": "b2366c0b7a520910",
        "type": "link in",
        "z": "tab_database_sql",
        "name": "edge",
        "links": [],
        "x": 205,
        "y": 720,
        "wires": [
            [
                "bf8ad430a770555a",
                "c38c44aa5029be52"
            ]
        ]
    },
    {
        "id": "c38c44aa5029be52",
        "type": "debug",
        "z": "tab_database_sql",
        "name": "DBin Edge",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 660,
        "wires": []
    },
    {
        "id": "982bf82675f9dfde",
        "type": "comment",
        "z": "tab_database_sql",
        "name": "edge database",
        "info": "",
        "x": 140,
        "y": 600,
        "wires": []
    },
    {
        "id": "ef04298f51ef7cd3",
        "type": "inject",
        "z": "tab_database_sql",
        "name": "insert error",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "SELECT * FROM tabella_che_non_esise;",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "check_database",
        "x": 160,
        "y": 780,
        "wires": [
            [
                "bf8ad430a770555a"
            ]
        ]
    },
    {
        "id": "53b5686d033fc681",
        "type": "catch",
        "z": "tab_database_sql",
        "name": "",
        "scope": [
            "bf8ad430a770555a",
            "b845df89960615f1"
        ],
        "uncaught": false,
        "x": 490,
        "y": 140,
        "wires": [
            [
                "f5588aa3565a0ba4",
                "e3425e89140d944a"
            ]
        ]
    },
    {
        "id": "f5588aa3565a0ba4",
        "type": "debug",
        "z": "tab_database_sql",
        "name": "ERROR - Database",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 100,
        "wires": []
    },
    {
        "id": "e3425e89140d944a",
        "type": "link out",
        "z": "tab_database_sql",
        "name": "edge_error_return",
        "mode": "return",
        "links": [],
        "x": 675,
        "y": 140,
        "wires": []
    },
    {
        "id": "6f71f4b10ba6ad3a",
        "type": "link out",
        "z": "tab_database_sql",
        "name": "edge_return",
        "mode": "return",
        "links": [],
        "x": 595,
        "y": 720,
        "wires": []
    },
    {
        "id": "773eababc473b00e",
        "type": "status",
        "z": "tab_database_sql",
        "name": "",
        "scope": [
            "abcc8fef4f2b4546",
            "bf8ad430a770555a"
        ],
        "x": 140,
        "y": 140,
        "wires": [
            [
                "d5b276223db7abb7"
            ]
        ]
    },
    {
        "id": "d5b276223db7abb7",
        "type": "link out",
        "z": "tab_database_sql",
        "name": "status_database",
        "mode": "link",
        "links": [
            "liALL_status"
        ],
        "x": 275,
        "y": 140,
        "wires": []
    },
    {
        "id": "nS_connections",
        "type": "status",
        "z": "tab_connections",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "loS_connections"
            ]
        ]
    },
    {
        "id": "loS_connections",
        "type": "link out",
        "z": "tab_connections",
        "name": "status_connections",
        "mode": "link",
        "links": [
            "liALL_status"
        ],
        "x": 235,
        "y": 60,
        "wires": []
    },
    {
        "id": "nC_connections",
        "type": "catch",
        "z": "tab_connections",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 520,
        "y": 60,
        "wires": [
            [
                "loC_connections"
            ]
        ]
    },
    {
        "id": "loC_connections",
        "type": "link out",
        "z": "tab_connections",
        "name": "error_connections",
        "mode": "link",
        "links": [
            "liALL_errors"
        ],
        "x": 635,
        "y": 60,
        "wires": []
    },
    {
        "id": "comment_e20",
        "type": "comment",
        "z": "tab_connections",
        "name": "Endpoint 20: Reversy_S7_416 - triggered",
        "info": "README: https://github.com/st-one-io/node-red-contrib-s7/blob/master/README.md",
        "x": 220,
        "y": 150,
        "wires": []
    },
    {
        "id": "sf_data_handler_e20_t17",
        "type": "subflow:sf_data_handler",
        "z": "tab_connections",
        "name": "tags_odr_reversy_s7@20",
        "env": [
            {
                "name": "ENDPOINT_ID",
                "value": "20",
                "type": "num"
            },
            {
                "name": "TAG_TABLE",
                "value": "tags_odr_reversy_s7",
                "type": "str"
            }
        ],
        "x": 520,
        "y": 250,
        "wires": [
            [
                "sf_data_handler_e20_t17_call"
            ]
        ]
    },
    {
        "id": "sf_data_handler_e20_t17_call",
        "type": "link call",
        "z": "tab_connections",
        "name": "dynamic",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 820,
        "y": 250,
        "wires": [
            [
                "sf_data_handler_e20_t17"
            ]
        ]
    },
    {
        "id": "sf_data_handler_e20_t17_in",
        "type": "link in",
        "z": "tab_connections",
        "name": "sf_data_handler_e20_t17_in",
        "links": [
            "trigger_e20_t17_out"
        ],
        "x": 220,
        "y": 250,
        "wires": [
            [
                "sf_data_handler_e20_t17"
            ]
        ]
    },
    {
        "id": "s7in_e20",
        "type": "s7 in",
        "z": "tab_connections",
        "endpoint": "S7endpoint_e20",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "sf_data_handler_e20_t17"
            ]
        ]
    },
    {
        "id": "s7control_e20_in",
        "type": "link in",
        "z": "tab_connections",
        "name": "s7control_e20_in",
        "links": [],
        "x": 520,
        "y": 200,
        "wires": [
            [
                "s7control_e20"
            ]
        ]
    },
    {
        "id": "s7control_e20",
        "type": "s7 control",
        "z": "tab_connections",
        "endpoint": "S7endpoint_e20",
        "function": "trigger",
        "name": "",
        "x": 770,
        "y": 200,
        "wires": [
            [
                "s7control_e20_out"
            ]
        ]
    },
    {
        "id": "s7control_e20_out",
        "type": "link out",
        "z": "tab_connections",
        "name": "s7control_e20_out",
        "mode": "return",
        "links": [],
        "x": 1020,
        "y": 200,
        "wires": []
    },
    {
        "id": "comment_e20_1s_ever",
        "type": "comment",
        "z": "tab_connections",
        "name": "Endpoint 20: Reversy_S7_416 - 1s - ever",
        "info": "README: https://github.com/st-one-io/node-red-contrib-s7/blob/master/README.md",
        "x": 220,
        "y": 350,
        "wires": []
    },
    {
        "id": "sf_data_handler_e20_t24",
        "type": "subflow:sf_data_handler",
        "z": "tab_connections",
        "name": "tags_odr_reversy_s7_continous@20",
        "env": [
            {
                "name": "ENDPOINT_ID",
                "value": "20",
                "type": "num"
            },
            {
                "name": "TAG_TABLE",
                "value": "tags_odr_reversy_s7_continous",
                "type": "str"
            }
        ],
        "x": 540,
        "y": 400,
        "wires": [
            [
                "sf_data_handler_e20_t24_call"
            ]
        ]
    },
    {
        "id": "sf_data_handler_e20_t24_call",
        "type": "link call",
        "z": "tab_connections",
        "name": "dynamic",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 820,
        "y": 400,
        "wires": [
            [
                "sf_data_handler_e20_t24"
            ]
        ]
    },
    {
        "id": "s7in_e20_1s_ever",
        "type": "s7 in",
        "z": "tab_connections",
        "endpoint": "S7endpoint_e20_1s",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 220,
        "y": 400,
        "wires": [
            [
                "sf_data_handler_e20_t24"
            ]
        ]
    },
    {
        "id": "comment_e20_1s_diff",
        "type": "comment",
        "z": "tab_connections",
        "name": "Endpoint 20: Reversy_S7_416 - 1s - diff",
        "info": "README: https://github.com/st-one-io/node-red-contrib-s7/blob/master/README.md",
        "x": 220,
        "y": 500,
        "wires": []
    },
    {
        "id": "sf_data_handler_e20_t25",
        "type": "subflow:sf_data_handler",
        "z": "tab_connections",
        "name": "tags_odr_reversy_s7_coc@20",
        "env": [
            {
                "name": "ENDPOINT_ID",
                "value": "20",
                "type": "num"
            },
            {
                "name": "TAG_TABLE",
                "value": "tags_odr_reversy_s7_coc",
                "type": "str"
            }
        ],
        "x": 540,
        "y": 550,
        "wires": [
            [
                "sf_data_handler_e20_t25_call"
            ]
        ]
    },
    {
        "id": "sf_data_handler_e20_t25_call",
        "type": "link call",
        "z": "tab_connections",
        "name": "dynamic",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 820,
        "y": 550,
        "wires": [
            [
                "sf_data_handler_e20_t25"
            ]
        ]
    },
    {
        "id": "s7in_e20_1s_diff",
        "type": "s7 in",
        "z": "tab_connections",
        "endpoint": "S7endpoint_e20_1s",
        "mode": "all",
        "variable": "",
        "diff": true,
        "name": "",
        "x": 220,
        "y": 550,
        "wires": [
            [
                "sf_data_handler_e20_t25"
            ]
        ]
    },
    {
        "id": "nS_triggers",
        "type": "status",
        "z": "tab_triggers",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "loS_triggers"
            ]
        ]
    },
    {
        "id": "loS_triggers",
        "type": "link out",
        "z": "tab_triggers",
        "name": "status_triggers",
        "mode": "link",
        "links": [
            "liALL_status"
        ],
        "x": 235,
        "y": 60,
        "wires": []
    },
    {
        "id": "nC_triggers",
        "type": "catch",
        "z": "tab_triggers",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 520,
        "y": 60,
        "wires": [
            [
                "loC_triggers"
            ]
        ]
    },
    {
        "id": "loC_triggers",
        "type": "link out",
        "z": "tab_triggers",
        "name": "error_triggers",
        "mode": "link",
        "links": [
            "liALL_errors"
        ],
        "x": 635,
        "y": 60,
        "wires": []
    },
    {
        "id": "comment_trig1",
        "type": "comment",
        "z": "tab_triggers",
        "name": "Trigger 1: Triggerino",
        "info": "",
        "x": 160,
        "y": 150,
        "wires": []
    },
    {
        "id": "sf_trigger_handler_trig1_t17",
        "type": "subflow:sf_trigger_handler",
        "z": "tab_triggers",
        "name": "trig1 - tags_odr_reversy_s7",
        "env": [
            {
                "name": "TRIGGER_ID",
                "value": "1",
                "type": "num"
            },
            {
                "name": "TAG_TABLE",
                "value": "tags_odr_reversy_s7",
                "type": "str"
            }
        ],
        "x": 620,
        "y": 250,
        "wires": [
            [
                "trigger_e20_t17_out"
            ]
        ]
    },
    {
        "id": "manual_trig1_t17",
        "type": "inject",
        "z": "tab_triggers",
        "name": "Manual Trigger",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "trigger",
        "x": 220,
        "y": 250,
        "wires": [
            [
                "sf_trigger_handler_trig1_t17"
            ]
        ]
    },
    {
        "id": "trigger_e20_t17_out",
        "type": "link out",
        "z": "tab_triggers",
        "name": "trigger_e20_t17_out",
        "mode": "link",
        "links": [
            "sf_data_handler_e20_t17_in"
        ],
        "x": 850,
        "y": 250,
        "wires": []
    },
    {
        "id": "s7in_trig1",
        "type": "s7 in",
        "z": "tab_triggers",
        "endpoint": "S7endpoint_e20_trig",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "sf_trigger_handler_trig1_t17"
            ]
        ]
    },
    {
        "id": "3ecc762e238ea08e",
        "type": "s7 in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "endpoint": "4d546db47d274425",
        "mode": "all",
        "variable": "",
        "diff": true,
        "name": "",
        "x": 230,
        "y": 100,
        "wires": [
            [
                "c5fffa97ccdb96aa",
                "bd35067abfeecb28"
            ]
        ]
    },
    {
        "id": "c5fffa97ccdb96aa",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 100,
        "wires": [
            [
                "53ea4e9c8a13e7f2"
            ]
        ]
    },
    {
        "id": "53ea4e9c8a13e7f2",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 100,
        "wires": [
            [
                "c5fffa97ccdb96aa"
            ]
        ]
    },
    {
        "id": "7aa53ce4aca3cb95",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 740,
        "wires": [
            [
                "76203f45daf5e0ab"
            ]
        ]
    },
    {
        "id": "76203f45daf5e0ab",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 740,
        "wires": [
            [
                "7aa53ce4aca3cb95"
            ]
        ]
    },
    {
        "id": "2852a215e2725329",
        "type": "modbus-flex-getter",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Endpoint 1",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ece6c13378a449d4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 570,
        "y": 660,
        "wires": [
            [
                "76db5698389f8a98"
            ],
            []
        ]
    },
    {
        "id": "b47b82208845e664",
        "type": "OpcUa-Client",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "endpoint": "f9ff10e208cdc5aa",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 220,
        "y": 1420,
        "wires": [
            [
                "f5af8255d64c456c"
            ]
        ]
    },
    {
        "id": "db4f24df3f586f2c",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 1480,
        "wires": [
            [
                "f5af8255d64c456c"
            ]
        ]
    },
    {
        "id": "f5af8255d64c456c",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 1480,
        "wires": [
            [
                "b47b82208845e664"
            ]
        ]
    },
    {
        "id": "50bcba057bef55f6",
        "type": "mqtt in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "topic": "mqtt/data/topic/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0b75090e5169005e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 1820,
        "wires": [
            [
                "7c3969b3796059ac"
            ]
        ]
    },
    {
        "id": "2dab64c9f05c941d",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 1820,
        "wires": [
            [
                "7c3969b3796059ac"
            ]
        ]
    },
    {
        "id": "7c3969b3796059ac",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "e04ffaab590af905",
        "type": "http request",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 2280,
        "wires": [
            [
                "4f5d8f605f0adcca",
                "52a1e2ebc58f8602"
            ]
        ]
    },
    {
        "id": "4f5d8f605f0adcca",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 2340,
        "wires": [
            [
                "e04ffaab590af905"
            ]
        ]
    },
    {
        "id": "3889866fd5203de2",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 2340,
        "wires": [
            [
                "4f5d8f605f0adcca"
            ]
        ]
    },
    {
        "id": "52a1e2ebc58f8602",
        "type": "http response",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 2280,
        "wires": []
    },
    {
        "id": "ddb4b50a2c26c102",
        "type": "s7 in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "endpoint": "095dbaf71f1d0856",
        "mode": "all",
        "variable": "",
        "diff": true,
        "name": "",
        "x": 230,
        "y": 300,
        "wires": [
            [
                "edc26fda8335ab7f",
                "8ea0828d76c45c8e"
            ]
        ]
    },
    {
        "id": "edc26fda8335ab7f",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 380,
        "wires": [
            [
                "0cddc95d6981d3dd"
            ]
        ]
    },
    {
        "id": "0cddc95d6981d3dd",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 380,
        "wires": [
            [
                "edc26fda8335ab7f"
            ]
        ]
    },
    {
        "id": "ef6990e16be58d1b",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "ABC_2_PLC_trigger_table1",
        "links": [
            "37a26891c1f32a25"
        ],
        "x": 225,
        "y": 380,
        "wires": [
            [
                "edc26fda8335ab7f"
            ]
        ]
    },
    {
        "id": "699c37c704596ef7",
        "type": "s7 control",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "endpoint": "095dbaf71f1d0856",
        "function": "trigger",
        "name": "",
        "x": 920,
        "y": 300,
        "wires": [
            [
                "1f7c3bbc9d451fb3"
            ]
        ]
    },
    {
        "id": "f5b847a91b330971",
        "type": "comment",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "S7 Continous / S7 Continous on change",
        "info": "For 'on_change' there is the flag on the S7 in node\n\nREADME: https://github.com/st-one-io/node-red-contrib-s7/blob/master/README.md",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "f03e9b134174c950",
        "type": "comment",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "S7 Custom Trigger",
        "info": "README: https://github.com/st-one-io/node-red-contrib-s7/blob/master/README.md\n\nThe S7 in node is configured as follows:\n'on_change' flag = false\n'cycle_interval' = 0  (no cycles)\n\nThe trigger event is passed from remote (link in)\nwith a msg with topic 'trigger'\n\nThe data handler generate a msg with \nmsg.function = 'trigger' to trigger the read cycle\non the configured s7 endpont through the s7 control node.\n\nAlternativly the 'trigger' function\ncan be staticly configured directly on the s7 control node.\n\nHere the reference code inside the s7 control node:\n\n    function onMessage(msg, send, done) {\n        var res;\n        let func = config.function || msg.function;\n        switch (func) {\n            case 'cycletime':\n                res = node.endpoint.updateCycleTime(msg.payload);\n                if (res) {\n                    done(res);\n                } else {\n                    send(msg);\n                    done();\n                }\n                break;\n            case 'trigger':\n                node.endpoint.doCycle();\n                send(msg);\n                done();\n                break;\n\n            ... also other controls on datablocks are available",
        "x": 150,
        "y": 240,
        "wires": []
    },
    {
        "id": "e44bcab12e3b48e9",
        "type": "comment",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Continous / Modbus Continous on change",
        "info": "### Main Behaviour  ###\n\n    The cyclic trigger is managed by the Endpoint Data Handler\n    The read trigger is sent from the OUT 2 of data handler to the Modbus flex getter\n    The data handler manage also the 'on_change' method by storing a temporary reading data\n\n\n###  Modbus-Flex-Getter ###\n\nModbus flexible input triggered read node with connection input parameters.\n\nConnects to a Modbus TCP or serial to read coils/inputs/registers at the rate of the incoming msg.\n\n\nFunction codes (1:4) currently supported include:\nFC 1: Read Coil Status\nFC 2: Read Input Status\nFC 3: Read Holding Registers\nFC 4: Read Input Registers\nInput parameter for connecting Modbus - in msg.payload:\n\nunitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address\nOutput 1: data Array (PDU), modbus response Buffer, input message\n\nOutput 2: modbus response Buffer, data Array (PDU), input message\n\nFunction node code example for single input:\n\nmsg.payload = { value: msg.payload, 'fc': 1, 'unitid': 1, 'address': 0 , 'quantity': 1 } return msg\nFunction node code example for multiple inputs:\n\nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 0 , 'quantity': 10 } return msg\nThe status of the Flex-Getter-Node is \"active\" if the operating system opens up the dev with no error. Connection issues with your ethernet connection won't affect this status. Warnings and notifications about ethernet connection issues will be displayed in the Debug-window.\n\nTo use the Flex-Getter-Node with \"split\"- and \"join\"-nodes, please make sure to enable \"Keep Msg Properties\" in the nodes' \"Optionals\" properties.\n\n\n### Source code ###\n\n    node.prepareMsg = function (msg) {\n      if (typeof msg.payload === 'string') {\n        msg.payload = JSON.parse(msg.payload)\n      }\n\n      msg.payload.fc = parseInt(msg.payload.fc) || 3\n      msg.payload.unitid = parseInt(msg.payload.unitid)\n      msg.payload.address = parseInt(msg.payload.address) || 0\n      msg.payload.quantity = parseInt(msg.payload.quantity) || 1\n\n      return msg\n    }\n\n    node.isValidModbusMsg = function (msg) {\n      let isValid = true\n\n      if (!(Number.isInteger(msg.payload.fc) &&\n        msg.payload.fc >= 1 &&\n        msg.payload.fc <= 4)) {\n        node.error('FC Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n        !(Number.isInteger(msg.payload.address) &&\n          msg.payload.address >= 0 &&\n          msg.payload.address <= 65535)) {\n        node.error('Address Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n        !(Number.isInteger(msg.payload.quantity) &&\n          msg.payload.quantity >= 1 &&\n          msg.payload.quantity <= 65535)) {\n        node.error('Quantity Not Valid', msg)\n        isValid &= false\n      }\n\n      return isValid\n    }\n\n\n### Repository ###\nhttps://github.com/BiancoRoyal/node-red-contrib-modbus/tree/master",
        "x": 250,
        "y": 560,
        "wires": []
    },
    {
        "id": "8348bc25b897370a",
        "type": "comment",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Opcua Continous / Opcua Continous on change",
        "info": "The data handler subscribe for reading all the variables\nManage the 'continous' with a temporary data storage\n",
        "x": 240,
        "y": 1360,
        "wires": []
    },
    {
        "id": "200868d02607b68f",
        "type": "comment",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "MQTT Continous / MQTT Continous on change",
        "info": "Mqtt stream data,\nThe Data Handler manage the continous and on_change writing to the database",
        "x": 240,
        "y": 1720,
        "wires": []
    },
    {
        "id": "f9d90c36309e34f4",
        "type": "comment",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "API Rest Continous / API Rest Continous on change",
        "info": "",
        "x": 250,
        "y": 2220,
        "wires": []
    },
    {
        "id": "2f1f3607f2da5ba5",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 1100,
        "wires": [
            [
                "72e022a736b23132"
            ]
        ]
    },
    {
        "id": "72e022a736b23132",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 1100,
        "wires": [
            [
                "2f1f3607f2da5ba5"
            ]
        ]
    },
    {
        "id": "ba205b4ca777299f",
        "type": "modbus-flex-getter",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Endpoint 2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "edb89972098ee9ef",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 570,
        "y": 1020,
        "wires": [
            [
                "3955ffd6254f3184"
            ],
            []
        ]
    },
    {
        "id": "376f733dff485f8f",
        "type": "comment",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Custom Trigger",
        "info": "### Main Behaviour  ###\n\n    The custom trigger is passed trough the link in node with a msg with topic 'trigger'\n    The read trigger is sent from the OUT 2 of data handler to the Modbus flex getter\n    The data handler manage also the 'on_change' method by storing a temporary reading data\n\n\n###  Modbus-Flex-Getter ###\n\nModbus flexible input triggered read node with connection input parameters.\n\nConnects to a Modbus TCP or serial to read coils/inputs/registers at the rate of the incoming msg.\n\n\nFunction codes (1:4) currently supported include:\nFC 1: Read Coil Status\nFC 2: Read Input Status\nFC 3: Read Holding Registers\nFC 4: Read Input Registers\nInput parameter for connecting Modbus - in msg.payload:\n\nunitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address\nOutput 1: data Array (PDU), modbus response Buffer, input message\n\nOutput 2: modbus response Buffer, data Array (PDU), input message\n\nFunction node code example for single input:\n\nmsg.payload = { value: msg.payload, 'fc': 1, 'unitid': 1, 'address': 0 , 'quantity': 1 } return msg\nFunction node code example for multiple inputs:\n\nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 0 , 'quantity': 10 } return msg\nThe status of the Flex-Getter-Node is \"active\" if the operating system opens up the dev with no error. Connection issues with your ethernet connection won't affect this status. Warnings and notifications about ethernet connection issues will be displayed in the Debug-window.\n\nTo use the Flex-Getter-Node with \"split\"- and \"join\"-nodes, please make sure to enable \"Keep Msg Properties\" in the nodes' \"Optionals\" properties.\n\n\n### Source code ###\n\n    node.prepareMsg = function (msg) {\n      if (typeof msg.payload === 'string') {\n        msg.payload = JSON.parse(msg.payload)\n      }\n\n      msg.payload.fc = parseInt(msg.payload.fc) || 3\n      msg.payload.unitid = parseInt(msg.payload.unitid)\n      msg.payload.address = parseInt(msg.payload.address) || 0\n      msg.payload.quantity = parseInt(msg.payload.quantity) || 1\n\n      return msg\n    }\n\n    node.isValidModbusMsg = function (msg) {\n      let isValid = true\n\n      if (!(Number.isInteger(msg.payload.fc) &&\n        msg.payload.fc >= 1 &&\n        msg.payload.fc <= 4)) {\n        node.error('FC Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n        !(Number.isInteger(msg.payload.address) &&\n          msg.payload.address >= 0 &&\n          msg.payload.address <= 65535)) {\n        node.error('Address Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n        !(Number.isInteger(msg.payload.quantity) &&\n          msg.payload.quantity >= 1 &&\n          msg.payload.quantity <= 65535)) {\n        node.error('Quantity Not Valid', msg)\n        isValid &= false\n      }\n\n      return isValid\n    }\n\n\n### Repository ###\nhttps://github.com/BiancoRoyal/node-red-contrib-modbus/tree/master",
        "x": 160,
        "y": 940,
        "wires": []
    },
    {
        "id": "f85c22a4ad0eca0e",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Endpoint 2 Trigger In",
        "links": [
            "f67d44986870e735",
            "83d53b4a07b209e6",
            "5013c4151da80025",
            "ea971b1902305135"
        ],
        "x": 225,
        "y": 1100,
        "wires": [
            [
                "72e022a736b23132"
            ]
        ]
    },
    {
        "id": "01a26f7c1022392a",
        "type": "OpcUa-Client",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "endpoint": "f9ff10e208cdc5aa",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 560,
        "y": 1580,
        "wires": [
            [
                "98b4dca8f5729bda"
            ]
        ]
    },
    {
        "id": "ce63366bc7ce288a",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 1640,
        "wires": [
            [
                "550d1f94264ae0f4"
            ]
        ]
    },
    {
        "id": "550d1f94264ae0f4",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 1640,
        "wires": [
            [
                "ce63366bc7ce288a"
            ]
        ]
    },
    {
        "id": "0e5ef356022649e4",
        "type": "comment",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Opcua Custom trigger",
        "info": "The trigger triggers a read multiple event \n",
        "x": 160,
        "y": 1520,
        "wires": []
    },
    {
        "id": "d83539d8592deaf3",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "name": "link in 1",
        "links": [],
        "x": 285,
        "y": 1640,
        "wires": [
            [
                "550d1f94264ae0f4"
            ]
        ]
    },
    {
        "id": "9b5b0224060bd900",
        "type": "mqtt in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "topic": "mqtt/data/topic/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0b75090e5169005e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 2020,
        "wires": [
            [
                "97aff958c632c721"
            ]
        ]
    },
    {
        "id": "289d35c6b72b8875",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 2080,
        "wires": [
            [
                "97aff958c632c721"
            ]
        ]
    },
    {
        "id": "97aff958c632c721",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "5cd013cef2954e8b",
        "type": "comment",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "MQTT Custom Trigger",
        "info": "Mqtt stream data,\nThe Data Handler manage the writing on database on trigger",
        "x": 160,
        "y": 1960,
        "wires": []
    },
    {
        "id": "70f4f4e12df78ea8",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "link in 2",
        "links": [],
        "x": 285,
        "y": 2080,
        "wires": [
            [
                "97aff958c632c721"
            ]
        ]
    },
    {
        "id": "ae9b93f6024f1a5b",
        "type": "http request",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 2540,
        "wires": [
            [
                "c8dfb0e21d473b9f",
                "36cfc10739b6d43e"
            ]
        ]
    },
    {
        "id": "c8dfb0e21d473b9f",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 2600,
        "wires": [
            [
                "ae9b93f6024f1a5b"
            ]
        ]
    },
    {
        "id": "224a7eb602518d7e",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 2600,
        "wires": [
            [
                "c8dfb0e21d473b9f"
            ]
        ]
    },
    {
        "id": "36cfc10739b6d43e",
        "type": "http response",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 2540,
        "wires": []
    },
    {
        "id": "b4c28d85c484f3a6",
        "type": "comment",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "API Rest Custom Trigger",
        "info": "",
        "x": 170,
        "y": 2480,
        "wires": []
    },
    {
        "id": "e0ab7b4f47f25c3c",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "link in 3",
        "links": [],
        "x": 265,
        "y": 2600,
        "wires": [
            [
                "c8dfb0e21d473b9f"
            ]
        ]
    },
    {
        "id": "8ea0828d76c45c8e",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "cc0c0373b0fe4055"
            ]
        ]
    },
    {
        "id": "cc0c0373b0fe4055",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 460,
        "wires": [
            [
                "8ea0828d76c45c8e"
            ]
        ]
    },
    {
        "id": "c37ecf250249c654",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "ABC_2_PLC_trigger_table2",
        "links": [
            "37a26891c1f32a25"
        ],
        "x": 225,
        "y": 460,
        "wires": [
            [
                "8ea0828d76c45c8e"
            ]
        ]
    },
    {
        "id": "466717ed33b0a9eb",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 820,
        "wires": [
            [
                "791ad47733f4c7f6"
            ]
        ]
    },
    {
        "id": "791ad47733f4c7f6",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 820,
        "wires": [
            [
                "466717ed33b0a9eb"
            ]
        ]
    },
    {
        "id": "53e5390bc226b2ac",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 1180,
        "wires": [
            [
                "18289fbe238ca20f"
            ]
        ]
    },
    {
        "id": "18289fbe238ca20f",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 1180,
        "wires": [
            [
                "53e5390bc226b2ac"
            ]
        ]
    },
    {
        "id": "512ab1435f90c2b8",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Endpoint 2 Trigger In",
        "links": [
            "f67d44986870e735",
            "83d53b4a07b209e6",
            "5013c4151da80025",
            "ea971b1902305135"
        ],
        "x": 225,
        "y": 1180,
        "wires": [
            [
                "18289fbe238ca20f"
            ]
        ]
    },
    {
        "id": "0ab71f9de4b74c6f",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 1260,
        "wires": [
            [
                "b367f041ce7a0b6f"
            ]
        ]
    },
    {
        "id": "b367f041ce7a0b6f",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 1260,
        "wires": [
            [
                "0ab71f9de4b74c6f"
            ]
        ]
    },
    {
        "id": "83f769f8f002601f",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Endpoint 2 Trigger In",
        "links": [
            "f67d44986870e735",
            "83d53b4a07b209e6",
            "5013c4151da80025",
            "ea971b1902305135"
        ],
        "x": 225,
        "y": 1260,
        "wires": [
            [
                "b367f041ce7a0b6f"
            ]
        ]
    },
    {
        "id": "772f66f3455cb931",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "name": "link in 4",
        "links": [],
        "x": 605,
        "y": 300,
        "wires": [
            [
                "699c37c704596ef7"
            ]
        ]
    },
    {
        "id": "1f7c3bbc9d451fb3",
        "type": "link out",
        "z": "2dbd8c6f774fdb61",
        "name": "link out 2",
        "mode": "return",
        "links": [],
        "x": 1195,
        "y": 300,
        "wires": []
    },
    {
        "id": "bd35067abfeecb28",
        "type": "subflow:sf_data_handler",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "x": 550,
        "y": 180,
        "wires": [
            [
                "c9300f52a6288a8f"
            ]
        ]
    },
    {
        "id": "c9300f52a6288a8f",
        "type": "link call",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 920,
        "y": 180,
        "wires": [
            [
                "bd35067abfeecb28"
            ]
        ]
    },
    {
        "id": "03a888d51b9c8cc6",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Endpoint 2 Trigger Table 1",
        "links": [],
        "x": 225,
        "y": 740,
        "wires": [
            [
                "76203f45daf5e0ab"
            ]
        ]
    },
    {
        "id": "89ef2b7ef7428912",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Endpoint 2 Trigger Table 2",
        "links": [],
        "x": 225,
        "y": 820,
        "wires": [
            [
                "791ad47733f4c7f6"
            ]
        ]
    },
    {
        "id": "51bf9497870c01f6",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Endpoint 2 Command",
        "links": [],
        "x": 225,
        "y": 660,
        "wires": [
            [
                "2852a215e2725329"
            ]
        ]
    },
    {
        "id": "76db5698389f8a98",
        "type": "link out",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "link out 4",
        "mode": "return",
        "links": [],
        "x": 875,
        "y": 660,
        "wires": []
    },
    {
        "id": "d3ba9fc933164ae9",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "Modbus Endpoint 2 Command",
        "links": [],
        "x": 225,
        "y": 1020,
        "wires": [
            [
                "ba205b4ca777299f"
            ]
        ]
    },
    {
        "id": "3955ffd6254f3184",
        "type": "link out",
        "z": "2dbd8c6f774fdb61",
        "d": true,
        "name": "link out 5",
        "mode": "return",
        "links": [],
        "x": 875,
        "y": 1020,
        "wires": []
    },
    {
        "id": "03ff99690b4ef58e",
        "type": "link in",
        "z": "2dbd8c6f774fdb61",
        "name": "link in 5",
        "links": [],
        "x": 285,
        "y": 1580,
        "wires": [
            [
                "01a26f7c1022392a"
            ]
        ]
    },
    {
        "id": "98b4dca8f5729bda",
        "type": "link out",
        "z": "2dbd8c6f774fdb61",
        "name": "link out 6",
        "mode": "link",
        "links": [],
        "x": 875,
        "y": 1580,
        "wires": []
    },
    {
        "id": "6a3b133f18ac42b5",
        "type": "s7 in",
        "z": "tab_triggers_demo",
        "d": true,
        "endpoint": "29a6bb4325ebcb7d",
        "mode": "single",
        "variable": "",
        "diff": true,
        "name": "",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "afc50602cc0c6679"
            ]
        ]
    },
    {
        "id": "afc50602cc0c6679",
        "type": "function",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "trigger_logic",
        "func": "\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 160,
        "wires": [
            [
                "37a26891c1f32a25"
            ],
            [
                "87dab3481f04949b"
            ]
        ]
    },
    {
        "id": "87dab3481f04949b",
        "type": "s7 out",
        "z": "tab_triggers_demo",
        "d": true,
        "endpoint": "29a6bb4325ebcb7d",
        "variable": "Trigger",
        "name": "Trigger Reset",
        "x": 840,
        "y": 180,
        "wires": []
    },
    {
        "id": "37a26891c1f32a25",
        "type": "link out",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "ABC_2_PLC_trigger_out",
        "mode": "link",
        "links": [
            "ef6990e16be58d1b",
            "c37ecf250249c654"
        ],
        "x": 775,
        "y": 140,
        "wires": []
    },
    {
        "id": "18bdbd6fd0b658a9",
        "type": "comment",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "Custom Trigger Flow - S7",
        "info": "1 - Read On Change only the trigger variable:\n    to do so a new endpoint s7 must be configured. \n    the reading cycle is always for all the configured variables.\n\n2 - Make a custom logic to handle the trigger event\n    OUT 1 - a message with topic 'trigger' \n    to the corresponding endpoint_data_handler (link out)\n    OUT 2 - a message to write the trigger variable if needed \n    to ack the reading process ",
        "x": 170,
        "y": 80,
        "wires": []
    },
    {
        "id": "533a2951ab37fee3",
        "type": "comment",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "Custom Trigger Flow - Modbus",
        "info": "1 - Read Continous only the trigger variable:\n    to do so a new endpoint ModBus must be configured. \n    the Read Node is used for Simple Reading\n\n2 - Make a custom logic to handle the trigger event\n    OUT 1 - a message with topic 'trigger' \n    to the corresponding endpoint_data_handler (link out)\n    OUT 2 - a message to write the trigger variable if needed \n    to ack the reading process ",
        "x": 190,
        "y": 280,
        "wires": []
    },
    {
        "id": "0e0b089593f87680",
        "type": "modbus-read",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "edb89972098ee9ef",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 340,
        "wires": [
            [
                "309d933b335f7d4d"
            ],
            []
        ]
    },
    {
        "id": "f44733df4ac4a281",
        "type": "modbus-write",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "1",
        "server": "edb89972098ee9ef",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 840,
        "y": 360,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "309d933b335f7d4d",
        "type": "function",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "trigger_logic",
        "func": "\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 340,
        "wires": [
            [
                "f67d44986870e735"
            ],
            [
                "f44733df4ac4a281"
            ]
        ]
    },
    {
        "id": "f67d44986870e735",
        "type": "link out",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "Modbus Endpoint 2 Trigger out",
        "mode": "link",
        "links": [
            "f85c22a4ad0eca0e",
            "512ab1435f90c2b8",
            "83f769f8f002601f"
        ],
        "x": 775,
        "y": 320,
        "wires": []
    },
    {
        "id": "5b764b3d19b0edeb",
        "type": "OpcUa-Client",
        "z": "tab_triggers_demo",
        "d": true,
        "endpoint": "f9ff10e208cdc5aa",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 280,
        "y": 520,
        "wires": [
            [
                "eecbca3df74aec50"
            ]
        ]
    },
    {
        "id": "714e45a1241959e7",
        "type": "comment",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "Custom Trigger Flow - Opcua",
        "info": "1 - Subscribe only the trigger variable:\n    handled by the the trigger logic\n\n2 - Make a custom logic to handle the trigger event\n    OUT 1 - a message with topic 'trigger' \n    to the corresponding endpoint_data_handler (link out)\n    OUT 2 - a message to subscribe / read / write the trigger variable ",
        "x": 180,
        "y": 460,
        "wires": []
    },
    {
        "id": "eecbca3df74aec50",
        "type": "function",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "trigger_logic",
        "func": "\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 520,
        "wires": [
            [
                "83d53b4a07b209e6"
            ],
            [
                "5b764b3d19b0edeb"
            ]
        ]
    },
    {
        "id": "83d53b4a07b209e6",
        "type": "link out",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "Modbus Endpoint 2 Trigger out",
        "mode": "link",
        "links": [
            "f85c22a4ad0eca0e",
            "512ab1435f90c2b8",
            "83f769f8f002601f"
        ],
        "x": 775,
        "y": 520,
        "wires": []
    },
    {
        "id": "6b73ee34ddba7d55",
        "type": "mqtt in",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "",
        "topic": "mqtt/data/read/trigger/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0b75090e5169005e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 300,
        "y": 700,
        "wires": [
            [
                "c4dcf6d983d6f46a"
            ]
        ]
    },
    {
        "id": "8f35e15e19ac99a9",
        "type": "comment",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "Custom Trigger Flow - Mqtt",
        "info": "1 - Subscribe only the trigger variable:\n    handled by the the trigger logic\n\n2 - Make a custom logic to handle the trigger event\n    OUT 1 - a message with topic 'trigger' \n    to the corresponding endpoint_data_handler (link out)\n    OUT 2 - a message to subscribe / read / write the trigger variable ",
        "x": 170,
        "y": 640,
        "wires": []
    },
    {
        "id": "5013c4151da80025",
        "type": "link out",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "Modbus Endpoint 2 Trigger out",
        "mode": "link",
        "links": [
            "f85c22a4ad0eca0e",
            "512ab1435f90c2b8",
            "83f769f8f002601f"
        ],
        "x": 775,
        "y": 680,
        "wires": []
    },
    {
        "id": "c4dcf6d983d6f46a",
        "type": "function",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "trigger_logic",
        "func": "\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 700,
        "wires": [
            [
                "5013c4151da80025"
            ],
            [
                "ba2c3473170233f0"
            ]
        ]
    },
    {
        "id": "ba2c3473170233f0",
        "type": "mqtt out",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "",
        "topic": "mqtt/data/write/trigger",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0b75090e5169005e",
        "x": 860,
        "y": 720,
        "wires": []
    },
    {
        "id": "55e353211bf7dcc3",
        "type": "http request",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 900,
        "wires": [
            [
                "f3118b8bab6de184",
                "2edcd94ecb0f2e5d"
            ]
        ]
    },
    {
        "id": "622a54d7047c99ca",
        "type": "comment",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "Custom Trigger Flow - API Rest",
        "info": "1 - Subscribe only the trigger variable:\n    handled by the the trigger logic\n\n2 - Make a custom logic to handle the trigger event\n    OUT 1 - a message with topic 'trigger' \n    to the corresponding endpoint_data_handler (link out)\n    OUT 2 - a message to subscribe / read / write the trigger variable ",
        "x": 190,
        "y": 820,
        "wires": []
    },
    {
        "id": "f3118b8bab6de184",
        "type": "function",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "trigger_logic",
        "func": "\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 900,
        "wires": [
            [
                "ea971b1902305135"
            ],
            [
                "55e353211bf7dcc3"
            ]
        ]
    },
    {
        "id": "2edcd94ecb0f2e5d",
        "type": "http response",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 860,
        "wires": []
    },
    {
        "id": "ea971b1902305135",
        "type": "link out",
        "z": "tab_triggers_demo",
        "d": true,
        "name": "Modbus Endpoint 2 Trigger out",
        "mode": "link",
        "links": [
            "f85c22a4ad0eca0e",
            "512ab1435f90c2b8",
            "83f769f8f002601f"
        ],
        "x": 775,
        "y": 900,
        "wires": []
    },
    {
        "id": "598b668a2f946b7b",
        "type": "inject",
        "z": "9a594799132c8131",
        "name": "start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "start",
        "x": 210,
        "y": 140,
        "wires": [
            [
                "79fe0ca049dabc04"
            ]
        ]
    },
    {
        "id": "8bae392a5677d211",
        "type": "inject",
        "z": "9a594799132c8131",
        "name": "stop",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "stop",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "79fe0ca049dabc04"
            ]
        ]
    },
    {
        "id": "79fe0ca049dabc04",
        "type": "subflow:sf_simulator",
        "z": "9a594799132c8131",
        "name": "Simulator: Reversy_SIM1",
        "env": [
            {
                "name": "TAG_TABLE",
                "value": "tags_odr_reversy_s7",
                "type": "str"
            },
            {
                "name": "DATA_TABLE",
                "value": "data_odr_reversy_s7",
                "type": "str"
            },
            {
                "name": "ENDPOINT_ID",
                "value": "18",
                "type": "num"
            }
        ],
        "x": 470,
        "y": 120,
        "wires": [
            [
                "d0af213874971461"
            ]
        ]
    },
    {
        "id": "d0af213874971461",
        "type": "link call",
        "z": "9a594799132c8131",
        "name": "",
        "links": [
            "b2366c0b7a520910"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 730,
        "y": 120,
        "wires": [
            [
                "79fe0ca049dabc04"
            ]
        ]
    },
    {
        "id": "a36de51e2b0f2318",
        "type": "inject",
        "z": "9a594799132c8131",
        "name": "start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "start",
        "x": 210,
        "y": 280,
        "wires": [
            [
                "b1bc99281bc4d717"
            ]
        ]
    },
    {
        "id": "bb78913506df397a",
        "type": "inject",
        "z": "9a594799132c8131",
        "name": "stop",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "stop",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "b1bc99281bc4d717"
            ]
        ]
    },
    {
        "id": "b1bc99281bc4d717",
        "type": "subflow:sf_simulator",
        "z": "9a594799132c8131",
        "name": "Simulator: Reversy_SIM2",
        "env": [
            {
                "name": "TAG_TABLE",
                "value": "tags_odr_reversy_s7",
                "type": "str"
            },
            {
                "name": "DATA_TABLE",
                "value": "data_odr_reversy_s7",
                "type": "str"
            },
            {
                "name": "ENDPOINT_ID",
                "value": "19",
                "type": "num"
            }
        ],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "64522dfd29e3c11e"
            ]
        ]
    },
    {
        "id": "64522dfd29e3c11e",
        "type": "link call",
        "z": "9a594799132c8131",
        "name": "",
        "links": [
            "b2366c0b7a520910"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 730,
        "y": 260,
        "wires": [
            [
                "b1bc99281bc4d717"
            ]
        ]
    },
    {
        "id": "9d86b0d54d3e226d",
        "type": "status",
        "z": "9a594799132c8131",
        "name": "",
        "scope": null,
        "x": 180,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "d884dbabccd3725b",
        "type": "link out",
        "z": "9a594799132c8131",
        "name": "status_simulation",
        "mode": "link",
        "links": [
            "liALL_status"
        ],
        "x": 355,
        "y": 400,
        "wires": []
    },
    {
        "id": "9f54f25cbf53c163",
        "type": "link in",
        "z": "tab_publishers",
        "d": true,
        "name": "publish",
        "links": [],
        "x": 185,
        "y": 240,
        "wires": [
            [
                "f2df480a63bf05b6",
                "90503fd93b7b69e7",
                "0b3ba546757efe3e"
            ]
        ]
    },
    {
        "id": "f2df480a63bf05b6",
        "type": "function",
        "z": "tab_publishers",
        "d": true,
        "name": "mqtt_parser",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            [
                "3831dd3dfb7cfd2a"
            ]
        ]
    },
    {
        "id": "0b3ba546757efe3e",
        "type": "function",
        "z": "tab_publishers",
        "d": true,
        "name": "opcua_parser",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 520,
        "wires": [
            [
                "acbdb652a665445a"
            ]
        ]
    },
    {
        "id": "81172c41b88738e4",
        "type": "mqtt out",
        "z": "tab_publishers",
        "d": true,
        "name": "",
        "topic": "mqtt/aggregator",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "",
        "x": 740,
        "y": 240,
        "wires": []
    },
    {
        "id": "f9013dbd8c8f165c",
        "type": "OpcUa-Server",
        "z": "tab_publishers",
        "d": true,
        "port": "53880",
        "name": "",
        "endpoint": "",
        "users": "users.json",
        "nodesetDir": "",
        "folderName4PKI": "",
        "autoAcceptUnknownCertificate": true,
        "registerToDiscovery": false,
        "constructDefaultAddressSpace": true,
        "allowAnonymous": true,
        "endpointNone": true,
        "endpointSign": true,
        "endpointSignEncrypt": true,
        "endpointBasic128Rsa15": true,
        "endpointBasic256": true,
        "endpointBasic256Sha256": true,
        "maxNodesPerBrowse": 0,
        "maxNodesPerHistoryReadData": 0,
        "maxNodesPerHistoryReadEvents": 0,
        "maxNodesPerHistoryUpdateData": 0,
        "maxNodesPerRead": 0,
        "maxNodesPerWrite": 0,
        "maxNodesPerMethodCall": 0,
        "maxNodesPerRegisterNodes": 0,
        "maxNodesPerNodeManagement": 0,
        "maxMonitoredItemsPerCall": 0,
        "maxNodesPerHistoryUpdateEvents": 0,
        "maxNodesPerTranslateBrowsePathsToNodeIds": 0,
        "maxConnectionsPerEndpoint": 20,
        "maxMessageSize": 4096,
        "maxBufferSize": 4096,
        "x": 740,
        "y": 520,
        "wires": [
            [
                "784f26f614063137",
                "37da5eb9e9ecc140"
            ]
        ]
    },
    {
        "id": "784f26f614063137",
        "type": "debug",
        "z": "tab_publishers",
        "d": true,
        "name": "OPCUA Server Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 520,
        "wires": []
    },
    {
        "id": "4691f00421186101",
        "type": "debug",
        "z": "tab_publishers",
        "d": true,
        "name": "OPCUA Server In",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "2121915637155a80",
        "type": "inject",
        "z": "tab_publishers",
        "d": true,
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "start",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "37da5eb9e9ecc140"
            ]
        ]
    },
    {
        "id": "a2a8da8df37acb61",
        "type": "comment",
        "z": "tab_publishers",
        "d": true,
        "name": "From Data Handlers",
        "info": "",
        "x": 150,
        "y": 140,
        "wires": []
    },
    {
        "id": "37da5eb9e9ecc140",
        "type": "function",
        "z": "tab_publishers",
        "d": true,
        "name": "initialize_opcua_server",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 600,
        "wires": [
            [
                "acbdb652a665445a"
            ]
        ]
    },
    {
        "id": "a4c21410cda55d68",
        "type": "debug",
        "z": "tab_publishers",
        "d": true,
        "name": "MQTT Aggregator Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 200,
        "wires": []
    },
    {
        "id": "90503fd93b7b69e7",
        "type": "link out",
        "z": "tab_publishers",
        "d": true,
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 335,
        "y": 300,
        "wires": []
    },
    {
        "id": "liALL_errors",
        "type": "link in",
        "z": "tab_errors",
        "name": "error_global",
        "links": [
            "32defa6408e7fa1b"
        ],
        "x": 255,
        "y": 160,
        "wires": [
            [
                "74e123c8bfc3f837",
                "af9f269af08f35f5"
            ]
        ]
    },
    {
        "id": "74e123c8bfc3f837",
        "type": "function",
        "z": "tab_errors",
        "name": "last_global_error",
        "func": "if (msg.error) {\n    node.status({ fill: 'red', shape: 'ring', text: msg.error.message });\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 160,
        "wires": []
    },
    {
        "id": "663563895fd26411",
        "type": "status",
        "z": "tab_errors",
        "name": "",
        "scope": null,
        "x": 300,
        "y": 240,
        "wires": [
            [
                "4ffd59db47c35cad"
            ]
        ]
    },
    {
        "id": "4ffd59db47c35cad",
        "type": "link out",
        "z": "tab_errors",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "liALL_status"
        ],
        "x": 505,
        "y": 240,
        "wires": []
    },
    {
        "id": "af9f269af08f35f5",
        "type": "debug",
        "z": "tab_errors",
        "name": "ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "liALL_status",
        "type": "link in",
        "z": "tab_status",
        "name": "status_global",
        "links": [
            "b343a177e547c7ab",
            "d5b276223db7abb7",
            "d884dbabccd3725b",
            "da6f72c390356126",
            "4ffd59db47c35cad"
        ],
        "x": 225,
        "y": 220,
        "wires": [
            [
                "2020c6bc31bdf317"
            ]
        ]
    },
    {
        "id": "2020c6bc31bdf317",
        "type": "function",
        "z": "tab_status",
        "name": "status_track",
        "func": "if (msg.topic === 'reset_counters') {\n    context.set(\"bad_status\", 0);\n    context.set(\"good_status\", 0);\n    context.set(\"warning_status\", 0);\n    context.set(\"other_status\", 0);\n    context.set(\"unknown_status\", 0);\n    msg.payload = 'done'\n    return [msg, msg];\n}\n\n// Monitor and classify the global status of the system\nlet bad_status = context.get(\"bad_status\") || 0;\nlet good_status = context.get(\"good_status\") || 0;\nlet warning_status = context.get(\"warning_status\") || 0;\nlet other_status = context.get(\"other_status\") || 0;\nlet unknown_status = context.get(\"unknown_status\") || 0;\nlet system_status = \"\";\n\nif (msg.status && msg.status.fill) {\n    switch (msg.status.fill) {\n        case \"red\":\n            bad_status++;\n            system_status = \"bad\";\n            break;\n        case \"green\":\n        case \"blue\":\n            good_status++;\n            system_status = \"good\";\n            break;\n        case \"yellow\":\n            warning_status++;\n            system_status = \"warning\";\n            break;\n        default:\n            other_status++;\n            system_status = \"other\";\n            break;\n    }\n\n    // Save updated values in context\n    context.set(\"bad_status\", bad_status);\n    context.set(\"good_status\", good_status);\n    context.set(\"warning_status\", warning_status);\n    context.set(\"other_status\", other_status);\n} else {\n    unknown_status++;\n    system_status = \"unknown\";\n    context.set(\"unknown_status\", unknown_status);\n}\n\n// Update Node-RED status\nnode.status({\n    fill: \"green\",\n    shape: \"ring\",\n    text: `Good: ${good_status} | Warning: ${warning_status} | Bad: ${bad_status} | Other: ${other_status} | Unknown: ${unknown_status}`\n});\n\nmsg = { type: system_status, ...msg }\nreturn [msg, system_status === 'good' ? null : msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [],
            [
                "4eace211b0539ebb"
            ]
        ]
    },
    {
        "id": "4eace211b0539ebb",
        "type": "debug",
        "z": "tab_status",
        "name": "Status ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 220,
        "wires": []
    },
    {
        "id": "1b16d62ac8f9ac00",
        "type": "inject",
        "z": "tab_status",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "reset_counters",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "2020c6bc31bdf317"
            ]
        ]
    },
    {
        "id": "86482bdb10cb4bf0",
        "type": "ui-markdown",
        "z": "tab_dashboard",
        "group": "cc7097053e18c5dd",
        "name": "Info",
        "order": 1,
        "width": 0,
        "height": 0,
        "content": "# Industrial Edge Developer Guide\n\n**Doc. No.:** 04222-rtc01r00  \n**Date:** 15 November 2024  \n**Location:** Cinisello B. (MI) - Italia  \n\n---\n\n## Table of Contents\n\n1. **Generalities**\n   - Purpose of the Developer Guide\n2. **Overview of Industrial Edge**\n   - What is Industrial Edge?\n   - Convergence of OT and IT\n3. **Industrial Edge Platform**\n   - Architecture Overview\n   - Industrial Edge Hub (IEH)\n   - Industrial Edge Management (IEM)\n   - Industrial Edge Device (IED)\n   - Official Edge Apps\n4. **Docker Essentials**\n   - Introduction to Docker\n   - Key Docker Concepts\n   - Essential Docker Commands\n5. **App Development Environment**\n6. **Creating Custom Docker Images**\n7. **Docker Compose**\n8. **Using the Industrial Edge App Publisher**\n9. **Example: Monitoring App using Grafana and PostgreSQL**\n10. **Appendices**\n    - Glossary of Terms\n    - Reference Materials and Further Reading\n\n---\n\n## Generalities\n\nThe guide aims to provide a comprehensive understanding of Siemens' Industrial Edge Platform, focusing on its architecture, app development, and Docker integration. It introduces custom configurations using tools like Grafana and PostgreSQL.\n\n---\n\n## Overview of Industrial Edge\n\n### What is Industrial Edge?\nA platform leveraging cloud computing for industrial environments, enabling:\n- Local data processing and analysis.\n- Secure runtime environments for applications.\n- Integration with automation and cloud systems.\n\n### Convergence of OT and IT\n- **OT (Operational Technology):** Hardware/software for physical processes (e.g., PLCs, SCADA).\n- **IT (Information Technology):** Data management and analysis systems.\n- Siemens bridges the gap between OT and IT for real-time insights and enhanced security.\n\n---\n\n## Industrial Edge Platform\n\n### Architecture Overview\n1. **Industrial Edge Hub (IEH):** Cloud gateway for managing licenses, apps, and resources.\n2. **Industrial Edge Management (IEM):** On-premises solution for managing devices and applications.\n3. **Industrial Edge Device (IED):** Field-level devices for data collection and local processing.\n\n### Industrial Edge Apps\nApplications for specific tasks like data analysis, visualization, and control.\n\n---\n\n## Docker Essentials\n\n### Introduction to Docker\n- **Containerized Applications:** Portable units encapsulating app code, dependencies, and configurations.\n- **Benefits:** Portability, efficiency, scalability, and isolation.\n\n### Key Docker Concepts\n- **Images:** Pre-configured templates for containers.\n- **Containers:** Running instances of images.\n- **Volumes & Networks:** Persistent data storage and communication mechanisms.\n\n---\n\n## Development and Deployment\n\n### App Development Environment\n- Prerequisites and setup instructions for developing edge applications.\n\n### Creating Custom Docker Images\n- Steps to create Dockerfiles, manage image versions, and store/share images.\n\n### Using Docker Compose\n- YAML file structure for managing multi-container applications.\n- Best practices for data persistence.\n\n---\n\n## Example Application: Grafana & PostgreSQL\n1. **Setup Development Environment**\n2. **Configure PostgreSQL Database**\n3. **Grafana Datasource and Dashboards**\n4. **Deploy via Edge App Publisher**\n\n---\n\n## Appendices\n- **Glossary:** Key terms related to Industrial Edge.\n- **References:**\n  - [Siemens Industrial Edge Overview](https://www.siemens.com/global/en/products/automation/topic-areas/industrial-edge.html)\n  - [Siemens Documentation](https://docs.eu1.edge.siemens.cloud/)\n\n---\n\n**SET sviluppo e tecnologia s.r.l.**  \nHeadquarters: 25043 Breno (BS), Via A. Moro, 28  \nWebsite: [www.grupposet.it](http://www.grupposet.it)\n",
        "className": "",
        "x": 150,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "aa4e161d2d621d12",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "deea34721062895a",
        "page": "",
        "ui": "",
        "name": "Logo InSphere",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<div style=\"text-align: center; margin: 10px;\">\n    <img src=\"/img/sphere-title.png\" alt=\"InSphere Logo\" style=\"max-width: 100%; height: auto;\"/>\n</div>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9cc05bb55c6d2c61",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "c93d09cb7b5cce69",
        "page": "",
        "ui": "",
        "name": "Logo SET",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<div style=\"text-align: center; margin: 10px;\">\n    <a href=\"https://www.grupposet.it\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src=\"/img/gruppo-set.png\" alt=\"Set Logo\" style=\"max-width: 100%; height: auto;\"/>\n    </a>\n</div>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d7ca10b23f8934f5",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "ba72fb0711f52597",
        "page": "",
        "ui": "",
        "name": "Logo Cimprogetti",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<div style=\"text-align: center; margin: 10px;\">\n    <a href=\"https://www.cimprogetti.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src=\"/img/cimprogetti.png\" alt=\"Cimprogetti Logo\" style=\"max-width: 100%; height: auto;\"/>\n    </a>\n</div>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 190,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "4297b2292c13173b",
        "type": "ui-gauge",
        "z": "tab_dashboard",
        "name": "Endpoints",
        "group": "ba4f9fa439e03272",
        "order": 1,
        "width": "4",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Endpoints",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "10",
                "color": "#ffc800"
            },
            {
                "from": "15",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "20",
        "sizeThickness": "30",
        "sizeGap": "10",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 960,
        "y": 220,
        "wires": []
    },
    {
        "id": "419bba3dd07095d1",
        "type": "function",
        "z": "tab_dashboard",
        "name": "get endpoints",
        "func": "let endpoints = global.get('endpoints');\nmsg.payload = endpoints.length\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 220,
        "wires": [
            [
                "4297b2292c13173b"
            ]
        ]
    },
    {
        "id": "66eeae045daaadcb",
        "type": "inject",
        "z": "tab_dashboard",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 570,
        "y": 220,
        "wires": [
            [
                "419bba3dd07095d1"
            ]
        ]
    },
    {
        "id": "7e96a01702f2fa47",
        "type": "ui-gauge",
        "z": "tab_dashboard",
        "name": "Tag Tables",
        "group": "87bd6109d20d1ec2",
        "order": 1,
        "width": "4",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Tag Tables",
        "units": "tables",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "10",
                "color": "#ffc800"
            },
            {
                "from": "15",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "20",
        "sizeThickness": "30",
        "sizeGap": "10",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 970,
        "y": 280,
        "wires": []
    },
    {
        "id": "b0c0f839b54daaac",
        "type": "function",
        "z": "tab_dashboard",
        "name": "get tag tables",
        "func": "let tag_tables = global.get('tag_tables');\nmsg.payload = tag_tables.length\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 280,
        "wires": [
            [
                "7e96a01702f2fa47"
            ]
        ]
    },
    {
        "id": "371dbc8035c9ed23",
        "type": "inject",
        "z": "tab_dashboard",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 570,
        "y": 280,
        "wires": [
            [
                "b0c0f839b54daaac"
            ]
        ]
    },
    {
        "id": "8d7104e801a55547",
        "type": "ui-gauge",
        "z": "tab_dashboard",
        "name": "Tags",
        "group": "56a704c5086d73e5",
        "order": 1,
        "width": "4",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Total Tags",
        "units": "tags",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "1000",
                "color": "#ffc800"
            },
            {
                "from": "1500",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "2000",
        "sizeThickness": "30",
        "sizeGap": "10",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 950,
        "y": 340,
        "wires": []
    },
    {
        "id": "46304bf284ad0d1d",
        "type": "function",
        "z": "tab_dashboard",
        "name": "get tags",
        "func": "let tag_tables = global.get('tag_tables');\nlet count = 0;\nfor (let datum of tag_tables) {\n    let table = global.get(datum.name)\n    count += table.length\n}\nmsg.payload = count\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 340,
        "wires": [
            [
                "8d7104e801a55547"
            ]
        ]
    },
    {
        "id": "b44bcde6a22de720",
        "type": "inject",
        "z": "tab_dashboard",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 570,
        "y": 340,
        "wires": [
            [
                "46304bf284ad0d1d"
            ]
        ]
    },
    {
        "id": "81b2fab889366f4b",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "181ab7e590952d63",
        "page": "",
        "ui": "",
        "name": "Plant",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container class=\"pa-0 ma-0\" fluid>\n    <!-- Background Image -->\n    <v-sheet\n      class=\"d-flex align-center\"\n      style=\"background-image: url('/img/plant.jpg'); background-size: cover; background-position: center; border-radius: 10px; height: 800px;\"\n    >\n      <!-- Button Container -->\n      <v-row class=\"ml-5\" align=\"center\" dense>\n        <v-col cols=\"12\" class=\"mb-4\">\n          <v-btn\n            :href=\"'http://localhost:33000/d/reversyover1/reversy-klin-overview'\"\n            target=\"_blank\"\n            class=\"ma-0\"\n            color=\"blue-darken-3\"\n            dark\n          >\n            Kiln - Overview\n          </v-btn>\n        </v-col>\n\n        <v-col cols=\"12\" class=\"mb-4\">\n          <v-btn\n            :href=\"'http://localhost:33000/d/reversytable1/reversy-klin-table-view'\"\n            target=\"_blank\"\n            class=\"ma-0\"\n            color=\"blue-darken-3\"\n            dark\n          >\n            Kiln - Table View\n          </v-btn>\n        </v-col>\n\n        <v-col cols=\"12\" class=\"mb-4\">\n          <v-btn\n            :href=\"'http://localhost:33000/d/ee95strjzpn28b/lime-klin-cycle-details'\"\n            target=\"_blank\"\n            class=\"ma-0\"\n            color=\"blue-darken-3\"\n            dark\n          >\n            Kiln - Cycle Details\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-sheet>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  name: \"ImageBackgroundWithButtons\",\n};\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "df7fea999961d656",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "28dd6f2de8ecc7e2",
        "page": "",
        "ui": "",
        "name": "limestone_generalities",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container>  \n    \n    <v-row class=\"align-self-center\">\n      <v-col cols=\"8\">\n        <h2 class=\"ma4\">Generalities</h2>\n      </v-col>\n      <v-col cols=\"4\" class=\"text-right\">\n        <!-- Save and Reset Buttons (Visible in Edit Mode) -->\n        <div v-if=\"isEditMode\">\n          <v-btn\n            color=\"primary\"\n            @click=\"resetForm\"\n            class=\"mx-1\"\n          >\n            Reset\n          </v-btn>\n          <v-btn\n            color=\"primary\"\n            :disabled=\"!isFormValid\"\n            @click=\"submitForm\"\n            class=\"mx-1\"\n          >\n            Save Step\n          </v-btn>\n        </div>\n\n        <!-- Edit Button (Visible when not in Edit Mode) -->\n        <v-btn\n          v-else\n          color=\"primary\"\n          @click=\"enableEditMode\"\n        >\n          Edit\n        </v-btn>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <!-- First Row -->\n      <v-col cols=\"4\">\n        <v-text-field\n          label=\"Cycle Date\"\n          outlined\n          v-model=\"formData.date\"\n          :rules=\"[rules.required]\"\n          clearable\n        ></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field\n          label=\"Cycle Time\"\n          outlined\n          v-model=\"formData.hour\"\n          :rules=\"[rules.required]\"\n          clearable\n        ></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field\n          label=\"Progressive Cycle Number\"\n          outlined\n          v-model=\"formData.cy\"\n          :rules=\"[rules.required, rules.numeric]\"\n          clearable\n        ></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <!-- Second Row -->\n      <v-col cols=\"4\">\n        <v-select\n          label=\"Material Code\"\n          :items=\"materialCodes\"\n          item-title=\"title\"\n          item-value=\"value\"\n          outlined\n          v-model=\"formData.mtrCode\"\n          :rules=\"[rules.required]\"\n          clearable\n        ></v-select>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field\n          label=\"Minimum Size (mm)\"\n          outlined\n          v-model=\"formData.minSize\"\n          :rules=\"[rules.required, rules.numeric]\"\n          clearable\n        ></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field\n          label=\"Maximum Size (mm)\"\n          outlined\n          v-model=\"formData.maxSize\"\n          :rules=\"[rules.required, rules.numeric]\"\n          clearable\n        ></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <!-- Third Row -->\n      <v-col cols=\"4\">\n        <v-select\n          label=\"Cleaning Code\"\n          :items=\"cleaningCodes\"\n          item-title=\"title\"\n          item-value=\"value\"\n          outlined\n          v-model=\"formData.cleCode\"\n          :rules=\"[rules.required]\"\n          clearable\n        ></v-select>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-select\n          label=\"Dust Code\"\n          :items=\"dustCodes\"\n          item-title=\"title\"\n          item-value=\"value\"\n          outlined\n          v-model=\"formData.dustCode\"\n          :rules=\"[rules.required]\"\n          clearable\n        ></v-select>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-select\n          label=\"Humidity Code\"\n          :items=\"humidityCodes\"\n          item-title=\"title\"\n          item-value=\"value\"\n          outlined\n          v-model=\"formData.humCode\"\n          :rules=\"[rules.required]\"\n          clearable\n        ></v-select>\n      </v-col>\n    </v-row>\n\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isEditMode: true, // Start in edit mode\n      formData: {\n        date: null,\n        hour: null,\n        cy: null,\n        mtrCode: null,\n        minSize: null,\n        maxSize: null,\n        cleCode: null,\n        dustCode: null,\n        humCode: null,\n      },\n      materialCodes: [\n        { title: \"Limestone\", value: 2 },\n        { title: \"Dolostone\", value: 3 },\n      ],\n      cleaningCodes: [\n        { title: \"Cleaned\", value: 2 },\n        { title: \"Dirty\", value: 3 },\n      ],\n      dustCodes: [\n        { title: \"Dusty\", value: 2 },\n        { title: \"Not Dusty\", value: 3 },\n      ],\n      humidityCodes: [\n        { title: \"Wet\", value: 2 },\n        { title: \"Dry\", value: 3 },\n      ],\n      rules: {\n        required: (value) => !!value || \"This field is required\",\n        numeric: (value) =>\n          !value || !isNaN(value) || \"This field must be numeric\",\n      },\n    };\n  },\n  computed: {\n    isFormValid() {\n      return Object.values(this.formData).every((value) => value !== null);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newValue) {\n        if (newValue.reset && newValue.reset === true) {\n          this.resetForm(); // Reset the form when reset is true\n        }\n      },\n      deep: true, // Watch for nested changes\n    },\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        // Send the form data using Node-RED's send method\n        this.send({\n          topic: \"limestone_generalities\",\n          payload: this.formData,\n        });\n        this.isEditMode = false; // Disable edit mode\n      } else {\n        console.error(\"Form is invalid!\");\n      }\n    },\n    enableEditMode() {\n      this.isEditMode = true; // Enable edit mode\n    },\n    resetForm() {\n      // Reset each field in formData to its default value\n      Object.keys(this.formData).forEach((key) => {\n        this.formData[key] = null;\n      });\n      this.isEditMode = true;\n      console.log(\"Form reset to default values.\");\n    },\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin-bottom: 10px;\n  font-weight: normal;\n  font-size: 20px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 800,
        "wires": [
            [
                "ef06b9c6e7768aad"
            ]
        ]
    },
    {
        "id": "3a9f79a8a14269e6",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "332cfdc7d3ad9b5b",
        "page": "",
        "ui": "",
        "name": "User",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-container class=\"d-flex align-center justify-center\" style=\"height: 100vh;\">\n      <v-card class=\"elevation-3\" width=\"540\" height=\"340\">\n        <v-card-title class=\"text-h5 text-center\">Login</v-card-title>\n        <v-card-text>\n          <v-form ref=\"loginForm\" v-model=\"isValid\">\n            <v-text-field\n              v-model=\"user\"\n              label=\"User\"\n              type=\"user\"\n              :rules=\"userRules\"\n              required\n              outlined\n            ></v-text-field>\n            <v-text-field\n              v-model=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              :rules=\"passwordRules\"\n              required\n              outlined\n            ></v-text-field>\n            <v-btn\n              :disabled=\"!isValid\"\n              color=\"blue-darken-3\"\n              class=\"mt-4\"\n              block\n              @click=\"submitLogin\"\n            >\n              Login\n            </v-btn>\n          </v-form>\n        </v-card-text>\n      </v-card>\n    </v-container>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n        return {\n            user: \"\",\n            password: \"\",\n            isValid: false,\n            userRules: [\n            (v) => !!v || \"User is required\",\n            (v) => v.length >= 3 || \"User must be at least 3 characters long\",\n            (v) => /^[a-zA-Z0-9_]+$/.test(v) || \"User can only contain letters, numbers, and underscores\",\n            ],\n            passwordRules: [\n            (v) => !!v || \"Password is required\",\n            (v) => v.length >= 6 || \"Password must be at least 6 characters\",\n            (v) => /\\d/.test(v) || \"Password must contain at least one number\",\n            ],\n        };\n    },\n    methods: {\n      submitLogin() {\n        if (this.isValid) {\n          // Simulate login logic\n          this.send({\n            payload: {\n                page: \"Home\"\n            },\n            _client: this.msg._client,\n            _msgid: this.msg._msgid,\n        });\n          alert(`Welcome, ${this.user}!`);\n        } else {\n          alert(\"Please fill in all fields correctly.\");\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .v-card {\n    padding: 20px;\n  }\n  </style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 440,
        "wires": [
            [
                "51624227a4bca217"
            ]
        ]
    },
    {
        "id": "2ff0064b6804772a",
        "type": "status",
        "z": "tab_dashboard",
        "name": "",
        "scope": null,
        "x": 760,
        "y": 100,
        "wires": [
            [
                "da6f72c390356126"
            ]
        ]
    },
    {
        "id": "da6f72c390356126",
        "type": "link out",
        "z": "tab_dashboard",
        "name": "status_simulation",
        "mode": "link",
        "links": [
            "liALL_status"
        ],
        "x": 935,
        "y": 100,
        "wires": []
    },
    {
        "id": "ef06b9c6e7768aad",
        "type": "function",
        "z": "tab_dashboard",
        "name": "store_query",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 740,
        "wires": [
            [
                "ed9b0f26028e52bf"
            ]
        ]
    },
    {
        "id": "d13622e19192a346",
        "type": "link call",
        "z": "tab_dashboard",
        "name": "",
        "links": [
            "b2366c0b7a520910"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1010,
        "y": 740,
        "wires": [
            [
                "e80b28274ef1e3d1"
            ]
        ]
    },
    {
        "id": "51624227a4bca217",
        "type": "ui-control",
        "z": "tab_dashboard",
        "name": "",
        "ui": "d7cef5fd92f5328c",
        "events": "all",
        "x": 320,
        "y": 440,
        "wires": [
            [
                "05319443a47b3e33"
            ]
        ]
    },
    {
        "id": "05319443a47b3e33",
        "type": "debug",
        "z": "tab_dashboard",
        "name": "UI",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 440,
        "wires": []
    },
    {
        "id": "429861d4b85de762",
        "type": "inject",
        "z": "tab_dashboard",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 520,
        "wires": [
            [
                "25604b88d2a00a21"
            ]
        ]
    },
    {
        "id": "16068c89c0769746",
        "type": "ui-button",
        "z": "tab_dashboard",
        "group": "362ab153d16b0184",
        "name": "btn_sync_tags",
        "label": "Full Sync",
        "order": 2,
        "width": "6",
        "height": "1",
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "sync",
        "iconPosition": "left",
        "payload": "sync",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 200,
        "y": 600,
        "wires": [
            [
                "25604b88d2a00a21"
            ]
        ]
    },
    {
        "id": "ad3cac1a4453265d",
        "type": "ui-button",
        "z": "tab_dashboard",
        "group": "4290ffc4397af8c8",
        "name": "btn_sync_settings",
        "label": "Full Sync",
        "order": 2,
        "width": "6",
        "height": "1",
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "sync",
        "iconPosition": "left",
        "payload": "sync",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 190,
        "y": 560,
        "wires": [
            [
                "25604b88d2a00a21"
            ]
        ]
    },
    {
        "id": "25604b88d2a00a21",
        "type": "http request",
        "z": "tab_dashboard",
        "name": "GET current flows",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 560,
        "wires": [
            [
                "4527d6c13462e4a6"
            ]
        ]
    },
    {
        "id": "4527d6c13462e4a6",
        "type": "http request",
        "z": "tab_dashboard",
        "name": "POST current flows",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Node-RED-Deployment-Type",
                "valueType": "other",
                "valueValue": "full"
            }
        ],
        "x": 690,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "78d48342228cce47",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "28dd6f2de8ecc7e2",
        "page": "",
        "ui": "",
        "name": "limestone_sizes",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row class=\"align-self-center\">\n      <v-col cols=\"8\">\n        <h2 class=\"ma4\">Sizes</h2>\n      </v-col>\n      <v-col cols=\"4\" class=\"text-right\">\n        <!-- Save and Reset Buttons (Visible in Edit Mode) -->\n        <div v-if=\"isEditMode\">\n          <v-btn\n            color=\"primary\"\n            @click=\"resetForm\"\n            class=\"mx-1\"\n          >\n            Reset\n          </v-btn>\n          <v-btn\n            color=\"primary\"\n            :disabled=\"!isFormValid\"\n            @click=\"submitForm\"\n            class=\"mx-1\"\n          >\n            Save Step\n          </v-btn>\n        </div>\n\n        <!-- Edit Button (Visible when not in Edit Mode) -->\n        <v-btn\n          v-else\n          color=\"primary\"\n          @click=\"enableEditMode\"\n        >\n          Edit\n        </v-btn>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <!-- Generate a text field for each size range -->\n      <v-col cols=\"4\" v-for=\"(size, index) in sizeVariables\" :key=\"index\">\n        <v-text-field\n          :label=\"size.label\"\n          outlined\n          v-model=\"formData[size.key]\"\n          :rules=\"[rules.required, rules.numeric]\"\n          :disabled=\"!isEditMode\"\n          clearable\n        ></v-text-field>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isEditMode: true, // Start in edit mode\n      sizeVariables: [\n        { key: \"size1020\", label: \"Size percentage between 10 to 20 mm\" },\n        { key: \"size2030\", label: \"Size percentage between 20 to 30 mm\" },\n        { key: \"size3040\", label: \"Size percentage between 30 to 40 mm\" },\n        { key: \"size4050\", label: \"Size percentage between 40 to 50 mm\" },\n        { key: \"size5060\", label: \"Size percentage between 50 to 60 mm\" },\n        { key: \"size6070\", label: \"Size percentage between 60 to 70 mm\" },\n        { key: \"size7080\", label: \"Size percentage between 70 to 80 mm\" },\n        { key: \"size8090\", label: \"Size percentage between 80 to 90 mm\" },\n        { key: \"size90100\", label: \"Size percentage between 90 to 100 mm\" },\n        { key: \"size100110\", label: \"Size percentage between 100 to 110 mm\" },\n        { key: \"size110120\", label: \"Size percentage between 110 to 120 mm\" },\n        { key: \"size120130\", label: \"Size percentage between 120 to 130 mm\" },\n        { key: \"size130140\", label: \"Size percentage between 130 to 140 mm\" },\n        { key: \"size140150\", label: \"Size percentage between 140 to 150 mm\" },\n        { key: \"size150160\", label: \"Size percentage between 150 to 160 mm\" },\n      ],\n      formData: {\n        size1020: null,\n        size2030: null,\n        size3040: null,\n        size4050: null,\n        size5060: null,\n        size6070: null,\n        size7080: null,\n        size8090: null,\n        size90100: null,\n        size100110: null,\n        size110120: null,\n        size120130: null,\n        size130140: null,\n        size140150: null,\n        size150160: null,\n      },\n      rules: {\n        required: (value) => !!value || \"This field is required\",\n        numeric: (value) => !value || !isNaN(value) || \"This field must be numeric\",\n      },\n    };\n  },\n  computed: {\n    isFormValid() {\n      return Object.values(this.formData).every((value) => value !== null);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newValue) {\n        if (newValue.reset && newValue.reset === true) {\n          this.resetForm(); // Reset the form when reset is true\n        }\n      },\n      deep: true, // Watch for nested changes\n    },\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        // Send the form data using Node-RED's send method\n        this.send({\n          topic: \"limestone_sizes\",\n          payload: this.formData,\n        });\n        this.isEditMode = false; // Disable edit mode\n      } else {\n        console.error(\"Form is invalid!\");\n      }\n    },\n    enableEditMode() {\n      this.isEditMode = true; // Enable edit mode\n    },\n    resetForm() {\n      // Reset each field in formData to its default value\n      Object.keys(this.formData).forEach((key) => {\n        this.formData[key] = null;\n      });\n      this.isEditMode = true;\n      console.log(\"Form reset to default values.\");\n    },\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin-bottom: 10px;\n  font-weight: normal;\n  font-size: 20px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 460,
        "y": 860,
        "wires": [
            [
                "ef06b9c6e7768aad"
            ]
        ]
    },
    {
        "id": "aff98e68532cccb1",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "28dd6f2de8ecc7e2",
        "page": "",
        "ui": "",
        "name": "limestone_chemicals",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row class=\"align-self-center\">\n      <v-col cols=\"8\">\n        <h2 class=\"ma4\">Chemicals</h2>\n      </v-col>\n      <v-col cols=\"4\" class=\"text-right\">\n        <!-- Save and Reset Buttons (Visible in Edit Mode) -->\n        <div v-if=\"isEditMode\">\n          <v-btn\n            color=\"primary\"\n            @click=\"resetForm\"\n            class=\"mx-1\"\n          >\n            Reset\n          </v-btn>\n          <v-btn\n            color=\"primary\"\n            :disabled=\"!isFormValid\"\n            @click=\"submitForm\"\n            class=\"mx-1\"\n          >\n            Save Step\n          </v-btn>\n        </div>\n\n        <!-- Edit Button (Visible when not in Edit Mode) -->\n        <v-btn\n          v-else\n          color=\"primary\"\n          @click=\"enableEditMode\"\n        >\n          Edit\n        </v-btn>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col\n        cols=\"4\"\n        v-for=\"(field, index) in formFields\"\n        :key=\"index\"\n      >\n        <v-text-field\n          :label=\"field.label\"\n          outlined\n          v-model=\"formData[field.key]\"\n          :rules=\"field.rules\"\n          :disabled=\"!isEditMode\"\n          clearable\n        ></v-text-field>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n\n<script>\nexport default {\n  data() {\n    const rules = {\n      required: (value) => !!value || \"This field is required\",\n      numeric: (value) => !value || !isNaN(value) || \"This field must be numeric\"\n    };\n\n    return {\n      isEditMode: true,\n      rules,\n      formFields: [\n        { key: \"lol\", label: \"Loss of Ignition (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"siO2\", label: \"Silicon Dioxide (SiO2) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"al2O3\", label: \"Aluminum Oxide (Al2O3) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"fe2O3\", label: \"Iron Oxide (Fe2O3) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"k2O\", label: \"Potassium Oxide (K2O) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"caO\", label: \"Calcium Oxide (CaO) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"mgO\", label: \"Magnesium Oxide (MgO) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"so3\", label: \"Sulfur Oxide (SO3) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"srO\", label: \"Strontium Oxide (SrO) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"cuO\", label: \"Copper Oxide (CuO) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"na2O\", label: \"Sodium Oxide (Na2O) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"tiO2\", label: \"Titanium Oxide (TiO2) (%)\", rules: [rules.required, rules.numeric] },\n        { key: \"other\", label: \"Other (%)\", rules: [rules.required, rules.numeric] }\n      ],\n      formData: {\n        lol: null, siO2: null, al2O3: null, fe2O3: null, k2O: null, caO: null,\n        mgO: null, so3: null, srO: null, cuO: null, na2O: null, tiO2: null, other: null\n      }\n    };\n  },\n  computed: {\n    isFormValid() {\n      return Object.values(this.formData).every(value => value !== null);\n    }\n  },\n  watch: {\n    msg: {\n      handler(newValue) {\n        if (newValue.reset && newValue.reset === true) {\n          this.resetForm(); // Reset the form when reset is true\n        }\n      },\n      deep: true, // Watch for nested changes\n    },\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        this.send({ topic: \"limestone_chemicals\", payload: this.formData });\n        this.isEditMode = false;\n      } else {\n        console.error(\"Form is invalid!\");\n      }\n    },\n    enableEditMode() {\n      this.isEditMode = true;\n    },\n    resetForm() {\n      // Reset each field in formData to its default value\n      Object.keys(this.formData).forEach((key) => {\n        this.formData[key] = null;\n      });\n      this.isEditMode = true;\n      console.log(\"Form reset to default values.\");\n    },\n  }\n};\n</script>\n\n<style scoped>\nh2 {\n  margin-bottom: 10px;\n  font-weight: normal;\n  font-size: 20px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 920,
        "wires": [
            [
                "ef06b9c6e7768aad"
            ]
        ]
    },
    {
        "id": "1da1d9e573f0d0e4",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "28dd6f2de8ecc7e2",
        "page": "",
        "ui": "",
        "name": "limestone_others",
        "order": 4,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row class=\"align-self-center\">\n      <v-col cols=\"8\">\n        <h2 class=\"ma4\">Others</h2>\n      </v-col>\n      <v-col cols=\"4\" class=\"text-right\">\n        <!-- Save and Reset Buttons (Visible in Edit Mode) -->\n        <div v-if=\"isEditMode\">\n          <v-btn\n            color=\"primary\"\n            @click=\"resetForm\"\n            class=\"mx-1\"\n          >\n            Reset\n          </v-btn>\n          <v-btn\n            color=\"primary\"\n            :disabled=\"!isFormValid\"\n            @click=\"submitForm\"\n            class=\"mx-1\"\n          >\n            Save Step\n          </v-btn>\n        </div>\n\n        <!-- Edit Button (Visible when not in Edit Mode) -->\n        <v-btn\n          v-else\n          color=\"primary\"\n          @click=\"enableEditMode\"\n        >\n          Edit\n        </v-btn>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <!-- Form Fields -->\n      <v-col cols=\"4\">\n        <v-text-field\n          label=\"Density (g/ml)\"\n          outlined\n          v-model=\"formData.density\"\n          :rules=\"[rules.required, rules.numeric]\"\n          clearable\n        ></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field\n          label=\"Maximum Humidity (%)\"\n          outlined\n          v-model=\"formData.maxHumidity\"\n          :rules=\"[rules.required, rules.numeric]\"\n          clearable\n        ></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field\n          label=\"Mechanical Degradation (%)\"\n          outlined\n          v-model=\"formData.mechanicalDegradation\"\n          :rules=\"[rules.required, rules.numeric]\"\n          clearable\n        ></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"4\">\n        <v-text-field\n          label=\"Stress Index (g)\"\n          outlined\n          v-model=\"formData.stressIndex\"\n          :rules=\"[rules.required, rules.numeric]\"\n          clearable\n        ></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-select\n          label=\"Shape Code\"\n          :items=\"shapeCodes\"\n          item-title=\"title\"\n          item-value=\"value\"\n          outlined\n          v-model=\"formData.shapeCode\"\n          :rules=\"[rules.required]\"\n          clearable\n        ></v-select>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isEditMode: true, // Start in edit mode\n      formData: {\n        density: null,\n        maxHumidity: null,\n        mechanicalDegradation: null,\n        stressIndex: null,\n        shapeCode: null,\n      },\n      shapeCodes: [\n        { title: \"Equal\", value: 2 },\n        { title: \"Stretched to stick\", value: 3 },\n        { title: \"Stretched flat to stick\", value: 4 },\n        { title: \"Irregular\", value: 5 },\n        { title: \"Flat\", value: 6 },\n        { title: \"Uniform\", value: 7 },\n      ],\n      rules: {\n        required: (value) => !!value || \"This field is required\",\n        numeric: (value) => !value || !isNaN(value) || \"This field must be numeric\",\n      },\n    };\n  },\n  computed: {\n    isFormValid() {\n      return Object.values(this.formData).every((value) => value !== null);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newValue) {\n        if (newValue.reset && newValue.reset === true) {\n          this.resetForm(); // Reset the form when reset is true\n        }\n      },\n      deep: true, // Watch for nested changes\n    },\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        // Send the form data using Node-RED's send method\n        this.send({\n          topic: \"limestone_others\",\n          payload: this.formData,\n        });\n        this.isEditMode = false; // Disable edit mode\n      } else {\n        console.error(\"Form is invalid!\");\n      }\n    },\n    enableEditMode() {\n      this.isEditMode = true; // Enable edit mode\n    },\n    resetForm() {\n      // Reset each field in formData to its default value\n      Object.keys(this.formData).forEach((key) => {\n        this.formData[key] = null;\n      });\n      this.isEditMode = true;\n      console.log(\"Form reset to default values.\");\n    },\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin-bottom: 10px;\n  font-weight: normal;\n  font-size: 20px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 980,
        "wires": [
            [
                "ef06b9c6e7768aad"
            ]
        ]
    },
    {
        "id": "e80b28274ef1e3d1",
        "type": "function",
        "z": "tab_dashboard",
        "name": "sync_data",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 740,
        "wires": [
            [
                "df7fea999961d656",
                "78d48342228cce47",
                "aff98e68532cccb1",
                "1da1d9e573f0d0e4"
            ]
        ]
    },
    {
        "id": "ed9b0f26028e52bf",
        "type": "debug",
        "z": "tab_dashboard",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 840,
        "wires": []
    },
    {
        "id": "ec6c435b5bcfed0a",
        "type": "inject",
        "z": "tab_dashboard",
        "name": "reset",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 880,
        "wires": [
            [
                "df7fea999961d656",
                "78d48342228cce47",
                "aff98e68532cccb1",
                "1da1d9e573f0d0e4"
            ]
        ]
    },
    {
        "id": "a941c996c806de49",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "5ed4dbcacc17084e",
        "page": "",
        "ui": "",
        "name": "quicklime_generalities",
        "order": 1,
        "width": "12",
        "height": "1",
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row class=\"align-self-center\">\n      <v-col cols=\"8\">\n        <h2 class=\"ma4\">Generalities</h2>\n      </v-col>\n      <v-col cols=\"4\" class=\"text-right\">\n        <div v-if=\"isEditMode\">\n          <v-btn color=\"primary\" @click=\"resetForm\" class=\"mx-1\">Reset</v-btn>\n          <v-btn color=\"primary\" :disabled=\"!isFormValid\" @click=\"submitForm\" class=\"mx-1\">Save Step</v-btn>\n        </div>\n        <v-btn v-else color=\"primary\" @click=\"enableEditMode\">Edit</v-btn>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Cycle Date\" outlined v-model=\"formData.date\" :rules=\"[rules.required]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Cycle Time\" outlined v-model=\"formData.hour\" :rules=\"[rules.required]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Progressive Cycle Number\" outlined v-model=\"formData.cy\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"3\">\n        <v-select label=\"Shaft 1 Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.s1AspectCode\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 Small Unburned\" outlined v-model=\"formData.s1SmallUn\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 Medium Unburned\" outlined v-model=\"formData.s1MedUn\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 Big Unburned\" outlined v-model=\"formData.s1BigUn\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Residue CO2 (%)\" outlined v-model=\"formData.s1CO2Res\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - LOI (%)\" outlined v-model=\"formData.s1LOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Available CO2 (%)\" outlined v-model=\"formData.s1CO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Mechanical Degradation (%)\" outlined v-model=\"formData.s1MechDeg\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (min)\" outlined v-model=\"formData.s1T40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (sec)\" outlined v-model=\"formData.s1T40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (min)\" outlined v-model=\"formData.s1T60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (sec)\" outlined v-model=\"formData.s1T60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"3\">\n        <v-select label=\"Shaft 2 Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.s2AspectCode\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 Small Unburned\" outlined v-model=\"formData.s2SmallUn\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 Medium Unburned\" outlined v-model=\"formData.s2MedUn\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 Big Unburned\" outlined v-model=\"formData.s2BigUn\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Residue CO2 (%)\" outlined v-model=\"formData.s2CO2Res\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - LOI (%)\" outlined v-model=\"formData.s2LOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Available CO2 (%)\" outlined v-model=\"formData.s2CO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Mechanical Degradation (%)\" outlined v-model=\"formData.s2MechDeg\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (min)\" outlined v-model=\"formData.s2T40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (sec)\" outlined v-model=\"formData.s2T40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (min)\" outlined v-model=\"formData.s2T60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (sec)\" outlined v-model=\"formData.s2T60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isEditMode: true,\n      formData: {\n        date: null,\n        hour: null,\n        cy: null,\n        s1AspectCode: null,\n        s1SmallUn: null,\n        s1MedUn: null,\n        s1BigUn: null,\n        s2AspectCode: null,\n        s2SmallUn: null,\n        s2MedUn: null,\n        s2BigUn: null,\n\n        s1CO2Res: null,\n        s1LOI: null,\n        s1CO2A: null,\n        s1MechDeg: null,\n        s1T40M: null,\n        s1T40S: null,\n        s1T60M: null,\n        s1T60S: null,\n\n        s2CO2Res: null,\n        s2LOI: null,\n        s2CO2A: null,\n        s2MechDeg: null,\n        s2T40M: null,\n        s2T40S: null,\n        s2T60M: null,\n        s2T60S: null,\n\n      },\n      aspectCodes: [\n        { title: \"Quite White\", value: 2 },\n        { title: \"Good\", value: 3 },\n        { title: \"Overburned\", value: 4 },\n        { title: \"Sticky\", value: 5 },\n      ],\n      rules: {\n        required: (value) => !!value || \"This field is required\",\n        numeric: (value) => !value || !isNaN(value) || \"This field must be numeric\",\n      },\n    };\n  },\n  computed: {\n    isFormValid() {\n      return Object.values(this.formData).every((value) => value !== null);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newValue) {\n        if (newValue.reset && newValue.reset === true) {\n          this.resetForm();\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        this.send({\n          topic: \"quicklime_generalities\",\n          payload: this.formData,\n        });\n        this.isEditMode = false;\n      } else {\n        console.error(\"Form is invalid!\");\n      }\n    },\n    enableEditMode() {\n      this.isEditMode = true;\n    },\n    resetForm() {\n      Object.keys(this.formData).forEach((key) => {\n        this.formData[key] = null;\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin-bottom: 10px;\n  font-weight: normal;\n  font-size: 20px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 1120,
        "wires": [
            [
                "da620ff3a434d7f0"
            ]
        ]
    },
    {
        "id": "2b6a3ced08cb0304",
        "type": "ui-button",
        "z": "tab_dashboard",
        "group": "28dd6f2de8ecc7e2",
        "name": "Submit Limestone Data",
        "label": "Submit Limestone Data",
        "order": 7,
        "width": "4",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "center",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 490,
        "y": 740,
        "wires": [
            [
                "ef06b9c6e7768aad"
            ]
        ]
    },
    {
        "id": "097ef16127dab363",
        "type": "function",
        "z": "tab_dashboard",
        "name": "sync_data",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1060,
        "wires": [
            [
                "a941c996c806de49",
                "10a42839ae9e6777",
                "7a63fe5ccc03ed6c",
                "9a13d9b9f89bc3b3",
                "384a0ab596654094",
                "624ad965dedd866d"
            ]
        ]
    },
    {
        "id": "a3cc70e53e13a7cf",
        "type": "ui-button",
        "z": "tab_dashboard",
        "group": "5ed4dbcacc17084e",
        "name": "Submit QuickLime Data",
        "label": "Submit Quicklime Data",
        "order": 9,
        "width": "4",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "center",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 490,
        "y": 1060,
        "wires": [
            [
                "da620ff3a434d7f0"
            ]
        ]
    },
    {
        "id": "da620ff3a434d7f0",
        "type": "function",
        "z": "tab_dashboard",
        "name": "store_query",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1060,
        "wires": [
            [
                "6b4f70b236b447a5"
            ]
        ]
    },
    {
        "id": "45378049064ed26a",
        "type": "link call",
        "z": "tab_dashboard",
        "name": "",
        "links": [
            "b2366c0b7a520910"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1010,
        "y": 1060,
        "wires": [
            [
                "097ef16127dab363"
            ]
        ]
    },
    {
        "id": "6b4f70b236b447a5",
        "type": "debug",
        "z": "tab_dashboard",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1160,
        "wires": []
    },
    {
        "id": "76fe66e64ae83372",
        "type": "inject",
        "z": "tab_dashboard",
        "name": "reset",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1260,
        "wires": [
            [
                "a941c996c806de49",
                "10a42839ae9e6777",
                "7a63fe5ccc03ed6c",
                "9a13d9b9f89bc3b3",
                "384a0ab596654094",
                "624ad965dedd866d"
            ]
        ]
    },
    {
        "id": "10a42839ae9e6777",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "5ed4dbcacc17084e",
        "page": "",
        "ui": "",
        "name": "quicklime_pipe1",
        "order": 2,
        "width": "12",
        "height": "1",
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row class=\"align-self-center\">\n      <v-col cols=\"8\">\n        <h2 class=\"ma4\">Pipe - Side 1</h2>\n      </v-col>\n      <v-col cols=\"4\" class=\"text-right\">\n        <div v-if=\"isEditMode\">\n          <v-btn color=\"primary\" @click=\"resetForm\" class=\"mx-1\">Reset</v-btn>\n          <v-btn color=\"primary\" :disabled=\"!isFormValid\" @click=\"submitForm\" class=\"mx-1\">Save Step</v-btn>\n        </div>\n        <v-btn v-else color=\"primary\" @click=\"enableEditMode\">Edit</v-btn>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"6\">\n        <v-select label=\"Shaft 1 - Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.S1PIP1ASPCODE\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field label=\"Shaft 1 - Residue CO2 (%)\" outlined v-model=\"formData.S1PIP1CO2RES\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (min)\" outlined v-model=\"formData.S1PIP1T40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (sec)\" outlined v-model=\"formData.S1PIP1T40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (min)\" outlined v-model=\"formData.S1PIP1T60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (sec)\" outlined v-model=\"formData.S1PIP1T60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - LOI (%)\" outlined v-model=\"formData.S1PIP1LOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - Available CO2 (%)\" outlined v-model=\"formData.S1PIP1CO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - Mechanical Degradation (%)\" outlined v-model=\"formData.S1PIP1MECDEG\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"6\">\n        <v-select label=\"Shaft 2 - Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.S2PIP1ASPCODE\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field label=\"Shaft 2 - Residue CO2 (%)\" outlined v-model=\"formData.S2PIP1CO2RES\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (min)\" outlined v-model=\"formData.S2PIP1T40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (sec)\" outlined v-model=\"formData.S2PIP1T40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (min)\" outlined v-model=\"formData.S2PIP1T60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (sec)\" outlined v-model=\"formData.S2PIP1T60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - LOI (%)\" outlined v-model=\"formData.S2PIP1LOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - Available CO2 (%)\" outlined v-model=\"formData.S2PIP1CO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - Mechanical Degradation (%)\" outlined v-model=\"formData.S2PIP1MECDEG\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isEditMode: true,\n      formData: {\n        S1PIP1ASPCODE: null,\n        S1PIP1CO2RES: null,\n        S1PIP1T40M: null,\n        S1PIP1T40S: null,\n        S1PIP1T60M: null,\n        S1PIP1T60S: null,\n        S1PIP1LOI: null,\n        S1PIP1CO2A: null,\n        S1PIP1MECDEG: null,\n\n        S2PIP1ASPCODE: null,\n        S2PIP1CO2RES: null,\n        S2PIP1T40M: null,\n        S2PIP1T40S: null,\n        S2PIP1T60M: null,\n        S2PIP1T60S: null,\n        S2PIP1LOI: null,\n        S2PIP1CO2A: null,\n        S2PIP1MECDEG: null,\n      },\n      aspectCodes: [\n        { title: \"Quite White\", value: 2 },\n        { title: \"Good\", value: 3 },\n        { title: \"Overburned\", value: 4 },\n        { title: \"Sticky\", value: 5 },\n      ],\n      rules: {\n        required: (value) => !!value || \"This field is required\",\n        numeric: (value) => !value || !isNaN(value) || \"This field must be numeric\",\n      },\n    };\n  },\n  computed: {\n    isFormValid() {\n      return Object.values(this.formData).every((value) => value !== null);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newValue) {\n        if (newValue.reset && newValue.reset === true) {\n          this.resetForm();\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        this.send({\n          topic: \"quicklime_pipe_side1\",\n          payload: this.formData,\n        });\n        this.isEditMode = false;\n      } else {\n        console.error(\"Form is invalid!\");\n      }\n    },\n    enableEditMode() {\n      this.isEditMode = true;\n    },\n    resetForm() {\n      Object.keys(this.formData).forEach((key) => {\n        this.formData[key] = null;\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin-bottom: 10px;\n  font-weight: normal;\n  font-size: 20px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 460,
        "y": 1180,
        "wires": [
            [
                "da620ff3a434d7f0"
            ]
        ]
    },
    {
        "id": "7a63fe5ccc03ed6c",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "5ed4dbcacc17084e",
        "page": "",
        "ui": "",
        "name": "quicklime_pipe2",
        "order": 3,
        "width": "12",
        "height": "1",
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row class=\"align-self-center\">\n      <v-col cols=\"8\">\n        <h2 class=\"ma4\">Pipe - Side 2</h2>\n      </v-col>\n      <v-col cols=\"4\" class=\"text-right\">\n        <div v-if=\"isEditMode\">\n          <v-btn color=\"primary\" @click=\"resetForm\" class=\"mx-1\">Reset</v-btn>\n          <v-btn color=\"primary\" :disabled=\"!isFormValid\" @click=\"submitForm\" class=\"mx-1\">Save Step</v-btn>\n        </div>\n        <v-btn v-else color=\"primary\" @click=\"enableEditMode\">Edit</v-btn>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"6\">\n        <v-select label=\"Shaft 1 - Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.S1PIP2ASPCODE\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field label=\"Shaft 1 - Residue CO2 (%)\" outlined v-model=\"formData.S1PIP2CO2RES\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (min)\" outlined v-model=\"formData.S1PIP2T40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (sec)\" outlined v-model=\"formData.S1PIP2T40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (min)\" outlined v-model=\"formData.S1PIP2T60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (sec)\" outlined v-model=\"formData.S1PIP2T60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - LOI (%)\" outlined v-model=\"formData.S1PIP2LOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - Available CO2 (%)\" outlined v-model=\"formData.S1PIP2CO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - Mechanical Degradation (%)\" outlined v-model=\"formData.S1PIP2MECDEG\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"6\">\n        <v-select label=\"Shaft 2 - Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.S2PIP2ASPCODE\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field label=\"Shaft 2 - Residue CO2 (%)\" outlined v-model=\"formData.S2PIP2CO2RES\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (min)\" outlined v-model=\"formData.S2PIP2T40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (sec)\" outlined v-model=\"formData.S2PIP2T40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (min)\" outlined v-model=\"formData.S2PIP2T60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (sec)\" outlined v-model=\"formData.S2PIP2T60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - LOI (%)\" outlined v-model=\"formData.S2PIP2LOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - Available CO2 (%)\" outlined v-model=\"formData.S2PIP2CO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - Mechanical Degradation (%)\" outlined v-model=\"formData.S2PIP2MECDEG\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isEditMode: true,\n      formData: {\n        S1PIP2ASPCODE: null,\n        S1PIP2CO2RES: null,\n        S1PIP2T40M: null,\n        S1PIP2T40S: null,\n        S1PIP2T60M: null,\n        S1PIP2T60S: null,\n        S1PIP2LOI: null,\n        S1PIP2CO2A: null,\n        S1PIP2MECDEG: null,\n\n        S2PIP2ASPCODE: null,\n        S2PIP2CO2RES: null,\n        S2PIP2T40M: null,\n        S2PIP2T40S: null,\n        S2PIP2T60M: null,\n        S2PIP2T60S: null,\n        S2PIP2LOI: null,\n        S2PIP2CO2A: null,\n        S2PIP2MECDEG: null,\n      },\n      aspectCodes: [\n        { title: \"Quite White\", value: 2 },\n        { title: \"Good\", value: 3 },\n        { title: \"Overburned\", value: 4 },\n        { title: \"Sticky\", value: 5 },\n      ],\n      rules: {\n        required: (value) => !!value || \"This field is required\",\n        numeric: (value) => !value || !isNaN(value) || \"This field must be numeric\",\n      },\n    };\n  },\n  computed: {\n    isFormValid() {\n      return Object.values(this.formData).every((value) => value !== null);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newValue) {\n        if (newValue.reset && newValue.reset === true) {\n          this.resetForm();\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        this.send({\n          topic: \"quicklime_pipe_side2\",\n          payload: this.formData,\n        });\n        this.isEditMode = false;\n      } else {\n        console.error(\"Form is invalid!\");\n      }\n    },\n    enableEditMode() {\n      this.isEditMode = true;\n    },\n    resetForm() {\n      Object.keys(this.formData).forEach((key) => {\n        this.formData[key] = null;\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin-bottom: 10px;\n  font-weight: normal;\n  font-size: 20px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 460,
        "y": 1240,
        "wires": [
            [
                "da620ff3a434d7f0"
            ]
        ]
    },
    {
        "id": "9a13d9b9f89bc3b3",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "5ed4dbcacc17084e",
        "page": "",
        "ui": "",
        "name": "quicklime_skip",
        "order": 4,
        "width": "12",
        "height": "1",
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row class=\"align-self-center\">\n      <v-col cols=\"8\">\n        <h2 class=\"ma4\">Skip</h2>\n      </v-col>\n      <v-col cols=\"4\" class=\"text-right\">\n        <div v-if=\"isEditMode\">\n          <v-btn color=\"primary\" @click=\"resetForm\" class=\"mx-1\">Reset</v-btn>\n          <v-btn color=\"primary\" :disabled=\"!isFormValid\" @click=\"submitForm\" class=\"mx-1\">Save Step</v-btn>\n        </div>\n        <v-btn v-else color=\"primary\" @click=\"enableEditMode\">Edit</v-btn>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"6\">\n        <v-select label=\"Shaft 1 - Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.S1SKIASPCODE\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field label=\"Shaft 1 - Residue CO2 (%)\" outlined v-model=\"formData.S1SKICO2RES\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (min)\" outlined v-model=\"formData.S1SKIT40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (sec)\" outlined v-model=\"formData.S1SKIT40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (min)\" outlined v-model=\"formData.S1SKIT60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (sec)\" outlined v-model=\"formData.S1SKIT60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - LOI (%)\" outlined v-model=\"formData.S1SKILOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - Available CO2 (%)\" outlined v-model=\"formData.S1SKICO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - Mechanical Degradation (%)\" outlined v-model=\"formData.S1SKIMECDEG\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"6\">\n        <v-select label=\"Shaft 2 - Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.S2SKIASPCODE\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field label=\"Shaft 2 - Residue CO2 (%)\" outlined v-model=\"formData.S2SKICO2RES\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (min)\" outlined v-model=\"formData.S2SKIT40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (sec)\" outlined v-model=\"formData.S2SKIT40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (min)\" outlined v-model=\"formData.S2SKIT60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (sec)\" outlined v-model=\"formData.S2SKIT60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - LOI (%)\" outlined v-model=\"formData.S2SKILOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - Available CO2 (%)\" outlined v-model=\"formData.S2SKICO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - Mechanical Degradation (%)\" outlined v-model=\"formData.S2SKIMECDEG\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isEditMode: true,\n      formData: {\n        S1SKIASPCODE: null,\n        S1SKICO2RES: null,\n        S1SKIT40M: null,\n        S1SKIT40S: null,\n        S1SKIT60M: null,\n        S1SKIT60S: null,\n        S1SKILOI: null,\n        S1SKICO2A: null,\n        S1SKIMECDEG: null,\n\n        S2SKIASPCODE: null,\n        S2SKICO2RES: null,\n        S2SKIT40M: null,\n        S2SKIT40S: null,\n        S2SKIT60M: null,\n        S2SKIT60S: null,\n        S2SKILOI: null,\n        S2SKICO2A: null,\n        S2SKIMECDEG: null,\n      },\n      aspectCodes: [\n        { title: \"Quite White\", value: 2 },\n        { title: \"Good\", value: 3 },\n        { title: \"Overburned\", value: 4 },\n        { title: \"Sticky\", value: 5 },\n      ],\n      rules: {\n        required: (value) => !!value || \"This field is required\",\n        numeric: (value) => !value || !isNaN(value) || \"This field must be numeric\",\n      },\n    };\n  },\n  computed: {\n    isFormValid() {\n      return Object.values(this.formData).every((value) => value !== null);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newValue) {\n        if (newValue.reset && newValue.reset === true) {\n          this.resetForm();\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        this.send({\n          topic: \"quicklime_skip\",\n          payload: this.formData,\n        });\n        this.isEditMode = false;\n      } else {\n        console.error(\"Form is invalid!\");\n      }\n    },\n    enableEditMode() {\n      this.isEditMode = true;\n    },\n    resetForm() {\n      Object.keys(this.formData).forEach((key) => {\n        this.formData[key] = null;\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin-bottom: 10px;\n  font-weight: normal;\n  font-size: 20px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 460,
        "y": 1300,
        "wires": [
            [
                "da620ff3a434d7f0"
            ]
        ]
    },
    {
        "id": "384a0ab596654094",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "5ed4dbcacc17084e",
        "page": "",
        "ui": "",
        "name": "quicklime_internal",
        "order": 5,
        "width": "12",
        "height": "1",
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row class=\"align-self-center\">\n      <v-col cols=\"8\">\n        <h2 class=\"ma4\">Internal</h2>\n      </v-col>\n      <v-col cols=\"4\" class=\"text-right\">\n        <div v-if=\"isEditMode\">\n          <v-btn color=\"primary\" @click=\"resetForm\" class=\"mx-1\">Reset</v-btn>\n          <v-btn color=\"primary\" :disabled=\"!isFormValid\" @click=\"submitForm\" class=\"mx-1\">Save Step</v-btn>\n        </div>\n        <v-btn v-else color=\"primary\" @click=\"enableEditMode\">Edit</v-btn>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"6\">\n        <v-select label=\"Shaft 1 - Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.S1INTASPCODE\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field label=\"Shaft 1 - Residue CO2 (%)\" outlined v-model=\"formData.S1INTCO2RES\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (min)\" outlined v-model=\"formData.S1INTT40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (sec)\" outlined v-model=\"formData.S1INTT40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (min)\" outlined v-model=\"formData.S1INTT60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (sec)\" outlined v-model=\"formData.S1INTT60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - LOI (%)\" outlined v-model=\"formData.S1INTLOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - Available CO2 (%)\" outlined v-model=\"formData.S1INTCO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - Mechanical Degradation (%)\" outlined v-model=\"formData.S1INTMECDEG\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"6\">\n        <v-select label=\"Shaft 2 - Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.S2INTASPCODE\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field label=\"Shaft 2 - Residue CO2 (%)\" outlined v-model=\"formData.S2INTCO2RES\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (min)\" outlined v-model=\"formData.S2INTT40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (sec)\" outlined v-model=\"formData.S2INTT40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (min)\" outlined v-model=\"formData.S2INTT60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (sec)\" outlined v-model=\"formData.S2INTT60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - LOI (%)\" outlined v-model=\"formData.S2INTLOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - Available CO2 (%)\" outlined v-model=\"formData.S2INTCO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - Mechanical Degradation (%)\" outlined v-model=\"formData.S2INTMECDEG\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isEditMode: true,\n      formData: {\n        S1INTASPCODE: null,\n        S1INTCO2RES: null,\n        S1INTT40M: null,\n        S1INTT40S: null,\n        S1INTT60M: null,\n        S1INTT60S: null,\n        S1INTLOI: null,\n        S1INTCO2A: null,\n        S1INTMECDEG: null,\n        \n        S2INTASPCODE: null,\n        S2INTCO2RES: null,\n        S2INTT40M: null,\n        S2INTT40S: null,\n        S2INTT60M: null,\n        S2INTT60S: null,\n        S2INTLOI: null,\n        S2INTCO2A: null,\n        S2INTMECDEG: null,\n      },\n      aspectCodes: [\n        { title: \"Quite White\", value: 2 },\n        { title: \"Good\", value: 3 },\n        { title: \"Overburned\", value: 4 },\n        { title: \"Sticky\", value: 5 },\n      ],\n      rules: {\n        required: (value) => !!value || \"This field is required\",\n        numeric: (value) => !value || !isNaN(value) || \"This field must be numeric\",\n      },\n    };\n  },\n  computed: {\n    isFormValid() {\n      return Object.values(this.formData).every((value) => value !== null);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newValue) {\n        if (newValue.reset && newValue.reset === true) {\n          this.resetForm();\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        this.send({\n          topic: \"quicklime_internal\",\n          payload: this.formData,\n        });\n        this.isEditMode = false;\n      } else {\n        console.error(\"Form is invalid!\");\n      }\n    },\n    enableEditMode() {\n      this.isEditMode = true;\n    },\n    resetForm() {\n      Object.keys(this.formData).forEach((key) => {\n        this.formData[key] = null;\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin-bottom: 10px;\n  font-weight: normal;\n  font-size: 20px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 1360,
        "wires": [
            [
                "da620ff3a434d7f0"
            ]
        ]
    },
    {
        "id": "624ad965dedd866d",
        "type": "ui-template",
        "z": "tab_dashboard",
        "group": "5ed4dbcacc17084e",
        "page": "",
        "ui": "",
        "name": "quicklime_external",
        "order": 6,
        "width": "12",
        "height": "1",
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row class=\"align-self-center\">\n      <v-col cols=\"8\">\n        <h2 class=\"ma4\">External</h2>\n      </v-col>\n      <v-col cols=\"4\" class=\"text-right\">\n        <div v-if=\"isEditMode\">\n          <v-btn color=\"primary\" @click=\"resetForm\" class=\"mx-1\">Reset</v-btn>\n          <v-btn color=\"primary\" :disabled=\"!isFormValid\" @click=\"submitForm\" class=\"mx-1\">Save Step</v-btn>\n        </div>\n        <v-btn v-else color=\"primary\" @click=\"enableEditMode\">Edit</v-btn>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"6\">\n        <v-select label=\"Shaft 1 - Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.S1EXTASPCODE\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field label=\"Shaft 1 - Residue CO2 (%)\" outlined v-model=\"formData.S1EXTCO2RES\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (min)\" outlined v-model=\"formData.S1EXTT40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T40 (sec)\" outlined v-model=\"formData.S1EXTT40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (min)\" outlined v-model=\"formData.S1EXTT60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 1 - Reactivity T60 (sec)\" outlined v-model=\"formData.S1EXTT60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - LOI (%)\" outlined v-model=\"formData.S1EXTLOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - Available CO2 (%)\" outlined v-model=\"formData.S1EXTCO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 1 - Mechanical Degradation (%)\" outlined v-model=\"formData.S1EXTMECDEG\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"6\">\n        <v-select label=\"Shaft 2 - Aspect Code\" :items=\"aspectCodes\" item-title=\"title\" item-value=\"value\" outlined v-model=\"formData.S2EXTASPCODE\" :rules=\"[rules.required]\" clearable></v-select>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field label=\"Shaft 2 - Residue CO2 (%)\" outlined v-model=\"formData.S2EXTCO2RES\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (min)\" outlined v-model=\"formData.S2EXTT40M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T40 (sec)\" outlined v-model=\"formData.S2EXTT40S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (min)\" outlined v-model=\"formData.S2EXTT60M\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-text-field label=\"Shaft 2 - Reactivity T60 (sec)\" outlined v-model=\"formData.S2EXTT60S\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - LOI (%)\" outlined v-model=\"formData.S2EXTLOI\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - Available CO2 (%)\" outlined v-model=\"formData.S2EXTCO2A\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <v-text-field label=\"Shaft 2 - Mechanical Degradation (%)\" outlined v-model=\"formData.S2EXTMECDEG\" :rules=\"[rules.required, rules.numeric]\" clearable></v-text-field>\n      </v-col>\n    </v-row>\n\n\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isEditMode: true,\n      formData: {\n        S1EXTASPCODE: null,\n        S1EXTCO2RES: null,\n        S1EXTT40M: null,\n        S1EXTT40S: null,\n        S1EXTT60M: null,\n        S1EXTT60S: null,\n        S1EXTLOI: null,\n        S1EXTCO2A: null,\n        S1EXTMECDEG: null,\n        \n        S2EXTASPCODE: null,\n        S2EXTCO2RES: null,\n        S2EXTT40M: null,\n        S2EXTT40S: null,\n        S2EXTT60M: null,\n        S2EXTT60S: null,\n        S2EXTLOI: null,\n        S2EXTCO2A: null,\n        S2EXTMECDEG: null,\n      },\n      aspectCodes: [\n        { title: \"Quite White\", value: 2 },\n        { title: \"Good\", value: 3 },\n        { title: \"Overburned\", value: 4 },\n        { title: \"Sticky\", value: 5 },\n      ],\n      rules: {\n        required: (value) => !!value || \"This field is required\",\n        numeric: (value) => !value || !isNaN(value) || \"This field must be numeric\",\n      },\n    };\n  },\n  computed: {\n    isFormValid() {\n      return Object.values(this.formData).every((value) => value !== null);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newValue) {\n        if (newValue.reset && newValue.reset === true) {\n          this.resetForm();\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        this.send({\n          topic: \"quicklime_external\",\n          payload: this.formData,\n        });\n        this.isEditMode = false;\n      } else {\n        console.error(\"Form is invalid!\");\n      }\n    },\n    enableEditMode() {\n      this.isEditMode = true;\n    },\n    resetForm() {\n      Object.keys(this.formData).forEach((key) => {\n        this.formData[key] = null;\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  margin-bottom: 10px;\n  font-weight: normal;\n  font-size: 20px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 1420,
        "wires": [
            [
                "da620ff3a434d7f0"
            ]
        ]
    },
    {
        "id": "29f37670.2db7f8",
        "type": "inject",
        "z": "tab_grafana_api",
        "name": "Trigger Image Download",
        "props": [
            {
                "p": "image_path",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "59308414b5bc75af"
            ]
        ]
    },
    {
        "id": "12345678.abcd12",
        "type": "http request",
        "z": "tab_grafana_api",
        "name": "Download Image",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "http://grafana:3000/render/d/reversyover1/reversy-klin-overview?var-interval_text=1m&orgId=1&from=now-24h&to=now&timezone=browser&var-endpoint=Reversy_PLC1&var-endpoint_id=11&var-tag_table=tags_reversy_odr_s7&var-data_table=data_reversy_odr_s7&var-lables=air&var-time_range=86400&var-interval_ms=60000&refresh=10s&width=1920&height=3000&theme=light&kiosk",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 160,
        "wires": [
            [
                "23456789.efgh34",
                "513f4937cef4683c"
            ]
        ]
    },
    {
        "id": "23456789.efgh34",
        "type": "file",
        "z": "tab_grafana_api",
        "name": "Save Image",
        "filename": "image_path",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 890,
        "y": 160,
        "wires": [
            [
                "443d896337e36dbb"
            ]
        ]
    },
    {
        "id": "443d896337e36dbb",
        "type": "debug",
        "z": "tab_grafana_api",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 260,
        "wires": []
    },
    {
        "id": "c3b7bc2906f00261",
        "type": "inject",
        "z": "tab_grafana_api",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "5ed1fac2d6ae79af"
            ]
        ]
    },
    {
        "id": "5ed1fac2d6ae79af",
        "type": "http request",
        "z": "tab_grafana_api",
        "name": "Fetch Dashboard Info",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana:3000/api/dashboards/uid/reversyover1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 380,
        "y": 440,
        "wires": [
            [
                "b3cf0da5db84a27f"
            ]
        ]
    },
    {
        "id": "b3cf0da5db84a27f",
        "type": "debug",
        "z": "tab_grafana_api",
        "name": "Display Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 440,
        "wires": []
    },
    {
        "id": "60ccca32129fdbb7",
        "type": "comment",
        "z": "tab_grafana_api",
        "name": "Read from image render grafana",
        "info": "",
        "x": 210,
        "y": 60,
        "wires": []
    },
    {
        "id": "0fcc2641eeffe2b6",
        "type": "comment",
        "z": "tab_grafana_api",
        "name": "Read from Grafana json in API",
        "info": "",
        "x": 210,
        "y": 360,
        "wires": []
    },
    {
        "id": "59308414b5bc75af",
        "type": "function",
        "z": "tab_grafana_api",
        "name": "file_name",
        "func": "let dateTime = new Date().toISOString();\nmsg.image_path = `/home/nodered/node-red-home/node-red-files/${dateTime}_dashboard.png`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 160,
        "wires": [
            [
                "12345678.abcd12"
            ]
        ]
    },
    {
        "id": "http_in",
        "type": "http in",
        "z": "tab_grafana_api",
        "name": "HTTP Report Endpoint",
        "url": "/report",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 320,
        "y": 260,
        "wires": [
            [
                "process_data",
                "debug_node"
            ]
        ]
    },
    {
        "id": "process_data",
        "type": "function",
        "z": "tab_grafana_api",
        "name": "process_data",
        "func": "msg.payload = { received: msg.payload, timestamp: Date.now() }; \nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 260,
        "wires": [
            [
                "http_response"
            ]
        ]
    },
    {
        "id": "http_response",
        "type": "http response",
        "z": "tab_grafana_api",
        "name": "Send Response",
        "statusCode": "",
        "headers": {},
        "x": 780,
        "y": 260,
        "wires": []
    },
    {
        "id": "debug_node",
        "type": "debug",
        "z": "tab_grafana_api",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 530,
        "y": 300,
        "wires": []
    },
    {
        "id": "00cffd4cf65e8bdb",
        "type": "inject",
        "z": "tab_grafana_api",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "b565f78d39e92542"
            ]
        ]
    },
    {
        "id": "b565f78d39e92542",
        "type": "http request",
        "z": "tab_grafana_api",
        "name": "Fetch Dashboard Info",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://grafana:3000/api/dashboards/uid/fealtvfhk6w3kf",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 380,
        "y": 480,
        "wires": [
            [
                "d8f0d85a131f9a34"
            ]
        ]
    },
    {
        "id": "d8f0d85a131f9a34",
        "type": "debug",
        "z": "tab_grafana_api",
        "name": "Display Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 480,
        "wires": []
    },
    {
        "id": "56f16b4ed569179e",
        "type": "inject",
        "z": "tab_grafana_api",
        "name": "Trigger Image Download",
        "props": [
            {
                "p": "image_path",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 200,
        "wires": [
            [
                "72621067fe4faad4"
            ]
        ]
    },
    {
        "id": "cd7dc73f68560587",
        "type": "http request",
        "z": "tab_grafana_api",
        "name": "Download Image",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "http://grafana:3000/render/d-solo/fealtvfhk6w3kf/new-dashboard?panelId=2&orgId=1&width=500&height=1000&theme=light&from=now-6h&to=now&timezone=browser&kiosk",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "23456789.efgh34",
                "513f4937cef4683c"
            ]
        ]
    },
    {
        "id": "72621067fe4faad4",
        "type": "function",
        "z": "tab_grafana_api",
        "name": "file_name",
        "func": "let dateTime = new Date().toISOString();\nmsg.image_path = `/home/nodered/node-red-home/node-red-files/${dateTime}_dashboard.png`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 200,
        "wires": [
            [
                "cd7dc73f68560587"
            ]
        ]
    },
    {
        "id": "513f4937cef4683c",
        "type": "debug",
        "z": "tab_grafana_api",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 120,
        "wires": []
    }
]