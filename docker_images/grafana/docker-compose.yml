version: "2.4"

services:
  # Grafana service: runs Grafana Enterprise with custom configuration, dashboards, and provisioning.
  grafana:
    image: grafana/grafana-enterprise:11.3.1-ubuntu
    container_name: grafana
    restart: unless-stopped
    mem_limit: 1g
    environment:
      # Set admin credentials and rendering configuration
      GF_SECURITY_ADMIN_USER: edge
      GF_SECURITY_ADMIN_PASSWORD: edgeadmin
      # GF_PATHS_CONFIG: /etc/grafana/custom.ini  # Uncomment to use a custom config file
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000
      GF_LOG_FILTERS: rendering:debug
      GF_INSTALL_PLUGINS: grafana-image-renderer
    ports:
      - "33000:3000"   # Exposes Grafana UI on host port 33000
    networks:
      - proxy-redirect  # Connects to the external network for inter-container communication
    user: '1000'
    volumes:
      - grafana_data:/var/lib/grafana         # Persist Grafana data
      - ./custom/provisioning:/etc/grafana/provisioning  # Provisioning configuration files
      - ./custom/dashboards:/var/lib/grafana/dashboards  # Pre-loaded dashboards
      - ./custom/bg:/usr/share/grafana/public/img/bg      # Custom background images

  # Renderer service: handles image rendering for Grafana dashboards.
  renderer:
    image: grafana/grafana-image-renderer:latest
    container_name: renderer
    mem_limit: 1g
    ports:
      - "8087:8081"  # Maps host port 8087 to renderer's internal port 8081
    depends_on:
      - grafana  # Ensures Grafana is started before the renderer
    networks:
      - proxy-redirect
    volumes:
      - ./custom/renderer_config.json:/usr/src/app/config.json  # Custom renderer configuration

  # Reporter service: custom service for generating reports using Grafana.
  reporter:
    image: my-reporter:0.0.1
    container_name: reporter
    mem_limit: 256m
    ports:
      - "8088:8088" # Exposes the Reporter service on host port 8088
    command: "--grafana-url http://grafana:3000 --generate  --render"
    depends_on:
      - renderer  # Ensures the renderer is running before reporter starts
    networks:
      - proxy-redirect
    volumes:
      - ./custom/reporter/templates:/app/templates  # Report templates
      - ./custom/reporter/reports:/app/reports          # Generated reports storage

  # Filebrowser service: provides a web-based file management interface.
  filebrowser:
    image: filebrowser/filebrowser:v2-s6
    container_name: filebrowser
    restart: unless-stopped
    mem_limit: 128m
    ports:
      - "8080:80"  # Exposes Filebrowser UI on host port 8080
    environment:
      - TZ=Europe/Rome  # Sets the timezone
    depends_on:
      - reporter  # Starts after reporter service is up
    networks:
      - proxy-redirect
    volumes:
      - ./custom:/srv                    # Root folder for filebrowser to serve files from
      - filebrowser_config:/config       # Persist filebrowser configuration
      - filebrowser_database:/database   # Persist filebrowser database

# Define persistent volumes for data storage.
volumes:
  grafana_data:
    name: grafana_data
  filebrowser_config:
    name: filebrowser_config
  filebrowser_database:
    name: filebrowser_database

# Use an external network for container communication.
networks:
  proxy-redirect:
    external: true
