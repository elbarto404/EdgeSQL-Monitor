// JavaScript code to initialize variables from CSV
// Assuming functions getRandomInt, getRandomFloat, getGaussianRandom are already available

const initialValues = {
    CY: getRandomFloat(0, 100), // Progressive Cycle Number (1 to 99999)[#]
    S: getRandomFloat(0, 100), // Shaft in combustion [#]
    TCY: getRandomFloat(0, 100), // Cycle time [s]
    TCO: getRandomFloat(0, 100), // Combustion time [s]
    TI: getRandomFloat(0, 100), // Inversion time [s]
    TStop: getRandomFloat(0, 100), // Time Cycle Disabled [s]
    TFS: getRandomFloat(0, 100), // Time fuel supply [s]
    LSCYpv: getRandomFloat(0, 100), // Limestone for cycle - Process Value [kg/cy]
    LSCYsp: getRandomFloat(0, 100), // Limestone for cycle - Setpoint [kg/cy]
    LCY: getRandomFloat(0, 100), // Lime for cycle [kg/cy]
    NP: getRandomFloat(0, 100), // Nominal production [tpd]
    HCpv: getRandomFloat(0, 100), // Heat consumption - Process Value [kcal/kg]
    HCsp: getRandomFloat(0, 100), // Heat consumption - Setpoint [kcal/kg]
    FCYpv: getRandomFloat(0, 100), // Fuel for cycle Process Value [Nm3/cy]
    FCYsp: getRandomFloat(0, 100), // Fuel for Cycle - Setpoint [m3(n)/cy]
    FFpv: getRandomFloat(0, 100), // Fuel flow - Process Value [Nm3/h]
    FFsp: getRandomFloat(0, 100), // Fuel Flow - Set Point
    LHV: getRandomFloat(0, 100), // Low heat value [kacl/Nm3]
    SA: getRandomFloat(0, 100), // Stoichiometric air [#]
    CAF: getRandomFloat(0, 100), // Combustion air flow [Nm3/h]
    EANpv: getRandomFloat(0, 100), // Combustion air index - Process Value [#]
    EANsp: getRandomFloat(0, 100), // Combustion air index (Excess of air) - Setpoint [#]
    LCAF: getRandomFloat(0, 100), // Lime cooling air flow [Nm3/h]
    ALCpv: getRandomFloat(0, 100), // Lime cooling air ratio - Process Value [#]
    ALCsp: getRandomFloat(0, 100), // Lime cooling air ratio - Setpoint [#]
    TC1: getRandomFloat(0, 100), // Channel temperature 1 [°C]
    TC2: getRandomFloat(0, 100), // Channel temperature 2 [°C]
    TWG: getRandomFloat(0, 100), // Waste gases temperature-outlet kiln [°C]
    TFLT: getRandomFloat(0, 100), // Waste gases temperature-inlet kiln filter [°C]
    LT1: getRandomFloat(0, 100), // Skip side Shaft 1 - lime temperature (Inspection door ZS204101)
    LT2: getRandomFloat(0, 100), // External side Shaft 1 - lime temperature (Inspection door ZS204102)
    LT3: getRandomFloat(0, 100), // External side Shaft 1 - lime temperature (Inspection door ZS204103)
    LT4: getRandomFloat(0, 100), // Pipe side Shaft 1 - lime temperature (Inspection door ZS204104)
    LT5: getRandomFloat(0, 100), // Pipe side Shaft 1 - lime temperature (Inspection door ZS204105)
    LT6: getRandomFloat(0, 100), // Internal side Shaft 1 - lime temperature (Inspection door ZS204106)
    LT7: getRandomFloat(0, 100), // Internal side Shaft 1 - lime temperature (Inspection door ZS204107)
    LT8: getRandomFloat(0, 100), // Skip side Shaft 1 - lime temperature (Inspection door ZS204109)
    LT9: getRandomFloat(0, 100), // Skip side Shaft 2 - lime temperature (Inspection door ZS204201)
    LT10: getRandomFloat(0, 100), // External side Shaft 2 - lime temperature (Inspection door ZS204202)
    LT11: getRandomFloat(0, 100), // External side Shaft 2 - lime temperature (Inspection door ZS204203)
    LT12: getRandomFloat(0, 100), // Pipe side Shaft 2 - lime temperature (Inspection door ZS204204)
    LT13: getRandomFloat(0, 100), // Pipe side Shaft 2 - lime temperature (Inspection door ZS204205)
    LT14: getRandomFloat(0, 100), // Internal side Shaft 2 - lime temperature (Inspection door ZS204206)
    LT15: getRandomFloat(0, 100), // Internal side Shaft 2 - lime temperature (Inspection door ZS204207)
    LT16: getRandomFloat(0, 100), // Skip side Shaft 2 - lime temperature (Inspection door ZS204209)
    CBAP: getRandomFloat(0, 100), // Combustion air pressure [mbar]
    CLAP: getRandomFloat(0, 100), // Lime cooling air pressure [mbar]
    CHAP: getRandomFloat(0, 100), // Channel air pressure [mbar]
    CTAP: getRandomFloat(0, 100), // Transport air pressure [mbar]
    ATMP: getRandomFloat(0, 100), // Barometric pressure [mbar]
    LCAPS1: getRandomFloat(0, 100), // Shaft 1 - Lances cooling / Final injection air pressure [mbar]
    LCAPS2: getRandomFloat(0, 100), // Shaft 2 - Lances cooling / Final injection air pressure [mbar]
    S1tot: getRandomFloat(0, 100), // Shaft 1 - Number of Total Strokes [#]
    S1PS: getRandomFloat(0, 100), // Shaft 1 - Prim Number of Strokes
    S1SS: getRandomFloat(0, 100), // Shaft 1 - Sec Number of Strokes
    S2tot: getRandomFloat(0, 100), // Shaft 2 - Number of Total Strokes [#]
    S2PS: getRandomFloat(0, 100), // Shaft 2 - Prim- Number of Strokes
    S2SS: getRandomFloat(0, 100), // Shaft 2 - Sec- Number of Strokes
    DBLINE1: getRandomFloat(0, 100), // Delta pressure line 1 - Fuel coal [mbar]
    DBLINE2: getRandomFloat(0, 100), // Delta pressure line 2 - Fuel coal [mbar]
    DBLINE3: getRandomFloat(0, 100), // Delta pressure line 3 - Fuel coal [mbar]
    DBLINE4: getRandomFloat(0, 100), // Delta pressure line 4 - Fuel coal [mbar]
    DBLINE5: getRandomFloat(0, 100), // Delta pressure line 5 - Fuel coal [mbar]
    DBLINE6: getRandomFloat(0, 100), // Delta pressure line 6 - Fuel coal [mbar]
    DBLINE7: getRandomFloat(0, 100), // Delta pressure line 7 - Fuel coal [mbar]
    DBLINE8: getRandomFloat(0, 100), // Delta pressure line 8 - Fuel coal [mbar]
    DBLINE9: getRandomFloat(0, 100), // Delta pressure line 9 - Fuel coal [mbar]
    RATIOS1LN1: getRandomFloat(0, 100), // Shaft 1 - Speed ratio line 1 [%]
    RATIOS1LN2: getRandomFloat(0, 100), // Shaft 1 - Speed ratio line 2 [%]
    RATIOS1LN3: getRandomFloat(0, 100), // Shaft 1 - Speed ratio line 3 [%]
    RATIOS1LN4: getRandomFloat(0, 100), // Shaft 1 - Speed ratio line 4 [%]
    RATIOS1LN5: getRandomFloat(0, 100), // Shaft 1 - Speed ratio line 5 [%]
    RATIOS1LN6: getRandomFloat(0, 100), // Shaft 1 - Speed ratio line 6 [%]
    RATIOS1LN7: getRandomFloat(0, 100), // Shaft 1 - Speed ratio line 7 [%]
    RATIOS1LN8: getRandomFloat(0, 100), // Shaft 1 - Speed ratio line 8 [%]
    RATIOS1LN9: getRandomFloat(0, 100), // Shaft 1 - Speed ratio line 9 [%]
    RATIOS2LN1: getRandomFloat(0, 100), // Shaft 2 - Speed ratio line 1 [%]
    RATIOS2LN2: getRandomFloat(0, 100), // Shaft 2 - Speed ratio line 2 [%]
    RATIOS2LN3: getRandomFloat(0, 100), // Shaft 2 - Speed ratio line 3 [%]
    RATIOS2LN4: getRandomFloat(0, 100), // Shaft 2 - Speed ratio line 4 [%]
    RATIOS2LN5: getRandomFloat(0, 100), // Shaft 2 - Speed ratio line 5 [%]
    RATIOS2LN6: getRandomFloat(0, 100), // Shaft 2 - Speed ratio line 6 [%]
    RATIOS2LN7: getRandomFloat(0, 100), // Shaft 2 - Speed ratio line 7 [%]
    RATIOS2LN8: getRandomFloat(0, 100), // Shaft 2 - Speed ratio line 8 [%]
    RATIOS2LN9: getRandomFloat(0, 100), // Shaft 2 - Speed ratio line 9 [%]
    S1SPEEDL1: getRandomFloat(0, 100), // Shaft 1 - Speed line 1 - Process value [rpm]
    S1SPEEDL2: getRandomFloat(0, 100), // Shaft 1 - Speed line 2 - Process value [rpm]
    S1SPEEDL3: getRandomFloat(0, 100), // Shaft 1 - Speed line 3 - Process value [rpm]
    S1SPEEDL4: getRandomFloat(0, 100), // Shaft 1 - Speed line 4 - Process value [rpm]
    S1SPEEDL5: getRandomFloat(0, 100), // Shaft 1 - Speed line 5 - Process value [rpm]
    S1SPEEDL6: getRandomFloat(0, 100), // Shaft 1 - Speed line 6 - Process value [rpm]
    S1SPEEDL7: getRandomFloat(0, 100), // Shaft 1 - Speed line 7 - Process value [rpm]
    S1SPEEDL8: getRandomFloat(0, 100), // Shaft 1 - Speed line 8 - Process value [rpm]
    S1SPEEDL9: getRandomFloat(0, 100), // Shaft 1 - Speed line 9 - Process value [rpm]
    S2SPEEDL1: getRandomFloat(0, 100), // Shaft 2 - Speed line 1 - Process value [rpm]
    S2SPEEDL2: getRandomFloat(0, 100), // Shaft 2 - Speed line 2 - Process value [rpm]
    S2SPEEDL3: getRandomFloat(0, 100), // Shaft 2 - Speed line 3 - Process value [rpm]
    S2SPEEDL4: getRandomFloat(0, 100), // Shaft 2 - Speed line 4 - Process value [rpm]
    S2SPEEDL5: getRandomFloat(0, 100), // Shaft 2 - Speed line 5 - Process value [rpm]
    S2SPEEDL6: getRandomFloat(0, 100), // Shaft 2 - Speed line 6 - Process value [rpm]
    S2SPEEDL7: getRandomFloat(0, 100), // Shaft 2 - Speed line 7 - Process value [rpm]
    S2SPEEDL8: getRandomFloat(0, 100), // Shaft 2 - Speed line 8 - Process value [rpm]
    S2SPEEDL9: getRandomFloat(0, 100), // Shaft 2 - Speed line 9 - Process value [rpm]
    COALTANKP: getRandomFloat(0, 100), // Fuel Coal - Pressure weighed tank T235301_1 [mbar]
    COALTANKT: getRandomFloat(0, 100), // Fuel Coal - Temperature weighed tank T235301_1 [°C]
    HYT: getRandomFloat(0, 100), // Hydraulic Oil - Temperature [°C]
    HYP: getRandomFloat(0, 100), // Hydraulic Oil - Pressure [bar]
    TWait: getRandomFloat(0, 100), // Waitnig Time [s]
    TOff: getRandomFloat(0, 100), // Unavailability time [s]
    TWait1: getRandomFloat(0, 100), // Drawer Sampling [s]
    TWait2: getRandomFloat(0, 100), // Valves time maintenance [s]
    TWait3: getRandomFloat(0, 100), // Hydraulic oil unit time maintenance [s]
    TWait4: getRandomFloat(0, 100), // Hydraulic oil plant time maintenance [s]
    TWait5: getRandomFloat(0, 100), // Blower time maintenance [s]
    TWait6: getRandomFloat(0, 100), // Skip time maintenance [s]
    TWait7: getRandomFloat(0, 100), // Weighed hopper calibration [s]
    TWait8: getRandomFloat(0, 100), // Coal weighed tank calibration [s]
    TWait9: getRandomFloat(0, 100), // Other maintenance [s]
    TOff1: getRandomFloat(0, 100), // Mechanical issue [s]
    TOff2: getRandomFloat(0, 100), // Electrical issue [s]
    TOff3: getRandomFloat(0, 100), // Process issue[s]
    TOff4: getRandomFloat(0, 100), // Other issue [s]
    SKIP_ULD1CHpv: getRandomFloat(0, 100), // ULD skip side position at first charge - Process Value [%]
    PIPE_ULD1CHpv: getRandomFloat(0, 100), // ULD pipe side position at first charge - Process Value [%]
    ULD1CHsp: getRandomFloat(0, 100), // ULD position at first charge - Setpoint [%]
    SKIP_ULD2CHpv: getRandomFloat(0, 100), // ULD skip side position at second charge - Process Value [%]
    PIPE_ULD2CHpv: getRandomFloat(0, 100), // ULD pipe side position at second charge - Process Value [%]
    ULD2CHsp: getRandomFloat(0, 100), // ULD position at second charge - Setpoint [%]
    SKIP_ULD3CHpv: getRandomFloat(0, 100), // ULD skip side position at third charge - Process Value [%]
    PIPE_ULD3CHpv: getRandomFloat(0, 100), // ULD pipe side position at third charge - Process Value [%]
    ULD3CHsp: getRandomFloat(0, 100), // ULD position at third charge - Setpoint [%]
    LSCY1pv: getRandomFloat(0, 100), // LSCY at first charge - Process Value [Kg]
    LSCY1sp: getRandomFloat(0, 100), // LSCY at first charge - Setpoint [Kg]
    LSCY2pv: getRandomFloat(0, 100), // LSCY at second charge - Process Value [Kg]
    LSCY2sp: getRandomFloat(0, 100), // LSCY at second charge - Setpoint [Kg]
    LSCY3pv: getRandomFloat(0, 100), // LSCY at third charge - Process Value [Kg]
    LSCY3sp: getRandomFloat(0, 100), // LSCY at third charge - Setpoint [Kg]
    TCH1: getRandomFloat(0, 100), // Time first charge [s]
    TCH2: getRandomFloat(0, 100), // Time second charge [s]
    TCH3: getRandomFloat(0, 100), // Time third charge [s]
    LSTARCMB: getRandomFloat(0, 100), // Level position in shaft in combustion at cycle start [%]
    LSTOPCMB: getRandomFloat(0, 100), // Level position in shaft in combustion at cycle end [%]
    LSTARPRH: getRandomFloat(0, 100), // Level position in shaft in preheating at cycle start [%]
    LSTOPPRH: getRandomFloat(0, 100), // Level position in shaft in preheating at cycle end [%]
    LVLCMBsp: getRandomFloat(0, 100), // Setpoint level in shaft in combustion [%]
    LVLPRHsp: getRandomFloat(0, 100), // Setpoint level in shaft in preheating [%]
    EXTCMB: getRandomFloat(0, 100), // Extraction Mode in Combustion [0=By level; 1=By Strokes] [#]
    EXTPRH: getRandomFloat(0, 100), // Extraction Mode in Preheating [0=By level; 1=By Strokes] [#]
    S1EXTAUTO: getRandomFloat(0, 100), // Shaft 1 - Drawmatic in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]
    S2EXTAUTO: getRandomFloat(0, 100), // Shaft 2 - Drawmatic in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]
    S1MNRATIO: getRandomFloat(0, 100), // Shaft 1 - Ratio Setpoint of Strokes main drawer [#]
    S1SCRATIO: getRandomFloat(0, 100), // Shaft 1 - Ratio Setpoint of Strokes secondary drawer [#]
    S1FSTLVL: getRandomFloat(0, 100), // Shaft 1 - Delay start fast extraction in level mode [s]
    S1STROKsp: getRandomFloat(0, 100), // Shaft 1 - Setpoint of total strokes [#]
    S1SDELAYsp: getRandomFloat(0, 100), // Shaft 1 - Setpoint delay time between two strokes [s]
    S1FSTSTRT: getRandomFloat(0, 100), // Shaft 1 - Delay start fast extraction in strokes mode [s]
    S2MNRATIO: getRandomFloat(0, 100), // Shaft 2 - Ratio Setpoint of Strokes main drawer [#]
    S2SCRATIO: getRandomFloat(0, 100), // Shaft 2 - Ratio Setpoint of Strokes secondary drawer [#]
    S2FSTLVL: getRandomFloat(0, 100), // Shaft 2 - Delay start fast extraction in level mode [s]
    S2STROKsp: getRandomFloat(0, 100), // Shaft 2 - Setpoint of total strokes [#]
    S2SDELAYsp: getRandomFloat(0, 100), // Shaft 2 - Setpoint delay time between two strokes [s]
    S2FSTSTR: getRandomFloat(0, 100), // Shaft 2 - Delay start fast extraction in strokes mode [s]
    EANAUTO: getRandomFloat(0, 100), // EANMATIC in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]
    ALCAUTO: getRandomFloat(0, 100), // COOLMATIC in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]
    FUELAUTO: getRandomFloat(0, 100), // FUELMATIC in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]
    FILTERAUTO: getRandomFloat(0, 100), // FILTERMATIC in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]
    REDAUTO: getRandomFloat(0, 100), // FIREREDUCTION in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]
    CUTAUTO: getRandomFloat(0, 100), // FIRECUT in automatic mode [0=Manual Mode; 1=Automatic Mode] [#]
    TSTRREDsp: getRandomFloat(0, 100), // Temperature Setpoint for start fuel reduction [°C]
    TSTPREDsp: getRandomFloat(0, 100), // Temperature Setpoint for stop fuel reduction [°C]
    PERCREDsp: getRandomFloat(0, 100), // Percentage of fuel reduction [%]
    TSTRCUTsp: getRandomFloat(0, 100), // Temperature Setpoint for start fuel cut [°C]
    TSTPCUTsp: getRandomFloat(0, 100), // Temperature Setpoint for stop fuel cut [°C]
    REDENABL: getRandomFloat(0, 100), // Fuel reduction enabled during last cycle [#]
    REDTIMEpv: getRandomFloat(0, 100), // Working time of Fuel reduction during last cycle [s]
    CUTENABL: getRandomFloat(0, 100), // Fuel cut enabled during last cycle [#]
    CUTTIMEpv: getRandomFloat(0, 100), // Working time of Fuel cut during last cycle [s]
    PATM: getRandomFloat(0, 100), // Barometric Pressure [mbar]
    FCVS1pv: getRandomFloat(0, 100), // FCV Lime cooling valve - Shaft 1 - Process value [%]
    FCVS1sp: getRandomFloat(0, 100), // FCV Lime cooling valve - Shaft 1 - Setpoint [%]
    FCVS1AUTO: getRandomFloat(0, 100), // Shaft 1 - Flow Control Valve in auto mode [0=Manual Mode; 1=Automatic Mode] [#]
    FCVS2pv: getRandomFloat(0, 100), // FCV Lime cooling valve - Shaft 2 - Process value [%]
    FCVS2sp: getRandomFloat(0, 100), // FCV Lime cooling valve - Shaft 2 - Setpoint [%]
    FCVS2AUTO: getRandomFloat(0, 100), // Shaft 2 - Flow Control Valve in auto mode [0=Manual Mode; 1=Automatic Mode] [#]
    CMB1pv: getRandomFloat(0, 100), // Combustion Air Blower 1 - Speed - Process Value [rpm]
    CMB1sp: getRandomFloat(0, 100), // Combustion Air Blower 1 - Speed - Setpoint [rpm]
    CMB2pv: getRandomFloat(0, 100), // Combustion Air Blower 2 - Speed - Process Value [rpm]
    CMB2SP: getRandomFloat(0, 100), // Combustion Air Blower 2 - Speed - Set Point [rpm]
    CMB3pv: getRandomFloat(0, 100), // Combustion Air Blower 3 - Speed - Process Value [rpm]
    CMB3sp: getRandomFloat(0, 100), // Combustion Air Blower 3 - Speed - Set Point [rpm]
    LCB1pv: getRandomFloat(0, 100), // Lime Cooling Air Blower 1 - Speed - Process Value [rpm]
    LCB1sp: getRandomFloat(0, 100), // Lime Cooling Air Blower 1 - Speed - Setpoint [rpm]
    LCB2pv: getRandomFloat(0, 100), // Lime Cooling Air Blower 2 - Speed - Process Value [rpm]
    LCB2sp: getRandomFloat(0, 100), // Lime Cooling Air Blower 2 - Speed - Set Point [rpm]
    FANpv: getRandomFloat(0, 100), // Filter Fan - Speed - Process Value [rpm]
    FANsp: getRandomFloat(0, 100), // Filter Fan - Speed - Setpoint [rpm]
    S1CAPSPpv: getRandomFloat(0, 100), // Shaft 1 - Lances cooling blower - Speed - Process value [rpm]
    S1CAPSPsp: getRandomFloat(0, 100), // Shaft 1 - Lances cooling blower - Speed - Setpoint [rpm]
    S2CAPSPpv: getRandomFloat(0, 100), // Shaft 2 - Lances cooling blower - Speed - Process value [rpm]
    S2CAPSPsp: getRandomFloat(0, 100), // Shaft 2 - Lances cooling blower - Speed - Setpoint [rpm]
    CTBSPpv: getRandomFloat(0, 100), // Transport air - Speed - Process value [rpm]
    CTBSPsp: getRandomFloat(0, 100), // Transport air - Speed - Setpoint [rpm]
    CMB1CUR: getRandomFloat(0, 100), // Combustion Air Blower 1 - Current - Process Value
    CMB2CUR: getRandomFloat(0, 100), // Combustion Air Blower 2 - Current - Process Value
    CMB3CUR: getRandomFloat(0, 100), // Combustion Air Blower 3 - Current - Process Value
    LCB1CUR: getRandomFloat(0, 100), // Lime Cooling Air Blower 1 - Current - Process Value
    LCB2CUR: getRandomFloat(0, 100), // Lime Cooling Air Blower 2 - Current - Process Value
    FANCUR: getRandomFloat(0, 100), // Filter Fan - Current - Process Value
    S1CAPCUR: getRandomFloat(0, 100), // Shaft 1 - Lance cooling blower - Current - Process value
    S2CAPCUR: getRandomFloat(0, 100), // Shaft 2 - Lance cooling blower - Current - Process value
    CTBCURR: getRandomFloat(0, 100), // Transport air - Current - Process value
    HYDP1CUR: getRandomFloat(0, 100), // Hydraulic Unit - Pump 1 - Current
    HYDP2CUR: getRandomFloat(0, 100), // Hydraulic Unit - Pump 2 - Current
};

console.log("Initialized Variables:", initialValues);