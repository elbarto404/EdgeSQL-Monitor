[
    {
        "id": "44953deb6b7c97d9",
        "type": "tab",
        "label": "Postgres Management old",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "4c347d36a2ab7080",
        "type": "postgresql",
        "z": "44953deb6b7c97d9",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "841bfed957343a4e",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 220,
        "y": 400,
        "wires": [
            [
                "07cd4c680c1fb7dd",
                "242385f34341a50b"
            ]
        ]
    },
    {
        "id": "07cd4c680c1fb7dd",
        "type": "debug",
        "z": "44953deb6b7c97d9",
        "name": "postgres_all",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 360,
        "wires": []
    },
    {
        "id": "a8f2b8d0cf0aed42",
        "type": "inject",
        "z": "44953deb6b7c97d9",
        "name": "check_database",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "check_database",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "349a77614b534c1c"
            ]
        ]
    },
    {
        "id": "7e7aaf373127f674",
        "type": "function",
        "z": "44953deb6b7c97d9",
        "name": "check_database",
        "func": "// Ensure the database name is provided in msg.payload\nconst dbName = msg.target;\n\nif (!dbName) {\n    node.error(\"Database name is required in msg.dbName\");\n    return null;\n}\n\n// First, check if the database exists\nmsg.query = `\nSELECT 1 AS exists \nFROM pg_database \nWHERE datname = '${dbName}';\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 100,
        "wires": [
            [
                "5e25345e7e8bacd7"
            ]
        ]
    },
    {
        "id": "5e25345e7e8bacd7",
        "type": "link out",
        "z": "44953deb6b7c97d9",
        "name": "check_database",
        "mode": "link",
        "links": [
            "04a5c87bc685fb3f"
        ],
        "x": 945,
        "y": 100,
        "wires": []
    },
    {
        "id": "04a5c87bc685fb3f",
        "type": "link in",
        "z": "44953deb6b7c97d9",
        "name": "postgres_db",
        "links": [
            "3c79ea5bd0ca7d7f",
            "5e25345e7e8bacd7"
        ],
        "x": 75,
        "y": 400,
        "wires": [
            [
                "4c347d36a2ab7080",
                "449b19a22a15e04e"
            ]
        ]
    },
    {
        "id": "3303c6d4e4656a20",
        "type": "debug",
        "z": "44953deb6b7c97d9",
        "name": "other",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 520,
        "wires": []
    },
    {
        "id": "449b19a22a15e04e",
        "type": "debug",
        "z": "44953deb6b7c97d9",
        "name": "postgres_in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 360,
        "wires": []
    },
    {
        "id": "3c79ea5bd0ca7d7f",
        "type": "link out",
        "z": "44953deb6b7c97d9",
        "name": "init_database",
        "mode": "link",
        "links": [
            "04a5c87bc685fb3f"
        ],
        "x": 965,
        "y": 400,
        "wires": []
    },
    {
        "id": "4b70f26d3ebb0174",
        "type": "debug",
        "z": "44953deb6b7c97d9",
        "name": "check_database",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 360,
        "wires": []
    },
    {
        "id": "ec01f285dca86c3d",
        "type": "function",
        "z": "44953deb6b7c97d9",
        "name": "init_database",
        "func": "// Check if payload exists\nif (!msg.payload) {\n    node.error(\"No payload\");\n    return [null, null];\n}\n\n// Retrieve the database name from msg.target\nconst dbName = msg.target;\n\nif (!dbName) {\n    node.error(\"Database name is missing\");\n    return [null, null];\n}\n\n// Check if the database already exists based on payload length\nif (msg.payload.length > 0) {\n    // Database already exists --> skip creation\n    return [null, msg];\n}\n\n// Construct the CREATE DATABASE query with proper syntax\nmsg.query = `\n\n    CREATE DATABASE \"${dbName}\";\n    \n`;\n\n// Set a topic or flag to indicate the next action\nmsg.topic = \"init_database\";\n\nreturn [msg, null];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 400,
        "wires": [
            [
                "3c79ea5bd0ca7d7f"
            ],
            [
                "edbab009a864df2a"
            ]
        ]
    },
    {
        "id": "9fc93ec022b7f444",
        "type": "debug",
        "z": "44953deb6b7c97d9",
        "name": "init_database",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 440,
        "wires": []
    },
    {
        "id": "3f68ac0582f02062",
        "type": "function",
        "z": "44953deb6b7c97d9",
        "name": "ack",
        "func": "// Expected commands\nconst expectedCommands = [\n\n    \"CREATE\"\n    \n    ];\n\n// Initialize received commands\nlet receivedCommands = [];\n\n// Check if msg.pgsql is an array or an object\nif (Array.isArray(msg.pgsql)) {\n    receivedCommands = msg.pgsql.map(item => item.command);\n} else if (msg.pgsql && typeof msg.pgsql === \"object\" && msg.pgsql.command) {\n    receivedCommands = [msg.pgsql.command];\n} else {\n    node.error(\"Invalid pgsql format. Expected an array or an object with a 'command' property.\");\n    msg.error = true;\n    return [msg, null]; // Exit early \n}\n\n// Find missing commands\nconst missingCommands = expectedCommands.filter(cmd => !receivedCommands.includes(cmd));\n\n// Alert with node.error if any commands are missing\nif (missingCommands.length > 0) {\n    node.error(`Missing commands: ${missingCommands.join(\", \")}`);\n    msg.error = true;\n    return [msg, null]; // Exit early \n}\n\nnode.log(\"All expected commands are present.\");\nmsg.error = false;\n\n// Pass the message\nreturn [msg, msg];\n\n// First output - ALL\n// Second output - FILTERED\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 460,
        "wires": [
            [
                "9fc93ec022b7f444"
            ],
            [
                "edbab009a864df2a"
            ]
        ]
    },
    {
        "id": "d9352d4822c12b07",
        "type": "function",
        "z": "44953deb6b7c97d9",
        "name": "ack",
        "func": "// Expected commands\nconst expectedCommands = [\n    \n    \"SELECT\"\n    \n    ];\n\n// Initialize received commands\nlet receivedCommands = [];\n\n// Check if msg.pgsql is an array or an object\nif (Array.isArray(msg.pgsql)) {\n    receivedCommands = msg.pgsql.map(item => item.command);\n} else if (msg.pgsql && typeof msg.pgsql === \"object\" && msg.pgsql.command) {\n    receivedCommands = [msg.pgsql.command];\n} else {\n    node.error(\"Invalid pgsql format. Expected an array or an object with a 'command' property.\");\n    msg.error = true;\n    return [msg, null]; // Exit early \n}\n\n// Find missing commands\nconst missingCommands = expectedCommands.filter(cmd => !receivedCommands.includes(cmd));\n\n// Alert with node.error if any commands are missing\nif (missingCommands.length > 0) {\n    node.error(`Missing commands: ${missingCommands.join(\", \")}`);\n    msg.error = true;\n    return [msg, null]; // Exit early \n}\n\nnode.log(\"All expected commands are present.\");\nmsg.error = false;\n\n// Pass the message\nreturn [msg, msg];\n\n// First output - ALL\n// Second output - FILTERED\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "4b70f26d3ebb0174"
            ],
            [
                "ec01f285dca86c3d"
            ]
        ]
    },
    {
        "id": "edbab009a864df2a",
        "type": "link out",
        "z": "44953deb6b7c97d9",
        "name": "init_schemas",
        "mode": "link",
        "links": [
            "5c261a2d3c463ec2"
        ],
        "x": 965,
        "y": 500,
        "wires": []
    },
    {
        "id": "349a77614b534c1c",
        "type": "change",
        "z": "44953deb6b7c97d9",
        "name": "odr_data",
        "rules": [
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "odr_data",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 100,
        "wires": [
            [
                "7e7aaf373127f674"
            ]
        ]
    },
    {
        "id": "5c261a2d3c463ec2",
        "type": "link in",
        "z": "44953deb6b7c97d9",
        "name": "init_schemas",
        "links": [
            "3b80f0e911e5d247",
            "edbab009a864df2a"
        ],
        "x": 75,
        "y": 680,
        "wires": [
            [
                "8fc29140075e3c3f"
            ]
        ]
    },
    {
        "id": "2ef591146a27f01d",
        "type": "inject",
        "z": "44953deb6b7c97d9",
        "name": "check_schemas",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "manual_check_schemas",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "9e1443f7099c90bb"
            ]
        ]
    },
    {
        "id": "3b80f0e911e5d247",
        "type": "link out",
        "z": "44953deb6b7c97d9",
        "name": "check_schemas",
        "mode": "link",
        "links": [
            "5c261a2d3c463ec2"
        ],
        "x": 945,
        "y": 160,
        "wires": []
    },
    {
        "id": "d3d3e492b7093820",
        "type": "function",
        "z": "44953deb6b7c97d9",
        "name": "check_schema",
        "func": "// Retrieve the database name from msg.dbName\nconst dbName = msg.target;\n\nif (!dbName) {\n    node.error(\"Database name is missing\");\n    return null;\n}\n\n// Retrieve the schema definition from msg.dbSchema\nconst schemaName = msg.schemaName;\n\nif (!schemaName) {\n    node.error(\"message schemaName is missing\");\n    return null;\n}\n\n// Construct the DO statement to create schema and grant privileges only if it doesn't exist\nmsg.query = `\n    DO $$\n    BEGIN\n        IF NOT EXISTS (\n            SELECT 1 \n            FROM information_schema.schemata \n            WHERE schema_name = '${schemaName}'\n        ) THEN\n            -- Create the new schema\n            CREATE SCHEMA \"${schemaName}\";\n\n            -- Set the search path to the new schema\n            SET search_path TO \"${schemaName}\";\n\n            -- Grant all privileges on the new schema to the user 'edge'\n            GRANT ALL PRIVILEGES ON SCHEMA \"${schemaName}\" TO edge;\n\n            SET TIME ZONE '${global.get(\"timeZone\")}';\n            \n        END IF;\n    END\n    $$;\n`;\n\n// Optionally, set the topic for clarity\nmsg.topic = \"check_schema\";\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 680,
        "wires": [
            [
                "3217b410d2e155ad"
            ]
        ]
    },
    {
        "id": "1585d78603f6d49c",
        "type": "change",
        "z": "44953deb6b7c97d9",
        "name": "lime_klin_1",
        "rules": [
            {
                "t": "set",
                "p": "schemaName",
                "pt": "msg",
                "to": "lime_klin_1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 680,
        "wires": [
            [
                "d3d3e492b7093820"
            ]
        ]
    },
    {
        "id": "9e1443f7099c90bb",
        "type": "change",
        "z": "44953deb6b7c97d9",
        "name": "odr_data",
        "rules": [
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "odr_data",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 160,
        "wires": [
            [
                "3b80f0e911e5d247"
            ]
        ]
    },
    {
        "id": "242385f34341a50b",
        "type": "switch",
        "z": "44953deb6b7c97d9",
        "name": "topic_switch",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "check_database",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "init_database",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 440,
        "wires": [
            [
                "d9352d4822c12b07"
            ],
            [
                "3f68ac0582f02062"
            ],
            [
                "3303c6d4e4656a20"
            ]
        ]
    },
    {
        "id": "8fc29140075e3c3f",
        "type": "switch",
        "z": "44953deb6b7c97d9",
        "name": "target switch",
        "property": "target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "odr_data",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 680,
        "wires": [
            [
                "1585d78603f6d49c",
                "836afc30bf545e4f"
            ],
            [
                "9a1bfe0f48da5244"
            ]
        ]
    },
    {
        "id": "9a1bfe0f48da5244",
        "type": "debug",
        "z": "44953deb6b7c97d9",
        "name": "others",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 760,
        "wires": []
    },
    {
        "id": "836afc30bf545e4f",
        "type": "debug",
        "z": "44953deb6b7c97d9",
        "name": "odr_data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 640,
        "wires": []
    },
    {
        "id": "3217b410d2e155ad",
        "type": "link out",
        "z": "44953deb6b7c97d9",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "01515258c06346b8"
        ],
        "x": 945,
        "y": 680,
        "wires": []
    },
    {
        "id": "ec749da663ceb267",
        "type": "comment",
        "z": "44953deb6b7c97d9",
        "name": "check schemas",
        "info": "",
        "x": 140,
        "y": 620,
        "wires": []
    },
    {
        "id": "1f333fe0bb74b45b",
        "type": "comment",
        "z": "44953deb6b7c97d9",
        "name": "initialize and manual_check",
        "info": "",
        "x": 180,
        "y": 40,
        "wires": []
    },
    {
        "id": "6e03c2ed16894763",
        "type": "comment",
        "z": "44953deb6b7c97d9",
        "name": "maintenance database",
        "info": "",
        "x": 160,
        "y": 300,
        "wires": []
    },
    {
        "id": "26772a68bfd2f9a0",
        "type": "function",
        "z": "44953deb6b7c97d9",
        "name": "init_globas",
        "func": "\nreturn msg;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nglobal.set(\"timeZone\", \"Europe/Rome\");",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 40,
        "wires": []
    },
    {
        "id": "afcaa0cc9543dd06",
        "type": "tab",
        "label": "Postgres Odr old",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "71dc51016bb62a06",
        "type": "postgresql",
        "z": "afcaa0cc9543dd06",
        "name": "odr_data",
        "query": "",
        "postgreSQLConfig": "904e4718f713c45c",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 340,
        "y": 260,
        "wires": [
            [
                "fee7952fc8e26134",
                "7118a07b4bb00a8d"
            ]
        ]
    },
    {
        "id": "fee7952fc8e26134",
        "type": "debug",
        "z": "afcaa0cc9543dd06",
        "name": "postgres_out_all",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 220,
        "wires": []
    },
    {
        "id": "84dabf47cd0c829a",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "sync_tables",
        "func": "// Retrieve klin_tags from flow variables\nconst klin_tags = flow.get('klin_tags');\n\nif (!klin_tags || !Array.isArray(klin_tags)) {\n    node.error(\"Flow variable 'klin_tags' is not defined or is not an array.\");\n    return null;\n}\n\n// Existing schema from the database\nconst existingSchema = msg.payload; // Assuming payload contains an array of rows\n\n// Organize existing schema into a dictionary: table -> { column: {data_type, column_default, is_nullable, is_primary_key} }\nconst existingTables = {};\n\nexistingSchema.forEach(row => {\n    const table = row.table_name;\n    const column = row.column_name;\n    const dataType = row.data_type;\n    const columnDefault = row.column_default;\n    const isNullable = row.is_nullable;\n    const isPrimaryKey = row.is_primary_key; // 'YES' or 'NO'\n    \n    if (!existingTables[table]) {\n        existingTables[table] = {};\n    }\n    existingTables[table][column] = {\n        data_type: dataType,\n        column_default: columnDefault,\n        is_nullable: isNullable,\n        is_primary_key: isPrimaryKey\n    };\n});\n\n// Initialize arrays to hold SQL statements\nconst createTableStatements = [];\nconst alterTableStatements = [];\n\n// Iterate over klin_tags to find missing tables or columns\nklin_tags.forEach(tableObj => {\n    const tableName = Object.keys(tableObj)[0];\n    const desiredColumns = tableObj[tableName];\n    \n    if (!existingTables[tableName]) {\n        // Table does not exist, create it\n        const columnDefs = desiredColumns.map(col => {\n            const [name, type] = Object.entries(col)[0];\n            return `${name} ${type}`;\n        }).join(\",\\n        \");\n        \n        const createTableQuery = `CREATE TABLE IF NOT EXISTS ${tableName} (\\n        ${columnDefs}\\n    );`;\n        createTableStatements.push(createTableQuery);\n    } else {\n        // Table exists, check for missing or mismatched columns\n        desiredColumns.forEach(col => {\n            const [colName, colType] = Object.entries(col)[0];\n            \n            if (!existingTables[tableName][colName]) {\n                // Column does not exist, add it\n                const addColumnQuery = `ALTER TABLE ${tableName} ADD COLUMN ${colName} ${colType};`;\n                alterTableStatements.push(addColumnQuery);\n            } else {\n                // Optional: Check if column type matches desired type\n                const existingColType = existingTables[tableName][colName].data_type.toUpperCase();\n                const desiredColType = colType.split(' ')[0].toUpperCase(); // Extract data type without constraints\n                \n                if (existingColType !== desiredColType) {\n                    // Data type mismatch, alter column type\n                    const alterTypeQuery = `ALTER TABLE ${tableName} ALTER COLUMN ${colName} TYPE ${desiredColType};`;\n                    alterTableStatements.push(alterTypeQuery);\n                }\n                \n                // Optional: Handle primary key changes if needed\n                const existingPK = existingTables[tableName][colName].is_primary_key === 'YES';\n                const desiredPK = colType.toUpperCase().includes('PRIMARY KEY');\n                \n                if (desiredPK && !existingPK) {\n                    // Add primary key constraint to the column\n                    const addPKQuery = `ALTER TABLE ${tableName} ADD PRIMARY KEY (${colName});`;\n                    alterTableStatements.push(addPKQuery);\n                }\n                // Note: Removing primary keys would require more complex logic\n            }\n        });\n    }\n});\n\n// Collect all SQL statements\nlet allSQL = [];\n\nif (createTableStatements.length > 0) {\n    allSQL = allSQL.concat(createTableStatements);\n}\n\nif (alterTableStatements.length > 0) {\n    allSQL = allSQL.concat(alterTableStatements);\n}\n\n// If there are no statements to execute, exit\nif (allSQL.length === 0) {\n    msg.payload = \"Database schema is up-to-date. No changes needed.\";\n    return msg;\n}\n\n// Combine all SQL statements into a single multi-line query within a DO $$ block\nconst fullSyncQuery = `\nDO $$\nBEGIN\n    ${allSQL.join(\"\\n    \")}\nEND\n$$ LANGUAGE plpgsql;\n`;\n\n// Set the query in msg.query\nmsg.query = fullSyncQuery;\n\n// Set topic or action\nmsg.topic = \"sync_tables\";\n\n// Optionally, log the generated query\nnode.log(\"Generated SQL Query for synchronizing schema.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 340,
        "wires": [
            [
                "1f71073fe1932fc7"
            ]
        ]
    },
    {
        "id": "7118a07b4bb00a8d",
        "type": "switch",
        "z": "afcaa0cc9543dd06",
        "name": "topic_switch",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "check_schema",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "retrieve_tables",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sync_tables",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_last_id",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 570,
        "y": 360,
        "wires": [
            [
                "b7341ac83da4f036"
            ],
            [
                "edd089aba64bd8f0"
            ],
            [
                "803062224b063389"
            ],
            [
                "f69789f20550fd9c"
            ],
            [
                "6f52dd4d53c1f3f9"
            ]
        ]
    },
    {
        "id": "d0ebebba94838085",
        "type": "debug",
        "z": "afcaa0cc9543dd06",
        "name": "retrieve_tables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 300,
        "wires": []
    },
    {
        "id": "6f52dd4d53c1f3f9",
        "type": "debug",
        "z": "afcaa0cc9543dd06",
        "name": "other",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 480,
        "wires": []
    },
    {
        "id": "01515258c06346b8",
        "type": "link in",
        "z": "afcaa0cc9543dd06",
        "name": "odr_data",
        "links": [
            "1f71073fe1932fc7",
            "2af0efaa6e475b69",
            "12af5a8494775238",
            "3217b410d2e155ad",
            "716dc1a3a6bbdfca"
        ],
        "x": 175,
        "y": 260,
        "wires": [
            [
                "71dc51016bb62a06",
                "5b66c46c1ab852f7"
            ]
        ]
    },
    {
        "id": "1f71073fe1932fc7",
        "type": "link out",
        "z": "afcaa0cc9543dd06",
        "name": "sync_tables",
        "mode": "link",
        "links": [
            "01515258c06346b8"
        ],
        "x": 1125,
        "y": 340,
        "wires": []
    },
    {
        "id": "5b66c46c1ab852f7",
        "type": "debug",
        "z": "afcaa0cc9543dd06",
        "name": "postgres_in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 220,
        "wires": []
    },
    {
        "id": "2fcc841be84eba39",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "select_production_data",
        "func": "let table_name = \"production_data\";\n\nmsg.query = `SELECT * FROM ${table_name}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "69a40fc995889248",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "create_tables_static",
        "func": "msg.topic = \"create_tables\"\nmsg.action = \"create_tables\"\nmsg.query = `\nDO $$\nBEGIN\nSET TIME ZONE 'Europe/Rome';\nCREATE TABLE IF NOT EXISTS production_data(\n    cycle_id INTEGER PRIMARY KEY,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\n    shaft_combustion INTEGER,\n    limestone_cycle NUMERIC,\n    limestone_cycle_setpoint NUMERIC,\n    lime_cycle NUMERIC,\n    nominal_prod NUMERIC,\n    shaft1_strokes INTEGER,\n    shaft2_strokes INTEGER\n);\nCREATE TABLE IF NOT EXISTS fuel_data (\n    cycle_id INTEGER PRIMARY KEY,\n    heat_consumption NUMERIC,\n    heat_consumption_setpoint NUMERIC,\n    fuel_cycle NUMERIC,\n    fuel_cycle_setpoint NUMERIC,\n    fuel_flow NUMERIC,\n    fuel_flow_setpoint NUMERIC,\n    natural_gas_output_regulator NUMERIC\n);\nCREATE TABLE IF NOT EXISTS air_data (\n    cycle_id INTEGER PRIMARY KEY,\n    low_heat_val_air_calc NUMERIC,\n    stoich_air_calc NUMERIC,\n    combustion_air_flow_theo NUMERIC,\n    combustion_air_flow NUMERIC,\n    combustion_air_index NUMERIC,\n    combustion_air_index_setpoint NUMERIC,\n    combustion_air_blower_speed NUMERIC,\n    combustion_air_blower_speed_setpoint NUMERIC,\n    cool_air_flow_theo NUMERIC,\n    cool_air_flow NUMERIC,\n    cool_air_ratio NUMERIC,\n    cool_air_ratio_setpoint NUMERIC,\n    cool_air_blower_speed NUMERIC,\n    cool_air_blower_speed_setpoint NUMERIC\n);\nCREATE TABLE IF NOT EXISTS temperatures (\n    cycle_id INTEGER PRIMARY KEY,\n    channel_temp1 NUMERIC,\n    channel_temp2 NUMERIC,\n    waste_gases_temp_outlet_kiln NUMERIC,\n    waste_gases_temp_inlet_kiln_filter NUMERIC,\n    shaft1_drawer_pipe_temp NUMERIC,\n    shaft1_drawer_skip_temp NUMERIC,\n    shaft2_drawer_pipe_temp NUMERIC,\n    shaft2_drawer_skip_temp NUMERIC,\n    natural_gas_temp NUMERIC,\n    hydraulic_oil_temp NUMERIC\n);\nCREATE TABLE IF NOT EXISTS pressures (\n    cycle_id INTEGER PRIMARY KEY,\n    combustion_air_pressure NUMERIC,\n    lime_cool_air_pressure NUMERIC,\n    channel_air_pressure NUMERIC,\n    shaft1_lances_cool_air_pressure NUMERIC,\n    shaft2_lances_cool_air_pressure NUMERIC,\n    natural_gas_pressure NUMERIC,\n    hydraulic_oil_pressure NUMERIC\n);\nCREATE TABLE IF NOT EXISTS cycle_times (\n    cycle_id INTEGER PRIMARY KEY,\n    cycle_time INTEGER,\n    combustion_time INTEGER,\n    inversion_time INTEGER,\n    cycle_disabled_time INTEGER,\n    fuel_supply_time INTEGER,\n    waiting_time INTEGER,\n    unavailability_time INTEGER,\n    drawer_sampling_time INTEGER,\n    valves_maint_time INTEGER,\n    hyd_oil_unit_maint_time INTEGER,\n    hyd_oil_plant_maint_time INTEGER,\n    blower_maint_time INTEGER,\n    skip_maint_time INTEGER,\n    limestone_hopper_time INTEGER,\n    other_maint_time INTEGER,\n    mechanical_issue_time INTEGER,\n    electrical_issue_time INTEGER,\n    process_issue_time INTEGER,\n    other_issue_time INTEGER\n);\nEND\n$$ LANGUAGE plpgsql;\n`\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "729ad6dfd2a35ee7",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "retrieve_tables_(no pk)",
        "func": "// Query to fetch all tables and their columns in the 'public' schema\nconst retrievalQuery = `\nSELECT \n    table_name, \n    column_name, \n    data_type, \n    column_default, \n    is_nullable\nFROM \n    information_schema.columns\nWHERE \n    table_schema = 'public';\n`;\n\nmsg.query = retrievalQuery;\n\n// Optionally, set topic or action if required\n// msg.topic = \"retrieve_schema\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "8a3751d1b6bb2cf6",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "create_tables",
        "func": "// List of tables\nconst tables = ['production_data', 'fuel_data', 'air_data', 'temperatures', 'pressures', 'cycle_times'];\nlet queries = [];\n\ntables.forEach(table => {\n    const columns = flow.get(table);\n    if (columns) {\n        const columnDefs = columns.map(col => {\n            const [name, type] = Object.entries(col)[0];\n            return `${name} ${type}`;\n        }).join(\",\\n    \");\n        const query = `CREATE TABLE IF NOT EXISTS ${table} (\\n    ${columnDefs}\\n);`;\n        queries.push(query);\n    } else {\n        node.warn(`Flow variable for table \"${table}\" not found.`);\n    }\n});\n\n// Combine all queries into a single DO $$ block\nmsg.topic = \"create_tables\";\nmsg.action = \"create_tables\";\nmsg.query = `\nDO $$\nBEGIN\n    SET TIME ZONE 'Europe/Rome';\n    ${queries.join('\\n    ')}\nEND\n$$ LANGUAGE plpgsql;\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "65bbe8881bac97f5",
        "type": "inject",
        "z": "afcaa0cc9543dd06",
        "name": "Insert data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 660,
        "wires": [
            [
                "7dc1b11918f1d2b4"
            ]
        ]
    },
    {
        "id": "7dc1b11918f1d2b4",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "simulate_data_2",
        "func": "// Function Node for Node-RED: Simulate Lime Kiln Data with cycle_time as the sum of other times\n\n// Utility function to generate random integer between min and max (inclusive)\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Utility function to generate random float between min and max with specified decimals\nfunction getRandomFloat(min, max, decimals=2) {\n    const factor = Math.pow(10, decimals);\n    return Math.round((Math.random() * (max - min) + min) * factor) / factor;\n}\n\n// Helper function to distribute total time into 'count' random parts\nfunction distributeTime(total, count) {\n    if (count === 0) return [];\n    if (count === 1) return [total];\n    \n    let points = [];\n    for (let i = 0; i < count - 1; i++) {\n        points.push(Math.random());\n    }\n    points.sort((a, b) => a - b);\n    \n    let times = [];\n    let prev = 0;\n    for (let i = 0; i < points.length; i++) {\n        times.push(Math.round((points[i] - prev) * total));\n        prev = points[i];\n    }\n    times.push(Math.round((1 - prev) * total));\n    \n    return times;\n}\n\nlet cycle_id = flow.get(\"cycle_id\") + 1;\n\n// Generate simulated data\nlet payload = {\n    cycle_id: cycle_id,\n    created_at: new Date().toISOString(),\n    \n    // Production Data\n    shaft_combustion: getRandomInt(50, 150), // e.g., number of combustions\n    limestone_cycle: getRandomFloat(100.0, 500.0), // tons per cycle\n    limestone_cycle_setpoint: 400.0, // target tons per cycle\n    lime_cycle: getRandomFloat(200.0, 600.0), // tons produced per cycle\n    nominal_prod: 500.0, // nominal production capacity in tons\n    shaft1_strokes: getRandomInt(1000, 5000),\n    shaft2_strokes: getRandomInt(1000, 5000),\n    \n    // Fuel Data\n    heat_consumption: getRandomFloat(1000.0, 5000.0), // e.g., kJ\n    heat_consumption_setpoint: 4000.0,\n    fuel_cycle: getRandomFloat(200.0, 800.0), // liters per cycle\n    fuel_cycle_setpoint: 600.0,\n    fuel_flow: getRandomFloat(50.0, 300.0), // liters per hour\n    fuel_flow_setpoint: 250.0,\n    natural_gas_output_regulator: getRandomFloat(1.0, 5.0), // regulator setting\n    \n    // Air Data\n    low_heat_val_air_calc: getRandomFloat(0.5, 2.0),\n    stoich_air_calc: getRandomFloat(1.0, 3.0),\n    combustion_air_flow_theo: getRandomFloat(500.0, 1500.0), // theoretical air flow\n    combustion_air_flow: getRandomFloat(450.0, 1600.0),\n    combustion_air_index: getRandomFloat(0.95, 1.05),\n    combustion_air_index_setpoint: 1.00,\n    combustion_air_blower_speed: getRandomFloat(1500.0, 2500.0), // RPM\n    combustion_air_blower_speed_setpoint: 2000.0,\n    cool_air_flow_theo: getRandomFloat(300.0, 1000.0),\n    cool_air_flow: getRandomFloat(350.0, 950.0),\n    cool_air_ratio: getRandomFloat(1.0, 2.0),\n    cool_air_ratio_setpoint: 1.5,\n    cool_air_blower_speed: getRandomFloat(1000.0, 2000.0),\n    cool_air_blower_speed_setpoint: 1500.0,\n    \n    // Temperatures\n    channel_temp1: getRandomFloat(200.0, 800.0), // °C\n    channel_temp2: getRandomFloat(200.0, 800.0),\n    waste_gases_temp_outlet_kiln: getRandomFloat(300.0, 900.0),\n    waste_gases_temp_inlet_kiln_filter: getRandomFloat(150.0, 400.0),\n    shaft1_drawer_pipe_temp: getRandomFloat(100.0, 300.0),\n    shaft1_drawer_skip_temp: getRandomFloat(100.0, 300.0),\n    shaft2_drawer_pipe_temp: getRandomFloat(100.0, 300.0),\n    shaft2_drawer_skip_temp: getRandomFloat(100.0, 300.0),\n    natural_gas_temp: getRandomFloat(20.0, 100.0), // °C\n    hydraulic_oil_temp: getRandomFloat(40.0, 90.0), // °C\n    \n    // Pressures\n    combustion_air_pressure: getRandomFloat(1.0, 5.0), // bar\n    lime_cool_air_pressure: getRandomFloat(1.0, 5.0),\n    channel_air_pressure: getRandomFloat(1.0, 5.0),\n    shaft1_lances_cool_air_pressure: getRandomFloat(1.0, 5.0),\n    shaft2_lances_cool_air_pressure: getRandomFloat(1.0, 5.0),\n    natural_gas_pressure: getRandomFloat(1.0, 5.0),\n    hydraulic_oil_pressure: getRandomFloat(10.0, 100.0), // bar\n    \n    // Cycle Times (to be defined below)\n    // cycle_time will be set as the sum of the following times:\n    // combustion_time, inversion_time, cycle_disabled_time, fuel_supply_time,\n    // waiting_time, unavailability_time, drawer_sampling_time, valves_maint_time,\n    // hyd_oil_unit_maint_time, hyd_oil_plant_maint_time, blower_maint_time,\n    // skip_maint_time, limestone_hopper_time, other_maint_time,\n    // mechanical_issue_time, electrical_issue_time, process_issue_time,\n    // other_issue_time\n};\n\n// Define cycle_time between 10 and 15 minutes (600 to 900 seconds)\nlet cycle_time = getRandomInt(600, 900); // in seconds\npayload.cycle_time = cycle_time;\n\n// List of other time-related variables to distribute cycle_time\nlet timeVariables = [\n    \"combustion_time\",\n    \"inversion_time\",\n    \"cycle_disabled_time\",\n    \"fuel_supply_time\",\n    \"waiting_time\",\n    \"unavailability_time\",\n    \"drawer_sampling_time\",\n    \"valves_maint_time\",\n    \"hyd_oil_unit_maint_time\",\n    \"hyd_oil_plant_maint_time\",\n    \"blower_maint_time\",\n    \"skip_maint_time\",\n    \"limestone_hopper_time\",\n    \"other_maint_time\",\n    \"mechanical_issue_time\",\n    \"electrical_issue_time\",\n    \"process_issue_time\",\n    \"other_issue_time\"\n];\n\n// Distribute cycle_time among the other time variables\nlet distributedTimes = distributeTime(cycle_time, timeVariables.length);\n\n// Assign the distributed times to the payload\nfor (let i = 0; i < timeVariables.length; i++) {\n    payload[timeVariables[i]] = distributedTimes[i];\n}\n\n// Continue assigning other variables that are not part of cycle_time\n// Example: If there are other variables not related to cycle_time, assign them here\n// (In this case, all time-related variables are handled above)\n\nflow.set(\"cycle_id\", cycle_id);\n\n// Assign the payload to msg.payload\nmsg.topic = \"simulated_data\";\nmsg.payload = payload;\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nflow.set(\"cycle_id\", 0);",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 660,
        "wires": [
            [
                "687f4ad6838d28c5"
            ]
        ]
    },
    {
        "id": "687f4ad6838d28c5",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "filter_data",
        "func": "// Function Node for Node-RED: Validate Simulated Lime Kiln Data Against Allowed klin_tags\n\n// Retrieve klin_tags from flow variables\nconst klin_tags = flow.get('klin_tags');\n\nif (!klin_tags) {\n    node.error(\"Flow variable 'klin_tags' is not defined.\");\n    return null; // Stop processing if klin_tags is not available\n}\n\n// Extract all allowed variable names from klin_tags\nlet allowedVariables = new Set();\n\n// Iterate over each table in klin_tags\nklin_tags.forEach(tableObj => {\n    // Each tableObj has one key (table name) and its columns as an array\n    const tableNames = Object.keys(tableObj);\n    tableNames.forEach(tableName => {\n        const columns = tableObj[tableName];\n        columns.forEach(columnObj => {\n            const varName = Object.keys(columnObj)[0];\n            allowedVariables.add(varName);\n        });\n    });\n});\n\n// Initialize objects for allowed and disallowed variables\nlet allowedPayload = {};\nlet disallowedPayload = {};\n\n// Iterate over incoming msg.payload keys\nfor (let key in msg.payload) {\n    if (allowedVariables.has(key)) {\n        allowedPayload[key] = msg.payload[key];\n    } else {\n        disallowedPayload[key] = msg.payload[key];\n    }\n}\n\n// Prepare messages for output\nlet msgAllowed = { topic: \"allowed_data\", payload: allowedPayload };\nlet msgDisallowed = { topic: \"disallowed_data\", payload: disallowedPayload };\n\n// Return an array of messages: [allowed, disallowed]\nreturn [msgAllowed, msgDisallowed];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 660,
        "wires": [
            [
                "a966f99f6e60d518",
                "25f28db0003bed23"
            ],
            [
                "7125c1b4500856cb"
            ]
        ]
    },
    {
        "id": "a966f99f6e60d518",
        "type": "debug",
        "z": "afcaa0cc9543dd06",
        "name": "allowed_data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 660,
        "wires": []
    },
    {
        "id": "7125c1b4500856cb",
        "type": "debug",
        "z": "afcaa0cc9543dd06",
        "name": "disallowed_data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 760,
        "wires": []
    },
    {
        "id": "25f28db0003bed23",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "insert_data",
        "func": "// Function Node for Node-RED: Generate PostgreSQL DO Block with INSERT Statements\n\n// Retrieve klin_tags from flow variables\nconst klin_tags = flow.get('klin_tags');\n\nif (!klin_tags) {\n    node.error(\"Flow variable 'klin_tags' is not defined.\");\n    return null; // Stop processing if klin_tags is not available\n}\n\n// Helper function to extract the main data type from the column definition\nfunction getMainType(typeString) {\n    // Extract the first word (e.g., INTEGER, NUMERIC, TIMESTAMPTZ)\n    return typeString.split(' ')[0].toUpperCase();\n}\n\n// Helper function to escape single quotes in strings\nfunction escapeSingleQuotes(str) {\n    return str.replace(/'/g, \"''\");\n}\n\n// Initialize an array to hold all INSERT statements\nlet insertStatements = [];\n\n// Iterate over each table in klin_tags\nklin_tags.forEach(tableObj => {\n    // Each tableObj has one key (table name) and its columns as an array\n    const tableName = Object.keys(tableObj)[0];\n    const columns = tableObj[tableName];\n\n    // Initialize arrays to hold column names and their corresponding values\n    let columnNames = [];\n    let values = [];\n\n    columns.forEach(columnObj => {\n        const columnName = Object.keys(columnObj)[0];\n        const columnDef = columnObj[columnName];\n        const mainType = getMainType(columnDef);\n\n        columnNames.push(columnName);\n\n        // Retrieve the value from msg.payload; if missing, set to NULL\n        let value = msg.payload.hasOwnProperty(columnName) ? msg.payload[columnName] : null;\n\n        if (value === null || value === undefined) {\n            values.push(\"NULL\");\n        } else {\n            // Format the value based on its data type\n            if (mainType === 'TIMESTAMPTZ' || mainType === 'TIMESTAMP' || mainType === 'DATE') {\n                // Ensure the timestamp is properly formatted\n                // PostgreSQL accepts 'YYYY-MM-DDTHH:MM:SSZ' or 'YYYY-MM-DD HH:MM:SS+TZ'\n                // Adjust the format if necessary\n                let timestamp = new Date(value).toISOString(); // Converts to 'YYYY-MM-DDTHH:MM:SS.sssZ'\n                // Remove milliseconds for cleaner SQL\n                timestamp = timestamp.split('.')[0] + 'Z';\n                values.push(`'${escapeSingleQuotes(timestamp)}'`);\n            } else if (mainType === 'VARCHAR' || mainType === 'TEXT') {\n                // Wrap strings in single quotes and escape any existing quotes\n                values.push(`'${escapeSingleQuotes(value)}'`);\n            } else {\n                // Assume numeric types can be inserted directly\n                values.push(value);\n            }\n        }\n    });\n\n    // Construct the SQL INSERT statement\n    let insertStatement = `INSERT INTO ${tableName} (${columnNames.join(', ')}) VALUES (${values.join(', ')});`;\n    \n    // Add the INSERT statement to the array\n    insertStatements.push(insertStatement);\n});\n\n// Combine all INSERT statements into a single DO block\nlet doBlock = `DO $$\\nBEGIN\\n`;\ninsertStatements.forEach(stmt => {\n    doBlock += `  ${stmt}\\n`;\n});\ndoBlock += `END;\\n$$ LANGUAGE plpgsql;`;\n\n// Assign msg data\nmsg.topic = \"insert_data\"\nmsg.payload = insertStatements;\nmsg.query = doBlock\n\n// Optionally, log the generated DO block for debugging\nnode.log(`Generated SQL DO Block:\\n${doBlock}`);\n\n// Return the message with the SQL DO block\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 700,
        "wires": [
            [
                "2af0efaa6e475b69"
            ]
        ]
    },
    {
        "id": "2af0efaa6e475b69",
        "type": "link out",
        "z": "afcaa0cc9543dd06",
        "name": "insert_data",
        "mode": "link",
        "links": [
            "01515258c06346b8"
        ],
        "x": 1085,
        "y": 700,
        "wires": []
    },
    {
        "id": "918799ba01140ebd",
        "type": "inject",
        "z": "afcaa0cc9543dd06",
        "name": "No command",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "71dc51016bb62a06"
            ]
        ]
    },
    {
        "id": "ec67f3ad96ad675c",
        "type": "inject",
        "z": "afcaa0cc9543dd06",
        "name": "Insert data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "8491313b9711c35c",
        "type": "debug",
        "z": "afcaa0cc9543dd06",
        "name": "sync_tables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 380,
        "wires": []
    },
    {
        "id": "edd089aba64bd8f0",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "ack",
        "func": "// Expected commands\nconst expectedCommands = [\n    \n    \"SELECT\"\n    \n    ];\n\n// Initialize received commands\nlet receivedCommands = [];\n\n// Check if msg.pgsql is an array or an object\nif (Array.isArray(msg.pgsql)) {\n    receivedCommands = msg.pgsql.map(item => item.command);\n} else if (msg.pgsql && typeof msg.pgsql === \"object\" && msg.pgsql.command) {\n    receivedCommands = [msg.pgsql.command];\n} else {\n    node.error(\"Invalid pgsql format. Expected an array or an object with a 'command' property.\");\n    msg.error = true;\n    return [msg, null]; // Exit early \n}\n\n// Find missing commands\nconst missingCommands = expectedCommands.filter(cmd => !receivedCommands.includes(cmd));\n\n// Alert with node.error if any commands are missing\nif (missingCommands.length > 0) {\n    node.error(`Missing commands: ${missingCommands.join(\", \")}`);\n    msg.error = true;\n    return [msg, null]; // Exit early \n}\n\nnode.log(\"All expected commands are present.\");\nmsg.error = false;\n\n// Pass the message\nreturn [msg, msg];\n\n// First output - ALL\n// Second output - FILTERED\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 320,
        "wires": [
            [
                "d0ebebba94838085"
            ],
            [
                "84dabf47cd0c829a"
            ]
        ]
    },
    {
        "id": "9131839a2066e530",
        "type": "debug",
        "z": "afcaa0cc9543dd06",
        "name": "check_schema",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "b7341ac83da4f036",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "ack",
        "func": "// Expected commands\nconst expectedCommands = [\n    \n    \"DO\",\n\n    ];\n\n// Initialize received commands\nlet receivedCommands = [];\n\n// Check if msg.pgsql is an array or an object\nif (Array.isArray(msg.pgsql)) {\n    receivedCommands = msg.pgsql.map(item => item.command);\n} else if (msg.pgsql && typeof msg.pgsql === \"object\" && msg.pgsql.command) {\n    receivedCommands = [msg.pgsql.command];\n} else {\n    node.error(\"Invalid pgsql format. Expected an array or an object with a 'command' property.\");\n    msg.error = true;\n    return [msg, null]; // Exit early \n}\n\n// Find missing commands\nconst missingCommands = expectedCommands.filter(cmd => !receivedCommands.includes(cmd));\n\n// Alert with node.error if any commands are missing\nif (missingCommands.length > 0) {\n    node.error(`Missing commands: ${missingCommands.join(\", \")}`);\n    msg.error = true;\n    return [msg, null]; // Exit early \n}\n\nnode.log(\"All expected commands are present.\");\nmsg.error = false;\n\n// Pass the message\nreturn [msg, msg];\n\n// First output - ALL\n// Second output - FILTERED\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 240,
        "wires": [
            [
                "9131839a2066e530"
            ],
            [
                "94727dab6cd25204"
            ]
        ]
    },
    {
        "id": "2a8c557ea801dd43",
        "type": "inject",
        "z": "afcaa0cc9543dd06",
        "name": "manual_start",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "manual_start",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "a730ca9c882e4f15"
            ]
        ]
    },
    {
        "id": "a730ca9c882e4f15",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "define_tags",
        "func": "// Define klin_tags as a list of dictionaries, each with table name as key and columns as value\nconst klin_tags = [\n    {\n        \"production_data\": [\n            { \"cycle_id\": \"INTEGER PRIMARY KEY\" },\n            // { \"more\": \"INTEGER\" },\n            { \"created_at\": \"TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\" },\n            { \"shaft_combustion\": \"INTEGER\" },\n            { \"limestone_cycle\": \"NUMERIC\" },\n            { \"limestone_cycle_setpoint\": \"NUMERIC\" },\n            { \"lime_cycle\": \"NUMERIC\" },\n            { \"nominal_prod\": \"NUMERIC\" },\n            { \"shaft1_strokes\": \"INTEGER\" },\n            { \"shaft2_strokes\": \"INTEGER\" }\n        ]\n    },\n    {\n        \"fuel_data\": [\n            { \"cycle_id\": \"INTEGER PRIMARY KEY\" },\n            { \"heat_consumption\": \"NUMERIC\" },\n            { \"heat_consumption_setpoint\": \"NUMERIC\" },\n            { \"fuel_cycle\": \"NUMERIC\" },\n            { \"fuel_cycle_setpoint\": \"NUMERIC\" },\n            { \"fuel_flow\": \"NUMERIC\" },\n            { \"fuel_flow_setpoint\": \"NUMERIC\" },\n            { \"natural_gas_output_regulator\": \"NUMERIC\" }\n        ]\n    },\n    {\n        \"air_data\": [\n            { \"cycle_id\": \"INTEGER PRIMARY KEY\" },\n            { \"low_heat_val_air_calc\": \"NUMERIC\" },\n            { \"stoich_air_calc\": \"NUMERIC\" },\n            { \"combustion_air_flow_theo\": \"NUMERIC\" },\n            { \"combustion_air_flow\": \"NUMERIC\" },\n            { \"combustion_air_index\": \"NUMERIC\" },\n            { \"combustion_air_index_setpoint\": \"NUMERIC\" },\n            { \"combustion_air_blower_speed\": \"NUMERIC\" },\n            { \"combustion_air_blower_speed_setpoint\": \"NUMERIC\" },\n            { \"cool_air_flow_theo\": \"NUMERIC\" },\n            { \"cool_air_flow\": \"NUMERIC\" },\n            { \"cool_air_ratio\": \"NUMERIC\" },\n            { \"cool_air_ratio_setpoint\": \"NUMERIC\" },\n            { \"cool_air_blower_speed\": \"NUMERIC\" },\n            { \"cool_air_blower_speed_setpoint\": \"NUMERIC\" }\n        ]\n    },\n    {\n        \"temperatures\": [\n            { \"cycle_id\": \"INTEGER PRIMARY KEY\" },\n            { \"channel_temp1\": \"NUMERIC\" },\n            { \"channel_temp2\": \"NUMERIC\" },\n            { \"waste_gases_temp_outlet_kiln\": \"NUMERIC\" },\n            { \"waste_gases_temp_inlet_kiln_filter\": \"NUMERIC\" },\n            { \"shaft1_drawer_pipe_temp\": \"NUMERIC\" },\n            { \"shaft1_drawer_skip_temp\": \"NUMERIC\" },\n            { \"shaft2_drawer_pipe_temp\": \"NUMERIC\" },\n            { \"shaft2_drawer_skip_temp\": \"NUMERIC\" },\n            { \"natural_gas_temp\": \"NUMERIC\" },\n            { \"hydraulic_oil_temp\": \"NUMERIC\" }\n        ]\n    },\n    {\n        \"pressures\": [\n            { \"cycle_id\": \"INTEGER PRIMARY KEY\" },\n            { \"combustion_air_pressure\": \"NUMERIC\" },\n            { \"lime_cool_air_pressure\": \"NUMERIC\" },\n            { \"channel_air_pressure\": \"NUMERIC\" },\n            { \"shaft1_lances_cool_air_pressure\": \"NUMERIC\" },\n            { \"shaft2_lances_cool_air_pressure\": \"NUMERIC\" },\n            { \"natural_gas_pressure\": \"NUMERIC\" },\n            { \"hydraulic_oil_pressure\": \"NUMERIC\" }\n        ]\n    },\n    {\n        \"cycle_times\": [\n            { \"cycle_id\": \"INTEGER PRIMARY KEY\" },\n            { \"cycle_time\": \"INTEGER\" },\n            { \"combustion_time\": \"INTEGER\" },\n            { \"inversion_time\": \"INTEGER\" },\n            { \"cycle_disabled_time\": \"INTEGER\" },\n            { \"fuel_supply_time\": \"INTEGER\" },\n            { \"waiting_time\": \"INTEGER\" },\n            { \"unavailability_time\": \"INTEGER\" },\n            { \"drawer_sampling_time\": \"INTEGER\" },\n            { \"valves_maint_time\": \"INTEGER\" },\n            { \"hyd_oil_unit_maint_time\": \"INTEGER\" },\n            { \"hyd_oil_plant_maint_time\": \"INTEGER\" },\n            { \"blower_maint_time\": \"INTEGER\" },\n            { \"skip_maint_time\": \"INTEGER\" },\n            { \"limestone_hopper_time\": \"INTEGER\" },\n            { \"other_maint_time\": \"INTEGER\" },\n            { \"mechanical_issue_time\": \"INTEGER\" },\n            { \"electrical_issue_time\": \"INTEGER\" },\n            { \"process_issue_time\": \"INTEGER\" },\n            { \"other_issue_time\": \"INTEGER\" }\n        ]\n    }\n];\n\n// Set klin_tags as a flow variable\nflow.set('klin_tags', klin_tags);\n\n// Optionally, log the initialization\nnode.log(\"Flow variable 'klin_tags' has been initialized.\");\n\n// Optionally, send a message indicating completion\nmsg.payload = \"klin_tags initialized successfully.\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "3a468f2540515f35"
            ]
        ]
    },
    {
        "id": "3a468f2540515f35",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "retrieve_tables",
        "func": "// Query to fetch all tables and their columns in the 'public' schema\nconst retrievalQuery = `\nSELECT\n    c.table_name,\n    c.column_name,\n    c.data_type,\n    c.column_default,\n    c.is_nullable,\n    CASE \n        WHEN tc.constraint_type = 'PRIMARY KEY' THEN 'YES' \n        ELSE 'NO' \n    END AS is_primary_key\nFROM\n    information_schema.columns c\nLEFT JOIN\n    information_schema.key_column_usage kcu\n    ON c.table_name = kcu.table_name\n    AND c.column_name = kcu.column_name\n    AND c.table_schema = kcu.table_schema\nLEFT JOIN\n    information_schema.table_constraints tc\n    ON kcu.constraint_name = tc.constraint_name\n    AND kcu.table_schema = tc.table_schema\n    AND tc.constraint_type = 'PRIMARY KEY'\nWHERE\n    c.table_schema = 'public';\n\n`;\n\nmsg.query = retrievalQuery;\nmsg.topic = \"retrieve_tables\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 100,
        "wires": [
            [
                "12af5a8494775238"
            ]
        ]
    },
    {
        "id": "12af5a8494775238",
        "type": "link out",
        "z": "afcaa0cc9543dd06",
        "name": "retrieve_schema",
        "mode": "link",
        "links": [
            "01515258c06346b8"
        ],
        "x": 755,
        "y": 100,
        "wires": []
    },
    {
        "id": "94727dab6cd25204",
        "type": "link out",
        "z": "afcaa0cc9543dd06",
        "name": "check_schema_odr",
        "mode": "link",
        "links": [
            "3fb3b4d04d211d99"
        ],
        "x": 915,
        "y": 260,
        "wires": []
    },
    {
        "id": "3fb3b4d04d211d99",
        "type": "link in",
        "z": "afcaa0cc9543dd06",
        "name": "initialize_odr",
        "links": [
            "94727dab6cd25204"
        ],
        "x": 185,
        "y": 60,
        "wires": [
            [
                "a730ca9c882e4f15"
            ]
        ]
    },
    {
        "id": "824bd4229a6d31df",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "simulate_data",
        "func": "// Function Node for Node-RED: Simulate Lime Kiln Data\n\n// Utility function to generate random integer between min and max (inclusive)\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Utility function to generate random float between min and max with specified decimals\nfunction getRandomFloat(min, max, decimals=2) {\n    const factor = Math.pow(10, decimals);\n    return Math.round((Math.random() * (max - min) + min) * factor) / factor;\n}\n\n// Generate simulated data\nlet payload = {\n    cycle_id: getRandomInt(1000, 9999),\n    created_at: new Date().toISOString(),\n    \n    // Production Data\n    shaft_combustion: getRandomInt(50, 150), // e.g., number of combustions\n    limestone_cycle: getRandomFloat(100.0, 500.0), // tons per cycle\n    limestone_cycle_setpoint: 400.0, // target tons per cycle\n    lime_cycle: getRandomFloat(200.0, 600.0), // tons produced per cycle\n    nominal_prod: 500.0, // nominal production capacity in tons\n    shaft1_strokes: getRandomInt(1000, 5000),\n    shaft2_strokes: getRandomInt(1000, 5000),\n    \n    // Fuel Data\n    heat_consumption: getRandomFloat(1000.0, 5000.0), // e.g., kJ\n    heat_consumption_setpoint: 4000.0,\n    fuel_cycle: getRandomFloat(200.0, 800.0), // liters per cycle\n    fuel_cycle_setpoint: 600.0,\n    fuel_flow: getRandomFloat(50.0, 300.0), // liters per hour\n    fuel_flow_setpoint: 250.0,\n    natural_gas_output_regulator: getRandomFloat(1.0, 5.0), // regulator setting\n    \n    // Air Data\n    low_heat_val_air_calc: getRandomFloat(0.5, 2.0),\n    stoich_air_calc: getRandomFloat(1.0, 3.0),\n    combustion_air_flow_theo: getRandomFloat(500.0, 1500.0), // theoretical air flow\n    combustion_air_flow: getRandomFloat(450.0, 1600.0),\n    combustion_air_index: getRandomFloat(0.95, 1.05),\n    combustion_air_index_setpoint: 1.00,\n    combustion_air_blower_speed: getRandomFloat(1500.0, 2500.0), // RPM\n    combustion_air_blower_speed_setpoint: 2000.0,\n    cool_air_flow_theo: getRandomFloat(300.0, 1000.0),\n    cool_air_flow: getRandomFloat(350.0, 950.0),\n    cool_air_ratio: getRandomFloat(1.0, 2.0),\n    cool_air_ratio_setpoint: 1.5,\n    cool_air_blower_speed: getRandomFloat(1000.0, 2000.0),\n    cool_air_blower_speed_setpoint: 1500.0,\n    \n    // Temperatures\n    channel_temp1: getRandomFloat(200.0, 800.0), // °C\n    channel_temp2: getRandomFloat(200.0, 800.0),\n    waste_gases_temp_outlet_kiln: getRandomFloat(300.0, 900.0),\n    waste_gases_temp_inlet_kiln_filter: getRandomFloat(150.0, 400.0),\n    shaft1_drawer_pipe_temp: getRandomFloat(100.0, 300.0),\n    shaft1_drawer_skip_temp: getRandomFloat(100.0, 300.0),\n    shaft2_drawer_pipe_temp: getRandomFloat(100.0, 300.0),\n    shaft2_drawer_skip_temp: getRandomFloat(100.0, 300.0),\n    natural_gas_temp: getRandomFloat(20.0, 100.0), // °C\n    hydraulic_oil_temp: getRandomFloat(40.0, 90.0), // °C\n    \n    // Pressures\n    combustion_air_pressure: getRandomFloat(1.0, 5.0), // bar\n    lime_cool_air_pressure: getRandomFloat(1.0, 5.0),\n    channel_air_pressure: getRandomFloat(1.0, 5.0),\n    shaft1_lances_cool_air_pressure: getRandomFloat(1.0, 5.0),\n    shaft2_lances_cool_air_pressure: getRandomFloat(1.0, 5.0),\n    natural_gas_pressure: getRandomFloat(1.0, 5.0),\n    hydraulic_oil_pressure: getRandomFloat(10.0, 100.0), // bar\n    \n    // Cycle Times (in seconds)\n    cycle_time: getRandomInt(3600, 7200), // 1 to 2 hours\n    combustion_time: getRandomInt(1800, 3600), // 30 to 60 minutes\n    inversion_time: getRandomInt(300, 600), // 5 to 10 minutes\n    cycle_disabled_time: getRandomInt(0, 300), // 0 to 5 minutes\n    fuel_supply_time: getRandomInt(600, 1200), // 10 to 20 minutes\n    waiting_time: getRandomInt(300, 900), // 5 to 15 minutes\n    unavailability_time: getRandomInt(0, 600), // 0 to 10 minutes\n    drawer_sampling_time: getRandomInt(60, 300), // 1 to 5 minutes\n    valves_maint_time: getRandomInt(300, 900),\n    hyd_oil_unit_maint_time: getRandomInt(300, 900),\n    hyd_oil_plant_maint_time: getRandomInt(300, 900),\n    blower_maint_time: getRandomInt(300, 900),\n    skip_maint_time: getRandomInt(300, 900),\n    limestone_hopper_time: getRandomInt(300, 900),\n    other_maint_time: getRandomInt(300, 900),\n    \n    // Issue Times (in seconds)\n    mechanical_issue_time: getRandomInt(0, 600),\n    electrical_issue_time: getRandomInt(0, 600),\n    process_issue_time: getRandomInt(0, 600),\n    other_issue_time: getRandomInt(0, 600)\n};\n\n// Assign the payload to msg.payload\nmsg.payload = payload;\n\nmsg.topic = \"simulated_data\"\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "7ee78c6ee0a85ee0",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "select_last_id",
        "func": "let table_name = \"production_data\";\n\nmsg.query = `\n\nSELECT cycle_id \nFROM ${table_name}\nORDER BY cycle_id DESC\nLIMIT 1\n\n`;\n\nmsg.topic = \"update_last_id\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 600,
        "wires": [
            [
                "716dc1a3a6bbdfca"
            ]
        ]
    },
    {
        "id": "716dc1a3a6bbdfca",
        "type": "link out",
        "z": "afcaa0cc9543dd06",
        "name": "select_last_id",
        "mode": "link",
        "links": [
            "01515258c06346b8"
        ],
        "x": 515,
        "y": 600,
        "wires": []
    },
    {
        "id": "986c8899259bd449",
        "type": "inject",
        "z": "afcaa0cc9543dd06",
        "name": "update_last_id",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "7ee78c6ee0a85ee0"
            ]
        ]
    },
    {
        "id": "f69789f20550fd9c",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "update_id",
        "func": "// Ensure msg.payload exists and is an array\nif (Array.isArray(msg.payload) && msg.payload.length > 0) {\n    const firstItem = msg.payload[0];\n    \n    // Check if cycle_id exists in the first item\n    if (firstItem.hasOwnProperty('cycle_id')) {\n        // Store cycle_id in flow context\n        flow.set(\"cycle_id\", firstItem.cycle_id);\n        msg.update_value = firstItem.cycle_id\n        // node.log(`cycle_id set to ${firstItem.cycle_id}`);\n    } else {\n        node.warn(\"cycle_id not found in the first payload item.\");\n    }\n} else {\n    node.warn(\"msg.payload is not an array or is empty.\");\n}\n\n// Pass the message to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 480,
        "wires": [
            [
                "48cbcf80ced757d1"
            ]
        ]
    },
    {
        "id": "48cbcf80ced757d1",
        "type": "debug",
        "z": "afcaa0cc9543dd06",
        "name": "update_last_id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 480,
        "wires": []
    },
    {
        "id": "803062224b063389",
        "type": "function",
        "z": "afcaa0cc9543dd06",
        "name": "ack",
        "func": "// Expected commands\nconst expectedCommands = [\n    \n    \"DO\",\n\n    ];\n\n// Initialize received commands\nlet receivedCommands = [];\n\n// Check if msg.pgsql is an array or an object\nif (Array.isArray(msg.pgsql)) {\n    receivedCommands = msg.pgsql.map(item => item.command);\n} else if (msg.pgsql && typeof msg.pgsql === \"object\" && msg.pgsql.command) {\n    receivedCommands = [msg.pgsql.command];\n} else {\n    node.error(\"Invalid pgsql format. Expected an array or an object with a 'command' property.\");\n    msg.error = true;\n    return [msg, null]; // Exit early \n}\n\n// Find missing commands\nconst missingCommands = expectedCommands.filter(cmd => !receivedCommands.includes(cmd));\n\n// Alert with node.error if any commands are missing\nif (missingCommands.length > 0) {\n    node.error(`Missing commands: ${missingCommands.join(\", \")}`);\n    msg.error = true;\n    return [msg, null]; // Exit early \n}\n\nnode.log(\"All expected commands are present.\");\nmsg.error = false;\n\n// Pass the message\nreturn [msg, msg];\n\n// First output - ALL\n// Second output - FILTERED\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 400,
        "wires": [
            [
                "8491313b9711c35c"
            ],
            [
                "d317ffe310f8478f"
            ]
        ]
    },
    {
        "id": "d317ffe310f8478f",
        "type": "link out",
        "z": "afcaa0cc9543dd06",
        "name": "update_last_id",
        "mode": "link",
        "links": [
            "56afc7be74fdf15a"
        ],
        "x": 915,
        "y": 420,
        "wires": []
    },
    {
        "id": "56afc7be74fdf15a",
        "type": "link in",
        "z": "afcaa0cc9543dd06",
        "name": "update_last_id",
        "links": [
            "d317ffe310f8478f"
        ],
        "x": 175,
        "y": 600,
        "wires": [
            [
                "7ee78c6ee0a85ee0"
            ]
        ]
    },
    {
        "id": "841bfed957343a4e",
        "type": "postgreSQLConfig",
        "name": "edge",
        "host": "postgres_host",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "edge",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "edge",
        "userFieldType": "str",
        "password": "edgeadmin",
        "passwordFieldType": "str"
    },
    {
        "id": "904e4718f713c45c",
        "type": "postgreSQLConfig",
        "name": "odr_data",
        "host": "postgres_host",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "odr_data",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "edge",
        "userFieldType": "str",
        "password": "edgeadmin",
        "passwordFieldType": "str"
    }
]