[
    {
        "id": "4b69c9fd15f72033",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bd541df93b501d76",
        "type": "tab",
        "label": "Postgres Management",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9919b96619183950",
        "type": "tab",
        "label": "Temp",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f38f1d8bba7489fd",
        "type": "subflow",
        "name": "Machine Types",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 200,
                "wires": [
                    {
                        "id": "b956b37bba0dce0c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 100,
                "wires": [
                    {
                        "id": "a83e3c42dccd2d21",
                        "port": 0
                    },
                    {
                        "id": "24ef560d2d727b47",
                        "port": 0
                    },
                    {
                        "id": "0e81f848a29bfbbb",
                        "port": 0
                    }
                ]
            },
            {
                "x": 720,
                "y": 300,
                "wires": [
                    {
                        "id": "05b3911c55d5e2ec",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DATABASE",
                "type": "str",
                "value": "edge",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SCHEMA",
                "type": "str",
                "value": "public",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TABLE",
                "type": "str",
                "value": "machine_types",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 720,
            "y": 240,
            "wires": [
                {
                    "id": "d591560e71cdaf0a",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "2e8ad62399cfdd46",
        "type": "subflow",
        "name": "Machines",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 200,
                "wires": [
                    {
                        "id": "aa1095426398d4a2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 100,
                "wires": [
                    {
                        "id": "b755f1359e2cca04",
                        "port": 0
                    },
                    {
                        "id": "19f3487286b11943",
                        "port": 0
                    },
                    {
                        "id": "90d29f1b9188b78b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 720,
                "y": 300,
                "wires": [
                    {
                        "id": "c3c2361355d4a0c4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DATABASE",
                "type": "str",
                "value": "edge",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SCHEMA",
                "type": "str",
                "value": "public",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TABLE",
                "type": "str",
                "value": "machines",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 720,
            "y": 240,
            "wires": [
                {
                    "id": "60915ab31cd5b286",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "32a3aaecd6ba621c",
        "type": "subflow",
        "name": "Endpoints",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 280,
                "wires": [
                    {
                        "id": "a50b2db7656d36e4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 180,
                "wires": [
                    {
                        "id": "3123ac1deab5f251",
                        "port": 0
                    },
                    {
                        "id": "da767bf21adabe42",
                        "port": 0
                    },
                    {
                        "id": "4d4c4616a70beee5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 700,
                "y": 380,
                "wires": [
                    {
                        "id": "0d7719f2adc3d79d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DATABASE",
                "type": "str",
                "value": "edge",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SCHEMA",
                "type": "str",
                "value": "public",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TABLE",
                "type": "str",
                "value": "endpoints",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 700,
            "y": 300,
            "wires": [
                {
                    "id": "a9c8a0dbacef693b",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "96d5a2eeb5f112bc",
        "type": "subflow",
        "name": "Tag Table",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 260,
                "wires": [
                    {
                        "id": "df46bed50bf4daed"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 160,
                "wires": [
                    {
                        "id": "7c52eb13244670e4",
                        "port": 0
                    },
                    {
                        "id": "60bd7628bf41b9fc",
                        "port": 0
                    },
                    {
                        "id": "a5a228e2f528d133",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DATABASE",
                "type": "str",
                "value": "edge",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SCHEMA",
                "type": "str",
                "value": "public",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TABLE",
                "type": "str",
                "value": "tags_default",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 680,
            "y": 320,
            "wires": [
                {
                    "id": "a74b79495efd24d7",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "8d01ac882dc6d48d",
        "type": "subflow",
        "name": "Tag Tables Config",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 300,
                "wires": [
                    {
                        "id": "b0e07cfe068bad1f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 200,
                "wires": [
                    {
                        "id": "f4196adaf4b495fc",
                        "port": 0
                    },
                    {
                        "id": "cf3a69ba53110e22",
                        "port": 0
                    },
                    {
                        "id": "89e5ecbbf9264cc4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 780,
                "y": 360,
                "wires": [
                    {
                        "id": "1639cbdd260d2cff",
                        "port": 0
                    }
                ]
            },
            {
                "x": 680,
                "y": 440,
                "wires": [
                    {
                        "id": "e7395bef25d1c1bf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DATABASE",
                "type": "str",
                "value": "edge",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SCHEMA",
                "type": "str",
                "value": "config",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TABLE",
                "type": "str",
                "value": "tag_tables_config",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TAGS_SCHEMA",
                "type": "str",
                "value": "tags",
                "ui": {
                    "icon": "font-awesome/fa-tags",
                    "label": {
                        "en-US": "Tags Schema"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 680,
            "y": 360,
            "wires": [
                {
                    "id": "493d6974b92dca31",
                    "port": 2
                }
            ]
        }
    },
    {
        "id": "1170b3f43fbc52f8",
        "type": "junction",
        "z": "bd541df93b501d76",
        "x": 680,
        "y": 380,
        "wires": [
            [
                "0345f209c7024da9",
                "c269f26fc7e6784d"
            ]
        ]
    },
    {
        "id": "7050fd899e41ae8d",
        "type": "junction",
        "z": "bd541df93b501d76",
        "x": 680,
        "y": 460,
        "wires": [
            [
                "4427a308d77a4c37",
                "b4f2906176b9cb5e"
            ]
        ]
    },
    {
        "id": "b956b37bba0dce0c",
        "type": "junction",
        "z": "f38f1d8bba7489fd",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "30a4076a37414c40",
                "a433dbb3c48bf268"
            ]
        ]
    },
    {
        "id": "327f0a2810b02718",
        "type": "junction",
        "z": "bd541df93b501d76",
        "x": 680,
        "y": 540,
        "wires": [
            [
                "d5beeec001412b1b",
                "80e10827bc63dbd6"
            ]
        ]
    },
    {
        "id": "8d88ac36455f0209",
        "type": "junction",
        "z": "f38f1d8bba7489fd",
        "x": 700,
        "y": 160,
        "wires": [
            [
                "42cc1dc8f59570af",
                "b188661f063477fc"
            ]
        ]
    },
    {
        "id": "aa1095426398d4a2",
        "type": "junction",
        "z": "2e8ad62399cfdd46",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "33c484973ec32be3",
                "06218415e5cd1cd9"
            ]
        ]
    },
    {
        "id": "fb18fb9dd24d4a7d",
        "type": "junction",
        "z": "2e8ad62399cfdd46",
        "x": 700,
        "y": 160,
        "wires": [
            [
                "bd899c1ea15c5f76",
                "cf35598e75a95852"
            ]
        ]
    },
    {
        "id": "a50b2db7656d36e4",
        "type": "junction",
        "z": "32a3aaecd6ba621c",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "43c1c84c388d6f53",
                "9a5e06c77b4816e3"
            ]
        ]
    },
    {
        "id": "931179e7bf82fd62",
        "type": "junction",
        "z": "32a3aaecd6ba621c",
        "x": 680,
        "y": 240,
        "wires": [
            [
                "6ce1145fad4c371b",
                "aa6eef9ee243c8f9"
            ]
        ]
    },
    {
        "id": "e7735ec40b9cbcd1",
        "type": "junction",
        "z": "bd541df93b501d76",
        "x": 680,
        "y": 800,
        "wires": [
            [
                "d6ca67b2b65ac9e3",
                "e54eec3fb8b5cedf"
            ]
        ]
    },
    {
        "id": "55797f5332ec928e",
        "type": "junction",
        "z": "bd541df93b501d76",
        "x": 680,
        "y": 880,
        "wires": [
            [
                "a06755f25bc23c34",
                "6f71f4b10ba6ad3a"
            ]
        ]
    },
    {
        "id": "df46bed50bf4daed",
        "type": "junction",
        "z": "96d5a2eeb5f112bc",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "289ed522f9d46c0e",
                "950353991ce401e6"
            ]
        ]
    },
    {
        "id": "fb4ae1d74584cfe9",
        "type": "junction",
        "z": "96d5a2eeb5f112bc",
        "x": 660,
        "y": 220,
        "wires": [
            [
                "9fded1b5e119a203",
                "5eec11117ed59706"
            ]
        ]
    },
    {
        "id": "b0e07cfe068bad1f",
        "type": "junction",
        "z": "8d01ac882dc6d48d",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "a32e742fd6349a59",
                "3f0b799a977415c5"
            ]
        ]
    },
    {
        "id": "1639cbdd260d2cff",
        "type": "junction",
        "z": "8d01ac882dc6d48d",
        "x": 660,
        "y": 260,
        "wires": [
            [
                "6b787d1e94828298",
                "867b0a31a6575085"
            ]
        ]
    },
    {
        "id": "54a4e86d9749426f",
        "type": "ui-base",
        "name": "Set Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": "1",
        "showDisconnectNotification": true
    },
    {
        "id": "c6d817962b44c6e6",
        "type": "ui-page",
        "name": "Home",
        "ui": "54a4e86d9749426f",
        "path": "/home",
        "icon": "home",
        "layout": "grid",
        "theme": "70ee3095f0c0fa3d",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "4ef9bcc0d874c9bb",
        "type": "ui-group",
        "name": "Splashboard",
        "page": "c6d817962b44c6e6",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "70ee3095f0c0fa3d",
        "type": "ui-theme",
        "name": "Default",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "ef80b7f9fd2b8842",
        "type": "ui-page",
        "name": "Settings",
        "ui": "54a4e86d9749426f",
        "path": "/settings",
        "icon": "cog",
        "layout": "grid",
        "theme": "70ee3095f0c0fa3d",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4290ffc4397af8c8",
        "type": "ui-group",
        "name": "General",
        "page": "ef80b7f9fd2b8842",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "46764671162d2995",
        "type": "ui-group",
        "name": "Tag Tables",
        "page": "ef80b7f9fd2b8842",
        "width": "12",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "a806a6d6a9431bd7",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "904e4718f713c45c",
        "type": "postgreSQLConfig",
        "name": "odr_data",
        "host": "postgres_host",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "odr_data",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "edge",
        "userFieldType": "str",
        "password": "edgeadmin",
        "passwordFieldType": "str"
    },
    {
        "id": "841bfed957343a4e",
        "type": "postgreSQLConfig",
        "name": "edge",
        "host": "postgres_host",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "edge",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "edge",
        "userFieldType": "str",
        "password": "edgeadmin",
        "passwordFieldType": "str"
    },
    {
        "id": "b188661f063477fc",
        "type": "debug",
        "z": "f38f1d8bba7489fd",
        "name": "table_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 140,
        "wires": []
    },
    {
        "id": "d591560e71cdaf0a",
        "type": "function",
        "z": "f38f1d8bba7489fd",
        "name": "update_status",
        "func": "// Function to replace underscores with spaces and capitalize words\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\nfunction parseValue(value) {\n    if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n            value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n            try {\n                return JSON.parse(value);\n            } catch (error) {\n                return value;\n            }\n        }\n        // Return original value for non-JSON types\n        return value;\n    }\n    return value;\n  }\n\n// Retrieve existing data or initialize\nlet columns = [];\nlet data = global.get(msg.database.table) || [];\n\n// Extract column names from PostgreSQL query\nif (msg.pgsql && msg.pgsql[0] && msg.pgsql[0].rows) {\n    columns = msg.pgsql[0].rows.map(col => col.column_name);\n}\n\n// Extract data rows from PostgreSQL query and parse them\nif (msg.pgsql && msg.pgsql[1] && msg.pgsql[1].rows) {\n    data = msg.pgsql[1].rows;\n    data.forEach((row, rowIndex) => {\n        Object.keys(row).forEach((key) => {\n            let originalValue = row[key];\n            row[key] = parseValue(originalValue)\n        });\n    });\n}\n\n// Build dynamic table headers\nconst baseHeaders = columns.length > 0\n    ? columns\n        .filter(key => key !== 'id') // Exclude 'id' key\n        .map(key => ({\n            title: capitalize(key),\n            value: key,\n            headerProps: { style: 'font-weight: 700' },\n            sortable: true\n        }))\n    : [];\n\n\nlet snacktext = \"\";\nif (msg.topicMain === \"deploy\") {\n    snacktext = `${msg.title} Saved Successfully!`;\n} else if (msg.topicMain === \"update\") {\n    snacktext = `${msg.title} Updated Successfully!`;\n} else if (msg.topicMain === \"start\") {\n    snacktext = `${msg.title} Started Successfully!`;\n}\n\n// Assign table data to the message\nmsg.data = data;\n\nmsg.dashboard.table = {\n    title: msg.title,\n    headers: baseHeaders\n};\nmsg.dashboard.history = msg.dashboard.history || [];\n\nmsg.dashboard.snackbar = {\n    show: true,\n    text: snacktext,\n    color: \"green-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\n// Save data back to the global context\nglobal.set(msg.database.table, data);\n\n// Return updated state\nconst now = new Date().toISOString();\nconst state = {\n    payload: { fill: \"green\", shape: \"dot\", text: `last update: ${now}` },\n    _msgid: msg._msgid\n};\n\nmsg.topic = 'update_status';\nreturn [msg, state];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "8d88ac36455f0209",
                "05b3911c55d5e2ec"
            ],
            []
        ]
    },
    {
        "id": "6a9a212b19e8915e",
        "type": "debug",
        "z": "f38f1d8bba7489fd",
        "name": "table_out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 140,
        "wires": []
    },
    {
        "id": "42cc1dc8f59570af",
        "type": "ui-template",
        "z": "f38f1d8bba7489fd",
        "group": "4290ffc4397af8c8",
        "page": "",
        "ui": "",
        "name": "table_machine_types",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Container -->\n  <v-card>\n    <!-- Card Header with Title, Reload Button, Search Bar, and Action Buttons -->\n    <v-card-item class=\"bg-blue-darken-3\">\n      <v-row class=\"my-2 align-self-center\" no-gutters>\n        \n        <!-- Title -->\n        <v-col cols=\"auto\" class=\"mx-4 align-self-center\">\n          <v-btn\n            @click=\"openInfoDialog\"\n            variant=\"tonal\"\n            class=\"font-weight-bold text-h5 text-white\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-table</v-icon>\n            <p class=\"mx-1 align-self-center\" v-text=\"msg.dashboard.table.title\"></p>\n          </v-btn>\n        </v-col>\n\n        <!-- Search Bar -->\n        <v-col class=\"mx-4 align-self-center\">\n          <v-text-field\n            v-model=\"search\"\n            label=\"Search\"\n            prepend-inner-icon=\"mdi-magnify\"\n            single-line\n            clearable\n            hide-details\n            color=\"white\"\n          ></v-text-field>\n        </v-col>\n\n        <!-- Action Buttons (CSV Upload, CSV Download, Edit, Save, Add New, Discard) -->\n        <v-col cols=\"auto\" class=\"mx-2 align-self-center text-white\">\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"updateTable\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-reload</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Reload</span>\n          </v-btn>\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"downloadCsv\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-export</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Export</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"enableEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Edit</span>\n          </v-btn>\n\n          <!-- Buttons visible in Edit Mode -->\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deploy\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-floppy</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Save</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"addNewItem\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-plus</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Add New</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"openCsvDialog\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-import</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Import</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"discardEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil-off</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Discard</span>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <!-- Data Table with Custom Cell Templates -->\n    <v-data-table\n      v-model=\"selected\"\n      :headers=\"msg.dashboard.table.headers\"\n      :items=\"msg.data\"\n      :search=\"search\"\n      :items-per-page=\"itemsPerPage\"\n      :items-per-page-options=\"[5, 10, 25, 50, -1]\"\n      class=\"elevation-1\"\n      :loading=\"msg.dashboard.loading\"\n      loading-text=\"Loading...\"\n      density=\"default\"\n    >\n<!-- MODIFY DISPLAY HERE -->\n\n\n\n<!-- END MODIFY -->\n      <!-- Actions Column with Edit and Delete Icons -->\n      <template v-slot:item.actions=\"{ item }\">\n        <div class=\"actions-column\">\n          <v-icon\n            v-show=\"editMode\"\n            small\n            class=\"mr-2\"\n            @click=\"editItem(item)\"\n            color=\"blue-darken-2\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-pencil\n          </v-icon>\n\n          <v-icon\n            v-show=\"editMode\"\n            small\n            @click=\"deleteItem(item)\"\n            color=\"blue-darken-4\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-delete\n          </v-icon>\n        </div>\n      </template>\n\n      <!-- No Data Message -->\n      <template v-slot:no-data>\n        <v-row class=\"ma-4\">\n          <v-alert :value=\"true\" color=\"warning\" icon=\"mdi-alert\">\n            No matching records found.\n          </v-alert>\n        </v-row>\n      </template>\n    </v-data-table>\n  </v-card>\n\n  <!-- Dialog for Adding or Editing Items -->\n  <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">{{ formTitle }}</span>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" v-model=\"valid\" fast-fail @submit.prevent>\n<!-- MODIFY FORM HERE -->\n\n          <!-- Form Fields -->\n          <v-text-field\n            v-model=\"editAction.newItem.name\"\n            label=\"Type Name\"\n            :rules=\"[v => !!v || 'Type is required']\"\n            required\n          ></v-text-field>\n          <v-text-field\n            v-model=\"editAction.newItem.vendor\"\n            label=\"Vendor\"\n            maxlength=\"50\"\n            counter\n          ></v-text-field>\n          <v-textarea\n            v-model=\"editAction.newItem.details\"\n            label=\"Details\"\n            maxlength=\"200\"\n            counter\n          ></v-text-field>\n\n<!-- END MODIFY-->\n        </v-form>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"saveItem\">Save</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Select a CSV file\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete Confirmation Dialog -->\n  <v-dialog v-model=\"deleteDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting this element will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue\" text @click=\"cancelDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"red\" text @click=\"confirmDeletion\">\n          Delete\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Info Dialog -->\n  <v-dialog v-model=\"infoDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Info\n      </v-card-title>\n\n      <v-card-text>\n        <p v-text=\"msg.dashboard.info\"></p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Close Button -->\n        <v-btn color=\"blue\" text @click=\"closeInfoDialog\">\n          OK\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      search: '',\n      page: 1,\n      itemsPerPage: 5,\n      headerNames: [],\n      dialog: false,\n      deleteDialog: false,\n      csvDialog: false,\n      infoDialog: false,\n      csvFile: null,    \n      formTitle: \"\",\n      editMode: false,\n      editAction: {\n        index: -1,\n        oldItem: null,\n        newItem: null,\n      },\n      selected: [],\n      actionsHeader: {\n        title: \"Actions\",\n        value: \"actions\",\n        headerProps: { style: 'font-weight: 700' },\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n    };\n  },\n  computed: {\n    pageCount() {\n      return Math.ceil(this.msg.data.length / this.itemsPerPage);\n    },\n  },\n  watch: {\n    msg: {\n      handler() {\n        if (this.msg?.dashboard?.table?.headers) {\n          this.headerNames = this.msg.dashboard.table.headers.map(header => header.value);\n        };\n        if (\n          this.editMode &&\n          this.msg?.dashboard?.table?.headers?.[this.msg.dashboard.table.headers.length - 1]?.value !== 'actions'\n        ) {\n          this.msg.dashboard.table.headers.push(this.actionsHeader);\n        };\n        // Dynamically update snackbar parameters\n        if (this.msg?.dashboard?.snackbar) {\n          const { show, text, color } = this.msg.dashboard.snackbar;\n          this.snackbar.show = show;\n          this.snackbar.text = text || '';\n          this.snackbar.color = color || 'default';\n        }\n      },\n      deep: true \n    }\n  },\n  methods: {\n    // Sends a message with the current state\n    msgSend() {\n      this.msg.dashboard.snackbar = null;\n      this.send({\n        topic: this.msg.topic,\n        topicMain: this.msg.topicMain,\n        title: this.msg.title,\n        database: this.msg.database,\n        data: this.msg.data,\n        dashboard: this.msg.dashboard,\n        payload: this.msg.payload,\n        time: new Date(),\n      });\n    },\n    \n    // Edit mode controls\n    enableEdit() {\n      this.msg.dashboard.snackbar.show = false;\n      this.msg.dashboard.table.headers.push(this.actionsHeader);\n      this.editMode = true;\n    },\n    disableEdit() {\n      this.msg.dashboard.table.headers = this.msg.dashboard.table.headers.filter(\n        header => header !== this.actionsHeader\n      );\n      this.editMode = false;\n    },\n    \n    // Message Outputs: Update, Deploy and discard edits \n    updateTable() {\n      this.msg.topic = \"update\";\n      this.msg.topicMain = \"update\";\n      this.msg.payload = null;\n      this.msgSend();\n    },\n    deploy() {\n      this.msg.dashboard.loading = true;\n      this.disableEdit();\n      this.msg.topic = \"deploy\";\n      this.msg.topicMain = \"deploy\";\n      this.msgSend();\n      // this.showSnackbar('Deploy action triggered!', 'info');\n    },\n    discardEdit() {\n      this.disableEdit();\n      this.updateTable();\n    },\n    \n    // Handling items\n    getDefaultItem() {\n      const defaultItem = {};\n      this.msg.dashboard.table.headers.forEach(header => {\n        if (header.value !== 'actions') {\n          defaultItem[header.value] = header.value === 'enabled' ? true :\n                                        header.value === 'status' ? \"unknown\" : null;\n        }\n      });\n      return defaultItem;\n    },\n    filterItem(item) {\n      if (!item) {\n        return null;\n      }\n      return Object.keys(item)\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exclude keys\n        .filter(key => this.headerNames.includes(key)) // Exclude keys\n        .reduce((obj, key) => {\n          obj[key] = item[key];\n          return obj;\n        }, {});\n    },\n    filterHeaders(headers) {\n      return headers.filter(header => !['actions', 'status', 'id'].includes(header.value)) // Exludes some columns\n    },\n    addEditAction(){\n      let action = JSON.parse(JSON.stringify(this.editAction));\n      action.oldItem = this.filterItem(action.oldItem);\n      action.newItem = this.filterItem(action.newItem);\n      this.msg.dashboard.history.push(action);\n    },\n    addNewItem() {\n      this.editAction.index = -1;\n      this.editAction.oldItem = null;\n      this.editAction.newItem = this.getDefaultItem();\n      this.formTitle = 'Add Item';\n      this.dialog = true;\n    },\n    editItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = { ...item };\n      this.formTitle = 'Edit Item';\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = null;\n      this.deleteDialog = true;\n    },\n\n    // Delete Dialog controls\n    cancelDeletion() {\n      this.deleteDialog = false;\n    },\n    confirmDeletion() {\n      this.deleteDialog = false;\n      if (this.editAction.index > -1) {\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n        // this.showSnackbar('Item deleted successfully!', 'success');\n      }\n    },\n\n    // Form Dialog controls\n    closeDialog() {\n      this.dialog = false;\n      this.$refs.form.reset();\n    },\n    async saveItem() {\n      const { valid } = await this.$refs.form.validate();\n      if (valid) {\n        if (this.editAction.index > -1) {\n          Object.assign(this.msg.data[this.editAction.index], this.editAction.newItem);\n          // this.showSnackbar('Item updated successfully!', 'success');\n        } else {\n          this.msg.data.push({ ...this.editAction.newItem });\n          // this.showSnackbar('Item added successfully!', 'success');\n        }\n        this.addEditAction();\n        this.closeDialog();\n      } else {\n        this.showSnackbar('Please correct the errors in the form.', 'error');\n      }\n    },\n\n    // Info Dialog controls\n    openInfoDialog() {\n      this.infoDialog = true;\n    },\n    closeInfoDialog() {\n      this.infoDialog = false;\n    },\n\n    // CSV Dialog controls\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Data Handling\n    // Stringify function that handles different data types\n    stringifyValue(value) {\n      if (value === undefined || value === null) {\n        return ''; // Handle null or undefined\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value); // Handle arrays by converting them to a JSON string\n      } else if (typeof value === 'object') {\n        return JSON.stringify(value); // Handle objects by converting them to a JSON string\n      } else if (typeof value === 'string') {\n        return value; // Use string as-is\n      } else {\n        return String(value); // Convert other types (number, boolean, etc.) to string\n      }\n    },\n    parseValue(value) {\n      if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n          value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n          try {\n            return JSON.parse(value);\n          } catch (error) {\n            return value;\n          }\n        }\n        // Return original value for non-JSON types\n        return value;\n      }\n      return value;\n    },\n\n    // CSV Upload and Loading\n    async processCsv() {  // Processes the uploaded CSV file\n      if (!this.csvFile) {\n        this.showSnackbar('No file selected!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV successfully uploaded!', 'success');\n      } catch (error) {\n        this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n    parseCsv(content) {  // Parses the CSV file content into an array of objects\n      const rows = content.split(/\\r?\\n/).filter(row => row.trim()); \n      const headers = rows.shift().split(';'); // Use the first row as headers\n      return rows.map(row => {\n        const values = row.split(';'); \n        return headers.reduce((acc, header, index) => {\n          acc[header] = this.parseValue(values[index]); // Map headers to corresponding values\n          return acc;\n        }, {});\n      });\n    },\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {  // Check if an item with the same name exists\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n            this.editAction.oldItem = {...existingItem};\n            this.editAction.newItem = {...newItem};\n            this.addEditAction()\n            Object.assign(existingItem, newItem); // Update \n          }\n        } else {\n          this.editAction.oldItem = null;\n          this.editAction.newItem = {...newItem};\n          this.addEditAction()\n          this.msg.data.push(newItem);  // Add new \n        }\n      });\n    },\n    \n    // CSV Generation and Download\n    generateCsv() {\n      const separator = ';';\n      const headers = this.filterHeaders(this.msg.dashboard.table.headers)\n        .map(header => header.value)\n        .join(separator); \n\n      const rows = this.msg.data.map(item => {\n        return this.filterHeaders(this.msg.dashboard.table.headers)\n          .map(header => {\n            return this.stringifyValue(item[header.value]);\n          })\n          .join(separator);\n      }).join('\\n');\n\n\n      return `${headers}\\n${rows}`;\n    },\n    createDownloadLink(csvContent) {\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${this.msg.database.table}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    downloadCsv() {\n      try {\n        const csvContent = this.generateCsv();\n        this.createDownloadLink(csvContent);\n        this.showSnackbar('CSV scaricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante il download del CSV:', error);\n        this.showSnackbar('Errore durante il download del CSV.', 'error');\n      }\n    },\n    \n    // Utility Methods\n    getStatusColor(value) {\n      const colors = {\n        \"unknown\": 'blue',\n        \"connecting\": 'amber',\n        \"connected\": 'green',\n        \"error\": 'red'\n      };\n      if (colors[value]) return colors[value];\n      return 'purple';\n    },\n    getSwitchColor(item) {\n      return item.enabled ? this.getStatusColor(item.status)\n                            : 'grey-lighten-2';\n    },\n    getListColor(list, elem, item) {\n      return item.enabled ? list.includes(elem) ? this.getStatusColor(item.status) : 'red'\n                            : 'grey-lighten-2';\n    },\n    getListColorStatic(list, elem) {\n      return list.includes(elem) ? 'green' : 'red';\n    },\n    handleEnabled(item) {\n      // Custom logic for enabling/disabling\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      item.enabled = !item.enabled;\n      this.editAction.newItem = { ...item };\n      this.addEditAction();\n      \n    },\n    showSnackbar(message, type) {\n      this.snackbar.text = message;\n      this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                          : type === 'error' ? 'red-lighten-3' \n                          : 'blue-lighten-5';\n      this.snackbar.show = true;\n      this.msg.dashboard.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Heading Text Size */\n.text-h5 {\n  font-size: 1.25rem;\n}\n\n/* Actions Column Styling */\n.actions-column {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 60px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 180,
        "wires": [
            [
                "5a1b81688ff1adee",
                "6a9a212b19e8915e"
            ]
        ]
    },
    {
        "id": "5a1b81688ff1adee",
        "type": "link out",
        "z": "f38f1d8bba7489fd",
        "name": "ui_table_out",
        "mode": "link",
        "links": [
            "129b8e3b56023c7b"
        ],
        "x": 1035,
        "y": 180,
        "wires": []
    },
    {
        "id": "30a4076a37414c40",
        "type": "function",
        "z": "f38f1d8bba7489fd",
        "name": "switch",
        "func": "// Function to format strings by replacing underscores with spaces and capitalizing each word\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// Init\nconst tabName = env.get('TABLE');\nmsg.title = capitalize(tabName);\nmsg.topicMain = msg.topicMain || msg.topic;\nmsg.database = msg.database || {\n    name: env.get(\"DATABASE\"),\n    schema: env.get(\"SCHEMA\"),\n    table: tabName\n};\nmsg.data = msg.data || flow.get(tabName) || null;\nmsg.dashboard = msg.dashboard || {};\nmsg.dashboard.info = msg.dashboard.info || flow.get(\"info\");\n\nif (msg.database.table !== tabName) {\n    msg.error = \"Message with wrong table\";\n}\n\n// Topic switch\nconst indexMap = {\n    // Previous Error\n    error:          0,\n\n    // Previous Action (postgres response)\n    check_table:    2,\n    deploy_changes: 2,\n    select_data:    4,\n\n    // Next Action\n    start:          1,\n    update:         2,\n    deploy:         3,\n    update_next:    5,\n    \n};\n\nconst outputs = [null, null, null, null, null, null];\n\nif (msg.error) outputs[0] = msg;\nelse if (indexMap[msg.topic] !== undefined) outputs[indexMap[msg.topic]] = msg;\n\nreturn outputs;\n\n\n",
        "outputs": 6,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 200,
        "wires": [
            [
                "cc73c015c75fda21"
            ],
            [
                "24ef560d2d727b47"
            ],
            [
                "0e81f848a29bfbbb"
            ],
            [
                "a83e3c42dccd2d21"
            ],
            [
                "d591560e71cdaf0a"
            ],
            [
                "05b3911c55d5e2ec"
            ]
        ]
    },
    {
        "id": "cc73c015c75fda21",
        "type": "function",
        "z": "f38f1d8bba7489fd",
        "name": "error_show",
        "func": "msg.dashboard.snackbar = {\n    show: true,\n    text: `${msg.title} - ${msg.topic} error: ${msg.error.message}`,\n    color: \"red-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 100,
        "wires": [
            [
                "8d88ac36455f0209"
            ]
        ]
    },
    {
        "id": "0e81f848a29bfbbb",
        "type": "function",
        "z": "f38f1d8bba7489fd",
        "name": "select_data",
        "func": "msg.query = `\n\n    SELECT column_name \n    FROM information_schema.columns \n    WHERE table_schema = '${msg.database.schema}'\n    AND table_name = '${msg.database.table}';\n\n    SELECT * \n    FROM ${msg.database.schema}.${msg.database.table}\n    ORDER BY id;\n\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"select_data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "24ef560d2d727b47",
        "type": "function",
        "z": "f38f1d8bba7489fd",
        "name": "check_db_table",
        "func": "// Extract schema and table names from the message\nconst schemaName = msg.database.schema;\nconst tableName = msg.database.table;\n\n// Construct the dynamic query for creating the schema and the table\nmsg.query = `\nDO $$\nBEGIN\n   -- Check if schema exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.schemata\n      WHERE schema_name = '${schemaName}'\n   ) THEN\n      CREATE SCHEMA ${schemaName};\n   END IF;\n\n   -- Check if table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${schemaName}' AND table_name = '${tableName}'\n   ) THEN\n      CREATE TABLE ${schemaName}.${tableName} (\n        id SERIAL,\n        name TEXT PRIMARY KEY,\n        vendor TEXT,\n        details TEXT\n      );\n   END IF;\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"check_table\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c8d2f61ccaadd61b",
        "type": "comment",
        "z": "f38f1d8bba7489fd",
        "name": "to database",
        "info": "",
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "f11f3bf2e6a161cc",
        "type": "comment",
        "z": "f38f1d8bba7489fd",
        "name": "to next",
        "info": "",
        "x": 810,
        "y": 300,
        "wires": []
    },
    {
        "id": "a83e3c42dccd2d21",
        "type": "function",
        "z": "f38f1d8bba7489fd",
        "name": "deploy",
        "func": "function escapeValue(value) {\n    if (value === null || value === undefined) {\n        // Handles NULL values\n        return 'NULL';\n    } \n    else if (Array.isArray(value) || typeof value === 'object') {\n        // Convert arrays and objects to JSON, then escape single quotes\n        const jsonString = JSON.stringify(value);\n        return `'${jsonString.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'string') {\n        // Escapes dangerous characters like single quotes ('), \n        // replacing them with double single quotes ('')\n        return `'${value.replace(/'/g, \"''\")}'`;\n    } \n    else if (typeof value === 'boolean') {\n        // PostgreSQL uses 'TRUE'/'FALSE' for boolean values\n        return value ? 'TRUE' : 'FALSE';\n    } \n    else {\n        // For numbers (and other primitive types), return the value directly\n        return value;\n    }\n}\n\n\nlet commands = [];\nconst table = msg.database.table;\nconst schema = msg.database.schema;\n\nfor (const change of msg.dashboard.history) {\n    const { index, oldItem, newItem } = change;\n\n    if (oldItem && !newItem) {\n        // Case: deletion\n        commands.push(`DELETE FROM \"${schema}\".\"${table}\"WHERE name = ${escapeValue(oldItem.name)};`);\n\n    } else if (!oldItem && newItem) {\n        // Case: insertion\n        const keys = Object.keys(newItem);\n        const values = Object.values(newItem)\n            .map(value => `${escapeValue(value)}`) // Escape values\n            .join(', ');\n        commands.push(`INSERT INTO \"${schema}\".\"${table}\" (${keys.join(', ')}) VALUES (${values});`);\n\n    } else if (oldItem && newItem) {\n        // Case: update\n        const updates = Object.keys(newItem)\n            .map(key => `${key} = ${escapeValue(newItem[key])}`) // Escape values\n            .join(', ');\n        commands.push(`UPDATE \"${schema}\".\"${table}\" SET ${updates} WHERE name = ${escapeValue(oldItem.name)};`);\n    }\n}\n\n// Constructs the PL/pgSQL block\nmsg.query = `\nDO $$\nBEGIN\n    ${commands.join('\\n')}\nEND $$;\n`;\n\n// Resets the dashboard history\nmsg.dashboard.history = [];\n\nmsg.target = msg.database.name;\nmsg.topic = 'deploy_changes';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "05b3911c55d5e2ec",
        "type": "function",
        "z": "f38f1d8bba7489fd",
        "name": "clear_update",
        "func": "return {\n    topic: (msg.topicMain === 'start') ? 'start' : 'update',\n    time: new Date(),\n    _msgid: msg._msgid\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "129b8e3b56023c7b",
        "type": "link in",
        "z": "f38f1d8bba7489fd",
        "name": "switch_in",
        "links": [
            "5a1b81688ff1adee"
        ],
        "x": 105,
        "y": 160,
        "wires": [
            [
                "b956b37bba0dce0c"
            ]
        ]
    },
    {
        "id": "a433dbb3c48bf268",
        "type": "debug",
        "z": "f38f1d8bba7489fd",
        "name": "switch_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 280,
        "wires": []
    },
    {
        "id": "82df6e816973aa73",
        "type": "function",
        "z": "f38f1d8bba7489fd",
        "name": "Info",
        "func": "",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst info = \"Machine Types info dialog\"\n\n\n\nflow.set(\"info\", info);",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "cf35598e75a95852",
        "type": "debug",
        "z": "2e8ad62399cfdd46",
        "name": "table_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 140,
        "wires": []
    },
    {
        "id": "60915ab31cd5b286",
        "type": "function",
        "z": "2e8ad62399cfdd46",
        "name": "update_status",
        "func": "// Function to replace underscores with spaces and capitalize words\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\nfunction parseValue(value) {\n    if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n            value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n            try {\n                return JSON.parse(value);\n            } catch (error) {\n                return value;\n            }\n        }\n        // Return original value for non-JSON types\n        return value;\n    }\n    return value;\n  }\n\n// Retrieve existing data or initialize\nlet columns = [];\nlet data = global.get(msg.database.table) || [];\n\n// Extract column names from PostgreSQL query\nif (msg.pgsql && msg.pgsql[0] && msg.pgsql[0].rows) {\n    columns = msg.pgsql[0].rows.map(col => col.column_name);\n}\n\n// Extract data rows from PostgreSQL query and parse them\nif (msg.pgsql && msg.pgsql[1] && msg.pgsql[1].rows) {\n    data = msg.pgsql[1].rows;\n    data.forEach((row, rowIndex) => {\n        Object.keys(row).forEach((key) => {\n            let originalValue = row[key];\n            row[key] = parseValue(originalValue)\n        });\n    });\n}\n\n// Build dynamic table headers\nconst baseHeaders = columns.length > 0\n    ? columns\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exludes some columns\n        .map(key => ({\n            title: capitalize(key),\n            value: key,\n            headerProps: { style: 'font-weight: 700' },\n            sortable: true\n        }))\n    : [];\n\nlet snacktext = \"\";\nif (msg.topicMain === \"deploy\") {\n    snacktext = `${msg.title} Saved Successfully!`;\n} else if (msg.topicMain === \"update\") {\n    snacktext = `${msg.title} Updated Successfully!`;\n} else if (msg.topicMain === \"start\") {\n    snacktext = `${msg.title} Started Successfully!`;\n}\n\n// Assign table data to the message\nmsg.data = data;\n\nmsg.dashboard.table = {\n    title: msg.title,\n    headers: baseHeaders\n};\nmsg.dashboard.form = { \n    type: global.get(\"machine_types\").map(mt => mt.name),\n    site: [\"area_1\",\"area_2\",\"area_3\",\"area_4\",\"area_5\"]\n};\n\nmsg.dashboard.history = msg.dashboard.history || [];\n\nmsg.dashboard.snackbar = {\n    show: true,\n    text: snacktext,\n    color: \"green-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\n// Save data back to the global context\nglobal.set(msg.database.table, data);\n\n// Return updated state\nconst now = new Date().toISOString();\nconst state = {\n    payload: { fill: \"green\", shape: \"dot\", text: `last update: ${now}` },\n    _msgid: msg._msgid\n};\n\nmsg.topic = 'update_status';\nreturn [msg, state];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "fb18fb9dd24d4a7d",
                "c3c2361355d4a0c4"
            ],
            []
        ]
    },
    {
        "id": "399b57bfb2ac7e17",
        "type": "debug",
        "z": "2e8ad62399cfdd46",
        "name": "table_out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 140,
        "wires": []
    },
    {
        "id": "bd899c1ea15c5f76",
        "type": "ui-template",
        "z": "2e8ad62399cfdd46",
        "group": "4290ffc4397af8c8",
        "page": "",
        "ui": "",
        "name": "table_machines",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Container -->\n  <v-card>\n    <!-- Card Header with Title, Reload Button, Search Bar, and Action Buttons -->\n    <v-card-item class=\"bg-blue-darken-3\">\n      <v-row class=\"my-2 align-self-center\" no-gutters>\n        \n        <!-- Title -->\n        <v-col cols=\"auto\" class=\"mx-4 align-self-center\">\n          <v-btn\n            @click=\"openInfoDialog\"\n            variant=\"tonal\"\n            class=\"font-weight-bold text-h5 text-white\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-table</v-icon>\n            <p class=\"mx-1 align-self-center\" v-text=\"msg.dashboard.table.title\"></p>\n          </v-btn>\n        </v-col>\n\n        <!-- Search Bar -->\n        <v-col class=\"mx-4 align-self-center\">\n          <v-text-field\n            v-model=\"search\"\n            label=\"Search\"\n            prepend-inner-icon=\"mdi-magnify\"\n            single-line\n            clearable\n            hide-details\n            color=\"white\"\n          ></v-text-field>\n        </v-col>\n\n        <!-- Action Buttons (CSV Upload, CSV Download, Edit, Save, Add New, Discard) -->\n        <v-col cols=\"auto\" class=\"mx-2 align-self-center text-white\">\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"updateTable\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-reload</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Reload</span>\n          </v-btn>\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"downloadCsv\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-export</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Export</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"enableEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Edit</span>\n          </v-btn>\n\n          <!-- Buttons visible in Edit Mode -->\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deploy\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-floppy</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Save</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"addNewItem\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-plus</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Add New</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"openCsvDialog\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-import</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Import</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"discardEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil-off</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Discard</span>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <!-- Data Table with Custom Cell Templates -->\n    <v-data-table\n      v-model=\"selected\"\n      :headers=\"msg.dashboard.table.headers\"\n      :items=\"msg.data\"\n      :search=\"search\"\n      :items-per-page=\"itemsPerPage\"\n      :items-per-page-options=\"[5, 10, 25, 50, -1]\"\n      class=\"elevation-1\"\n      :loading=\"msg.dashboard.loading\"\n      loading-text=\"Loading...\"\n      density=\"default\"\n    >\n<!-- MODIFY DISPLAY HERE -->   \n\n      <!-- Display Type as Chips -->\n      <template v-slot:item.type=\"{ item }\">\n        <div>\n          <v-chip\n            class=\"ma-1\"\n            :color=\"getListColorStatic(msg.dashboard.form.type, item.type)\"\n            dark\n          >\n            {{ item.type }}\n          </v-chip>\n        </div>\n      </template>\n\n<!-- END MODIFY -->\n      <!-- Actions Column with Edit and Delete Icons -->\n      <template v-slot:item.actions=\"{ item }\">\n        <div class=\"actions-column\">\n          <v-icon\n            v-show=\"editMode\"\n            small\n            class=\"mr-2\"\n            @click=\"editItem(item)\"\n            color=\"blue-darken-2\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-pencil\n          </v-icon>\n\n          <v-icon\n            v-show=\"editMode\"\n            small\n            @click=\"deleteItem(item)\"\n            color=\"blue-darken-4\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-delete\n          </v-icon>\n        </div>\n      </template>\n\n      <!-- No Data Message -->\n      <template v-slot:no-data>\n        <v-row class=\"ma-4\">\n          <v-alert :value=\"true\" color=\"warning\" icon=\"mdi-alert\">\n            No matching records found.\n          </v-alert>\n        </v-row>\n      </template>\n    </v-data-table>\n  </v-card>\n\n  <!-- Dialog for Adding or Editing Items -->\n  <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">{{ formTitle }}</span>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" v-model=\"valid\" fast-fail @submit.prevent>\n<!-- MODIFY FORM HERE -->\n\n          <!-- Form Fields -->\n          <v-text-field\n          v-model=\"editAction.newItem.name\"\n          label=\"Name\"\n          :rules=\"[v => !!v || 'Name is required']\"\n          required\n          ></v-text-field>\n          <v-select\n          v-model=\"editAction.newItem.type\"\n          label=\"Type\"\n          :items=\"msg.dashboard.form.type\"\n          :rules=\"[v => !!v || 'Type is required']\"\n          required\n          clearable\n          ></v-select>\n          <v-select\n          v-model=\"editAction.newItem.site\"\n          label=\"Site\"\n          :items=\"msg.dashboard.form.site\"\n          :rules=\"[v => !!v || 'Site is required']\"\n          required\n          clearable\n          ></v-select>\n          <v-text-field\n          v-model=\"editAction.newItem.service_date\"\n          label=\"Service Date\"\n          clearable\n          ></v-text-field>\n          <v-textarea\n          v-model=\"editAction.newItem.details\"\n          label=\"Details\"\n          maxlength=\"200\"\n          counter\n          ></v-text-field>\n\n<!-- END MODIFY-->\n        </v-form>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"saveItem\">Save</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Select a CSV file\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete Confirmation Dialog -->\n  <v-dialog v-model=\"deleteDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting this element will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue\" text @click=\"cancelDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"red\" text @click=\"confirmDeletion\">\n          Delete\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Info Dialog -->\n  <v-dialog v-model=\"infoDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Info\n      </v-card-title>\n\n      <v-card-text>\n        <p v-text=\"msg.dashboard.info\"></p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Close Button -->\n        <v-btn color=\"blue\" text @click=\"closeInfoDialog\">\n          OK\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      search: '',\n      page: 1,\n      itemsPerPage: 5,\n      headerNames: [],\n      dialog: false,\n      deleteDialog: false,\n      csvDialog: false,\n      infoDialog: false,\n      csvFile: null,    \n      formTitle: \"\",\n      editMode: false,\n      editAction: {\n        index: -1,\n        oldItem: null,\n        newItem: null,\n      },\n      selected: [],\n      actionsHeader: {\n        title: \"Actions\",\n        value: \"actions\",\n        headerProps: { style: 'font-weight: 700' },\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n    };\n  },\n  computed: {\n    pageCount() {\n      return Math.ceil(this.msg.data.length / this.itemsPerPage);\n    },\n  },\n  watch: {\n    msg: {\n      handler() {\n        if (this.msg?.dashboard?.table?.headers) {\n          this.headerNames = this.msg.dashboard.table.headers.map(header => header.value);\n        };\n        if (\n          this.editMode &&\n          this.msg?.dashboard?.table?.headers?.[this.msg.dashboard.table.headers.length - 1]?.value !== 'actions'\n        ) {\n          this.msg.dashboard.table.headers.push(this.actionsHeader);\n        };\n        // Dynamically update snackbar parameters\n        if (this.msg?.dashboard?.snackbar) {\n          const { show, text, color } = this.msg.dashboard.snackbar;\n          this.snackbar.show = show;\n          this.snackbar.text = text || '';\n          this.snackbar.color = color || 'default';\n        }\n      },\n      deep: true \n    }\n  },\n  methods: {\n    // Sends a message with the current state\n    msgSend() {\n      this.msg.dashboard.snackbar = null;\n      this.send({\n        topic: this.msg.topic,\n        topicMain: this.msg.topicMain,\n        title: this.msg.title,\n        database: this.msg.database,\n        data: this.msg.data,\n        dashboard: this.msg.dashboard,\n        payload: this.msg.payload,\n        time: new Date(),\n      });\n    },\n    \n    // Edit mode controls\n    enableEdit() {\n      this.msg.dashboard.snackbar.show = false;\n      this.msg.dashboard.table.headers.push(this.actionsHeader);\n      this.editMode = true;\n    },\n    disableEdit() {\n      this.msg.dashboard.table.headers = this.msg.dashboard.table.headers.filter(\n        header => header !== this.actionsHeader\n      );\n      this.editMode = false;\n    },\n    \n    // Message Outputs: Update, Deploy and discard edits \n    updateTable() {\n      this.msg.topic = \"update\";\n      this.msg.topicMain = \"update\";\n      this.msg.payload = null;\n      this.msgSend();\n    },\n    deploy() {\n      this.msg.dashboard.loading = true;\n      this.disableEdit();\n      this.msg.topic = \"deploy\";\n      this.msg.topicMain = \"deploy\";\n      this.msgSend();\n      // this.showSnackbar('Deploy action triggered!', 'info');\n    },\n    discardEdit() {\n      this.disableEdit();\n      this.updateTable();\n    },\n    \n    // Handling items\n    getDefaultItem() {\n      const defaultItem = {};\n      this.msg.dashboard.table.headers.forEach(header => {\n        if (header.value !== 'actions') {\n          defaultItem[header.value] = header.value === 'enabled' ? true :\n                                       header.value === 'status' ? \"unknown\" : null;\n        }\n      });\n      return defaultItem;\n    },\n    filterItem(item) {\n      if (!item) {\n        return null;\n      }\n      return Object.keys(item)\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exclude keys\n        .filter(key => this.headerNames.includes(key)) // Exclude keys\n        .reduce((obj, key) => {\n          obj[key] = item[key];\n          return obj;\n        }, {});\n    },\n    filterHeaders(headers) {\n      return headers.filter(header => !['actions', 'status', 'id'].includes(header.value)) // Exludes some columns\n    },\n    addEditAction(){\n      let action = JSON.parse(JSON.stringify(this.editAction));\n      action.oldItem = this.filterItem(action.oldItem);\n      action.newItem = this.filterItem(action.newItem);\n      this.msg.dashboard.history.push(action);\n    },\n    addNewItem() {\n      this.editAction.index = -1;\n      this.editAction.oldItem = null;\n      this.editAction.newItem = this.getDefaultItem();\n      this.formTitle = 'Add Item';\n      this.dialog = true;\n    },\n    editItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = { ...item };\n      this.formTitle = 'Edit Item';\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = null;\n      this.deleteDialog = true;\n    },\n\n    // Delete Dialog controls\n    cancelDeletion() {\n      this.deleteDialog = false;\n    },\n    confirmDeletion() {\n      this.deleteDialog = false;\n      if (this.editAction.index > -1) {\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n        // this.showSnackbar('Item deleted successfully!', 'success');\n      }\n    },\n\n    // Form Dialog controls\n    closeDialog() {\n      this.dialog = false;\n      this.$refs.form.reset();\n    },\n    async saveItem() {\n      const { valid } = await this.$refs.form.validate();\n      if (valid) {\n        if (this.editAction.index > -1) {\n          Object.assign(this.msg.data[this.editAction.index], this.editAction.newItem);\n          // this.showSnackbar('Item updated successfully!', 'success');\n        } else {\n          this.msg.data.push({ ...this.editAction.newItem });\n          // this.showSnackbar('Item added successfully!', 'success');\n        }\n        this.addEditAction();\n        this.closeDialog();\n      } else {\n        this.showSnackbar('Please correct the errors in the form.', 'error');\n      }\n    },\n\n    // Info Dialog controls\n    openInfoDialog() {\n      this.infoDialog = true;\n    },\n    closeInfoDialog() {\n      this.infoDialog = false;\n    },\n\n    // CSV Dialog controls\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Data Handling\n    // Stringify function that handles different data types\n    stringifyValue(value) {\n      if (value === undefined || value === null) {\n        return ''; // Handle null or undefined\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value); // Handle arrays by converting them to a JSON string\n      } else if (typeof value === 'object') {\n        return JSON.stringify(value); // Handle objects by converting them to a JSON string\n      } else if (typeof value === 'string') {\n        return value; // Use string as-is\n      } else {\n        return String(value); // Convert other types (number, boolean, etc.) to string\n      }\n    },\n    parseValue(value) {\n      if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n          value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n          try {\n            return JSON.parse(value);\n          } catch (error) {\n            return value;\n          }\n        }\n        // Return original value for non-JSON types\n        return value;\n      }\n      return value;\n    },\n\n    // CSV Upload and Loading\n    async processCsv() {  // Processes the uploaded CSV file\n      if (!this.csvFile) {\n        this.showSnackbar('No file selected!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV successfully uploaded!', 'success');\n      } catch (error) {\n        this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n    parseCsv(content) {  // Parses the CSV file content into an array of objects\n      const rows = content.split(/\\r?\\n/).filter(row => row.trim()); \n      const headers = rows.shift().split(';'); // Use the first row as headers\n      return rows.map(row => {\n        const values = row.split(';'); \n        return headers.reduce((acc, header, index) => {\n          acc[header] = this.parseValue(values[index]); // Map headers to corresponding values\n          return acc;\n        }, {});\n      });\n    },\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {  // Check if an item with the same name exists\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n            this.editAction.oldItem = {...existingItem};\n            this.editAction.newItem = {...newItem};\n            this.addEditAction()\n            Object.assign(existingItem, newItem); // Update \n          }\n        } else {\n          this.editAction.oldItem = null;\n          this.editAction.newItem = {...newItem};\n          this.addEditAction()\n          this.msg.data.push(newItem);  // Add new \n        }\n      });\n    },\n    \n    // CSV Generation and Download\n    generateCsv() {\n      const separator = ';';\n      const headers = this.filterHeaders(this.msg.dashboard.table.headers)\n        .map(header => header.value)\n        .join(separator); \n\n      const rows = this.msg.data.map(item => {\n        return this.filterHeaders(this.msg.dashboard.table.headers)\n          .map(header => {\n            return this.stringifyValue(item[header.value]);\n          })\n          .join(separator);\n      }).join('\\n');\n\n\n      return `${headers}\\n${rows}`;\n    },\n    createDownloadLink(csvContent) {\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${this.msg.database.table}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    downloadCsv() {\n      try {\n        const csvContent = this.generateCsv();\n        this.createDownloadLink(csvContent);\n        this.showSnackbar('CSV scaricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante il download del CSV:', error);\n        this.showSnackbar('Errore durante il download del CSV.', 'error');\n      }\n    },\n    \n    // Utility Methods\n    getStatusColor(value) {\n      const colors = {\n        \"unknown\": 'blue',\n        \"connecting\": 'amber',\n        \"connected\": 'green',\n        \"error\": 'red'\n      };\n      if (colors[value]) return colors[value];\n      return 'purple';\n    },\n    getSwitchColor(item) {\n      return item.enabled ? this.getStatusColor(item.status)\n                            : 'grey-lighten-2';\n    },\n    getListColor(list, elem, item) {\n      return item.enabled ? list.includes(elem) ? this.getStatusColor(item.status) : 'red'\n                            : 'grey-lighten-2';\n    },\n    getListColorStatic(list, elem) {\n      return list.includes(elem) ? 'green' : 'red';\n    },\n    handleEnabled(item) {\n      // Custom logic for enabling/disabling\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      item.enabled = !item.enabled;\n      this.editAction.newItem = { ...item };\n      this.addEditAction();\n      \n    },\n    showSnackbar(message, type) {\n      this.snackbar.text = message;\n      this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                          : type === 'error' ? 'red-lighten-3' \n                          : 'blue-lighten-5';\n      this.snackbar.show = true;\n      this.msg.dashboard.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Heading Text Size */\n.text-h5 {\n  font-size: 1.25rem;\n}\n\n/* Actions Column Styling */\n.actions-column {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 60px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 180,
        "wires": [
            [
                "8ca7c7ef4d564fff",
                "399b57bfb2ac7e17"
            ]
        ]
    },
    {
        "id": "8ca7c7ef4d564fff",
        "type": "link out",
        "z": "2e8ad62399cfdd46",
        "name": "ui_table_out",
        "mode": "link",
        "links": [
            "a6199f3290ba828e"
        ],
        "x": 1035,
        "y": 180,
        "wires": []
    },
    {
        "id": "33c484973ec32be3",
        "type": "function",
        "z": "2e8ad62399cfdd46",
        "name": "switch",
        "func": "// Function to format strings by replacing underscores with spaces and capitalizing each word\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// Init\nconst tabName = env.get('TABLE');\nmsg.title = capitalize(tabName);\nmsg.topicMain = msg.topicMain || msg.topic;\nmsg.database = msg.database || {\n    name: env.get(\"DATABASE\"),\n    schema: env.get(\"SCHEMA\"),\n    table: tabName\n};\nmsg.data = msg.data || flow.get(tabName) || null;\nmsg.dashboard = msg.dashboard || {};\nmsg.dashboard.info = msg.dashboard.info || flow.get(\"info\");\n\nif (msg.database.table !== tabName) {\n    msg.error = \"Message with wrong table\";\n}\n\n// Topic switch\nconst indexMap = {\n    // Previous Error\n    error:          0,\n\n    // Previous Action (postgres response)\n    check_table:    2,\n    deploy_changes: 2,\n    select_data:    4,\n\n    // Next Action\n    start:          1,\n    update:         2,\n    deploy:         3,\n    update_next:    5,\n    \n};\n\nconst outputs = [null, null, null, null, null, null];\n\nif (msg.error) outputs[0] = msg;\nelse if (indexMap[msg.topic] !== undefined) outputs[indexMap[msg.topic]] = msg;\n\nreturn outputs;\n\n\n",
        "outputs": 6,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 200,
        "wires": [
            [
                "bbea1895426875ab"
            ],
            [
                "b755f1359e2cca04"
            ],
            [
                "19f3487286b11943"
            ],
            [
                "90d29f1b9188b78b"
            ],
            [
                "60915ab31cd5b286"
            ],
            [
                "c3c2361355d4a0c4"
            ]
        ]
    },
    {
        "id": "bbea1895426875ab",
        "type": "function",
        "z": "2e8ad62399cfdd46",
        "name": "error_show",
        "func": "msg.dashboard.snackbar = {\n    show: true,\n    text: `${msg.title} - ${msg.topic} error: ${msg.error.message}`,\n    color: \"red-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 100,
        "wires": [
            [
                "fb18fb9dd24d4a7d"
            ]
        ]
    },
    {
        "id": "19f3487286b11943",
        "type": "function",
        "z": "2e8ad62399cfdd46",
        "name": "select_data",
        "func": "msg.query = `\n\n    SELECT column_name \n    FROM information_schema.columns \n    WHERE table_schema = '${msg.database.schema}'\n    AND table_name = '${msg.database.table}';\n\n    SELECT * \n    FROM ${msg.database.schema}.${msg.database.table}\n    ORDER BY id;\n\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"select_data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "b755f1359e2cca04",
        "type": "function",
        "z": "2e8ad62399cfdd46",
        "name": "check_db_table",
        "func": "// Extract schema and table names from the message\nconst schemaName = msg.database.schema;\nconst tableName = msg.database.table;\n\n// Construct the dynamic query for creating the schema and the table\nmsg.query = `\nDO $$\nBEGIN\n   -- Check if schema exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.schemata\n      WHERE schema_name = '${schemaName}'\n   ) THEN\n      CREATE SCHEMA ${schemaName};\n   END IF;\n\n   -- Check if table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${schemaName}' AND table_name = '${tableName}'\n   ) THEN\n      CREATE TABLE ${schemaName}.${tableName} (\n        id SERIAL,\n        name TEXT PRIMARY KEY,\n        type TEXT,\n        site TEXT,\n        service_date TEXT,\n        details TEXT\n      );\n   END IF;\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"check_table\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "45d27482e53330dd",
        "type": "comment",
        "z": "2e8ad62399cfdd46",
        "name": "to database",
        "info": "",
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "6a265e73cb12a885",
        "type": "comment",
        "z": "2e8ad62399cfdd46",
        "name": "to next",
        "info": "",
        "x": 810,
        "y": 300,
        "wires": []
    },
    {
        "id": "90d29f1b9188b78b",
        "type": "function",
        "z": "2e8ad62399cfdd46",
        "name": "deploy",
        "func": "function escapeValue(value) {\n    if (value === null || value === undefined) {\n        // Handles NULL values\n        return 'NULL';\n    } \n    else if (Array.isArray(value) || typeof value === 'object') {\n        // Convert arrays and objects to JSON, then escape single quotes\n        const jsonString = JSON.stringify(value);\n        return `'${jsonString.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'string') {\n        // Escapes dangerous characters like single quotes ('), \n        // replacing them with double single quotes ('')\n        return `'${value.replace(/'/g, \"''\")}'`;\n    } \n    else if (typeof value === 'boolean') {\n        // PostgreSQL uses 'TRUE'/'FALSE' for boolean values\n        return value ? 'TRUE' : 'FALSE';\n    } \n    else {\n        // For numbers (and other primitive types), return the value directly\n        return value;\n    }\n}\n\n\nlet commands = [];\nconst table = msg.database.table;\nconst schema = msg.database.schema;\n\nfor (const change of msg.dashboard.history) {\n    const { index, oldItem, newItem } = change;\n\n    if (oldItem && !newItem) {\n        // Case: deletion\n        commands.push(`DELETE FROM \"${schema}\".\"${table}\"WHERE name = ${escapeValue(oldItem.name)};`);\n\n    } else if (!oldItem && newItem) {\n        // Case: insertion\n        const keys = Object.keys(newItem);\n        const values = Object.values(newItem)\n            .map(value => `${escapeValue(value)}`) // Escape values\n            .join(', ');\n        commands.push(`INSERT INTO \"${schema}\".\"${table}\" (${keys.join(', ')}) VALUES (${values});`);\n\n    } else if (oldItem && newItem) {\n        // Case: update\n        const updates = Object.keys(newItem)\n            .map(key => `${key} = ${escapeValue(newItem[key])}`) // Escape values\n            .join(', ');\n        commands.push(`UPDATE \"${schema}\".\"${table}\" SET ${updates} WHERE name = ${escapeValue(oldItem.name)};`);\n    }\n}\n\n// Constructs the PL/pgSQL block\nmsg.query = `\nDO $$\nBEGIN\n    ${commands.join('\\n')}\nEND $$;\n`;\n\n// Resets the dashboard history\nmsg.dashboard.history = [];\n\nmsg.target = msg.database.name;\nmsg.topic = 'deploy_changes';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c3c2361355d4a0c4",
        "type": "function",
        "z": "2e8ad62399cfdd46",
        "name": "clear_update",
        "func": "return {\n    topic: (msg.topicMain === 'start') ? 'start' : 'update',\n    time: new Date(),\n    _msgid: msg._msgid\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "a6199f3290ba828e",
        "type": "link in",
        "z": "2e8ad62399cfdd46",
        "name": "switch_in",
        "links": [
            "8ca7c7ef4d564fff"
        ],
        "x": 105,
        "y": 160,
        "wires": [
            [
                "aa1095426398d4a2"
            ]
        ]
    },
    {
        "id": "06218415e5cd1cd9",
        "type": "debug",
        "z": "2e8ad62399cfdd46",
        "name": "switch_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 280,
        "wires": []
    },
    {
        "id": "5e5f93bb9587176f",
        "type": "function",
        "z": "2e8ad62399cfdd46",
        "name": "Info",
        "func": "",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst info = \"Machines info dialog\"\n\n\n\nflow.set(\"info\", info);",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": []
    },
    {
        "id": "aa6eef9ee243c8f9",
        "type": "debug",
        "z": "32a3aaecd6ba621c",
        "name": "table_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 220,
        "wires": []
    },
    {
        "id": "a9c8a0dbacef693b",
        "type": "function",
        "z": "32a3aaecd6ba621c",
        "name": "update_status",
        "func": "// Function to replace underscores with spaces and capitalize words\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\nfunction parseValue(value) {\n    if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n            value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n            try {\n                return JSON.parse(value);\n            } catch (error) {\n                return value;\n            }\n        }\n        // Return original value for non-JSON types\n        return value;\n    }\n    return value;\n  }\n\n// Retrieve existing data or initialize\nlet columns = [];\nlet data = global.get(msg.database.table) || [];\n\n// Extract column names from PostgreSQL query\nif (msg.pgsql && msg.pgsql[0] && msg.pgsql[0].rows) {\n    columns = msg.pgsql[0].rows.map(col => col.column_name);\n}\n\n// Extract data rows from PostgreSQL query and parse them\nif (msg.pgsql && msg.pgsql[1] && msg.pgsql[1].rows) {\n    data = msg.pgsql[1].rows;\n    data.forEach((row, rowIndex) => {\n        Object.keys(row).forEach((key) => {\n            let originalValue = row[key];\n            row[key] = parseValue(originalValue)\n        });\n    });\n}\n\n// Build dynamic table headers\nconst baseHeaders = columns.length > 0\n    ? columns\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exludes some columns\n        .map(key => ({\n            title: capitalize(key),\n            value: key,\n            headerProps: { style: 'font-weight: 700' },\n            sortable: true\n        }))\n    : [];\n\n\n// Define possible states for endpoints\nconst states = [\"unknown\", \"connected\", \"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connecting\", \"error\"];\nconst lengthItems = states.length;\n\n// Assign random states to endpoints if not already set\nfor (let i = 0; i < data.length; i++) {  \n    let randomIndex = Math.floor(Math.random() * lengthItems);\n    if (!data[i].status) {\n        data[i].status = states[randomIndex];\n    }\n    if (typeof data[i].enabled === 'string') {\n        let enabledLower = data[i].enabled.toLowerCase();\n        data[i].enabled = (enabledLower === 'true');\n    }\n    if (data[i].enabled === null) {\n        data[i].enabled = true;\n    }\n}\n\nlet snacktext = \"\";\nif (msg.topicMain === \"deploy\") {\n    snacktext = `${msg.title} Saved Successfully!`;\n} else if (msg.topicMain === \"update\") {\n    snacktext = `${msg.title} Updated Successfully!`;\n} else if (msg.topicMain === \"start\") {\n    snacktext = `${msg.title} Started Successfully!`;\n}\n\n// Assign table data to the message\nmsg.data = data;\n\nmsg.dashboard.table = {\n    title: msg.title,\n    headers: baseHeaders\n};\nmsg.dashboard.form = { \n    machine: global.get(\"machines\").map(mch => mch.name),\n    protocol: global.get(\"protocol\"),\n    tag_tables: global.get(\"tag_tables\").map(tbl => tbl.name),\n};\n\nmsg.dashboard.history = msg.dashboard.history || [];\n\nmsg.dashboard.snackbar = {\n    show: true,\n    text: snacktext,\n    color: \"green-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\n// Save data back to the global context\nglobal.set(msg.database.table, data);\n\n// Return updated state\nconst now = new Date().toISOString();\nconst state = {\n    payload: { fill: \"green\", shape: \"dot\", text: `last update: ${now}` },\n    _msgid: msg._msgid\n};\n\nmsg.topic = 'update_status';\nreturn [msg, state];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 340,
        "wires": [
            [
                "931179e7bf82fd62",
                "0d7719f2adc3d79d"
            ],
            []
        ]
    },
    {
        "id": "65d24a5dd144aacb",
        "type": "debug",
        "z": "32a3aaecd6ba621c",
        "name": "table_out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 220,
        "wires": []
    },
    {
        "id": "6ce1145fad4c371b",
        "type": "ui-template",
        "z": "32a3aaecd6ba621c",
        "group": "4290ffc4397af8c8",
        "page": "",
        "ui": "",
        "name": "table_endpoints",
        "order": 5,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Container -->\n  <v-card>\n    <!-- Card Header with Title, Reload Button, Search Bar, and Action Buttons -->\n    <v-card-item class=\"bg-blue-darken-3\">\n      <v-row class=\"my-2 align-self-center\" no-gutters>\n        \n        <!-- Title -->\n        <v-col cols=\"auto\" class=\"mx-4 align-self-center\">\n          <v-btn\n            @click=\"openInfoDialog\"\n            variant=\"tonal\"\n            class=\"font-weight-bold text-h5 text-white\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-table</v-icon>\n            <p class=\"mx-1 align-self-center\" v-text=\"msg.dashboard.table.title\"></p>\n          </v-btn>\n        </v-col>\n\n        <!-- Search Bar -->\n        <v-col class=\"mx-4 align-self-center\">\n          <v-text-field\n            v-model=\"search\"\n            label=\"Search\"\n            prepend-inner-icon=\"mdi-magnify\"\n            single-line\n            clearable\n            hide-details\n            color=\"white\"\n          ></v-text-field>\n        </v-col>\n\n        <!-- Action Buttons (CSV Upload, CSV Download, Edit, Save, Add New, Discard) -->\n        <v-col cols=\"auto\" class=\"mx-2 align-self-center text-white\">\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"updateTable\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-reload</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Reload</span>\n          </v-btn>\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"downloadCsv\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-export</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Export</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"enableEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Edit</span>\n          </v-btn>\n\n          <!-- Buttons visible in Edit Mode -->\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deploy\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-floppy</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Save</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"addNewItem\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-plus</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Add New</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"openCsvDialog\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-import</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Import</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"discardEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil-off</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Discard</span>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <!-- Data Table with Custom Cell Templates -->\n    <v-data-table\n      v-model=\"selected\"\n      :headers=\"msg.dashboard.table.headers\"\n      :items=\"msg.data\"\n      :search=\"search\"\n      :items-per-page=\"itemsPerPage\"\n      :items-per-page-options=\"[5, 10, 25, 50, -1]\"\n      class=\"elevation-1\"\n      :loading=\"msg.dashboard.loading\"\n      loading-text=\"Loading...\"\n      density=\"default\"\n    >\n<!-- MODIFY DISPLAY HERE -->\n\n      <!-- Toggle Switch for 'enabled' Field -->\n      <template v-slot:item.enabled=\"{ item }\">\n        <v-switch\n          v-model=\"item.enabled\"\n          :model-value=\"item.enabled\"\n          :color=\"getSwitchColor(item)\"\n          :base-color=\"getSwitchColor(item)\"\n          :disabled=\"!editMode\"\n          hide-details\n          @click=\"handleEnabled(item)\"\n        ></v-switch>\n      </template>      \n\n      <!-- Display Machines as Chips -->\n      <template v-slot:item.machine=\"{ item }\">\n        <div>\n          <v-chip\n            class=\"ma-1\"\n            :color=\"getListColor(msg.dashboard.form.machine, item.machine, item)\"\n            dark\n          >\n            {{ item.machine }}\n          </v-chip>\n        </div>\n      </template>\n\n      <!-- Display Tags as Chips -->\n      <template v-slot:item.tag_tables=\"{ item }\">\n        <div>\n          <v-chip\n            v-for=\"(tag, index) in item.tag_tables\"\n            :key=\"index\"\n            class=\"ma-1\"\n            :color=\"getListColor(msg.dashboard.form.tag_tables, tag, item)\"\n            dark\n          >\n            {{ tag }}\n          </v-chip>\n        </div>\n      </template>\n\n<!-- END MODIFY -->\n      <!-- Actions Column with Edit and Delete Icons -->\n      <template v-slot:item.actions=\"{ item }\">\n        <div class=\"actions-column\">\n          <v-icon\n            v-show=\"editMode\"\n            small\n            class=\"mr-2\"\n            @click=\"editItem(item)\"\n            color=\"blue-darken-2\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-pencil\n          </v-icon>\n\n          <v-icon\n            v-show=\"editMode\"\n            small\n            @click=\"deleteItem(item)\"\n            color=\"blue-darken-4\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-delete\n          </v-icon>\n        </div>\n      </template>\n\n      <!-- No Data Message -->\n      <template v-slot:no-data>\n        <v-row class=\"ma-4\">\n          <v-alert :value=\"true\" color=\"warning\" icon=\"mdi-alert\">\n            No matching records found.\n          </v-alert>\n        </v-row>\n      </template>\n    </v-data-table>\n  </v-card>\n\n  <!-- Dialog for Adding or Editing Items -->\n  <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">{{ formTitle }}</span>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" v-model=\"valid\" fast-fail @submit.prevent>\n<!-- MODIFY FORM HERE -->\n\n          <!-- Form Fields -->\n          <v-text-field\n            v-model=\"editAction.newItem.name\"\n            label=\"Name\"\n            :rules=\"[v => !!v || 'Name is required']\"\n            required\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.machine\"\n            label=\"Machine\"\n            :items=\"msg.dashboard.form.machine\"\n            :rules=\"[v => !!v || 'Machine is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-select\n            v-model=\"editAction.newItem.protocol\"\n            label=\"Protocol\"\n            :items=\"msg.dashboard.form.protocol\"\n            :rules=\"[v => !!v || 'Protocol is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-text-field\n            v-model=\"editAction.newItem.address\"\n            label=\"Address\"\n            :rules=\"[v => !!v || 'Address is required']\"\n            required\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.tag_tables\"\n            label=\"Tag Tables\"\n            :items=\"msg.dashboard.form.tag_tables\"\n            multiple\n            chips\n            clearable\n          ></v-select>\n          <v-textarea\n            v-model=\"editAction.newItem.comment\"\n            label=\"Comment\"\n            maxlength=\"200\"\n            counter\n          ></v-text-field>\n\n<!-- END MODIFY-->\n        </v-form>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"saveItem\">Save</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Select a CSV file\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete Confirmation Dialog -->\n  <v-dialog v-model=\"deleteDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting this element will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue\" text @click=\"cancelDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"red\" text @click=\"confirmDeletion\">\n          Delete\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Info Dialog -->\n  <v-dialog v-model=\"infoDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Info\n      </v-card-title>\n\n      <v-card-text>\n        <p v-text=\"msg.dashboard.info\"></p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Close Button -->\n        <v-btn color=\"blue\" text @click=\"closeInfoDialog\">\n          OK\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      search: '',\n      page: 1,\n      itemsPerPage: 5,\n      headerNames: [],\n      dialog: false,\n      deleteDialog: false,\n      csvDialog: false,\n      infoDialog: false,\n      csvFile: null,    \n      formTitle: \"\",\n      editMode: false,\n      editAction: {\n        index: -1,\n        oldItem: null,\n        newItem: null,\n      },\n      selected: [],\n      actionsHeader: {\n        title: \"Actions\",\n        value: \"actions\",\n        headerProps: { style: 'font-weight: 700' },\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n    };\n  },\n  computed: {\n    pageCount() {\n      return Math.ceil(this.msg.data.length / this.itemsPerPage);\n    },\n  },\n  watch: {\n    msg: {\n      handler() {\n        if (this.msg?.dashboard?.table?.headers) {\n          this.headerNames = this.msg.dashboard.table.headers.map(header => header.value);\n        };\n        if (\n          this.editMode &&\n          this.msg?.dashboard?.table?.headers?.[this.msg.dashboard.table.headers.length - 1]?.value !== 'actions'\n        ) {\n          this.msg.dashboard.table.headers.push(this.actionsHeader);\n        };\n        // Dynamically update snackbar parameters\n        if (this.msg?.dashboard?.snackbar) {\n          const { show, text, color } = this.msg.dashboard.snackbar;\n          this.snackbar.show = show;\n          this.snackbar.text = text || '';\n          this.snackbar.color = color || 'default';\n        }\n      },\n      deep: true \n    }\n  },\n  methods: {\n    // Sends a message with the current state\n    msgSend() {\n      this.msg.dashboard.snackbar = null;\n      this.send({\n        topic: this.msg.topic,\n        topicMain: this.msg.topicMain,\n        title: this.msg.title,\n        database: this.msg.database,\n        data: this.msg.data,\n        dashboard: this.msg.dashboard,\n        payload: this.msg.payload,\n        time: new Date(),\n      });\n    },\n    \n    // Edit mode controls\n    enableEdit() {\n      this.msg.dashboard.snackbar.show = false;\n      this.msg.dashboard.table.headers.push(this.actionsHeader);\n      this.editMode = true;\n    },\n    disableEdit() {\n      this.msg.dashboard.table.headers = this.msg.dashboard.table.headers.filter(\n        header => header !== this.actionsHeader\n      );\n      this.editMode = false;\n    },\n    \n    // Message Outputs: Update, Deploy and discard edits \n    updateTable() {\n      this.msg.topic = \"update\";\n      this.msg.topicMain = \"update\";\n      this.msg.payload = null;\n      this.msgSend();\n    },\n    deploy() {\n      this.msg.dashboard.loading = true;\n      this.disableEdit();\n      this.msg.topic = \"deploy\";\n      this.msg.topicMain = \"deploy\";\n      this.msgSend();\n      // this.showSnackbar('Deploy action triggered!', 'info');\n    },\n    discardEdit() {\n      this.disableEdit();\n      this.updateTable();\n    },\n    \n    // Handling items\n    getDefaultItem() {\n      const defaultItem = {};\n      this.msg.dashboard.table.headers.forEach(header => {\n        if (header.value !== 'actions') {\n          defaultItem[header.value] = header.value === 'enabled' ? true :\n                                        header.value === 'status' ? \"unknown\" : null;\n        }\n      });\n      return defaultItem;\n    },\n    filterItem(item) {\n      if (!item) {\n        return null;\n      }\n      return Object.keys(item)\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exclude keys\n        .filter(key => this.headerNames.includes(key)) // Exclude keys\n        .reduce((obj, key) => {\n          obj[key] = item[key];\n          return obj;\n        }, {});\n    },\n    filterHeaders(headers) {\n      return headers.filter(header => !['actions', 'status', 'id'].includes(header.value)) // Exludes some columns\n    },\n    addEditAction(){\n      let action = JSON.parse(JSON.stringify(this.editAction));\n      action.oldItem = this.filterItem(action.oldItem);\n      action.newItem = this.filterItem(action.newItem);\n      this.msg.dashboard.history.push(action);\n    },\n    addNewItem() {\n      this.editAction.index = -1;\n      this.editAction.oldItem = null;\n      this.editAction.newItem = this.getDefaultItem();\n      this.formTitle = 'Add Item';\n      this.dialog = true;\n    },\n    editItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = { ...item };\n      this.formTitle = 'Edit Item';\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = null;\n      this.deleteDialog = true;\n    },\n\n    // Delete Dialog controls\n    cancelDeletion() {\n      this.deleteDialog = false;\n    },\n    confirmDeletion() {\n      this.deleteDialog = false;\n      if (this.editAction.index > -1) {\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n        // this.showSnackbar('Item deleted successfully!', 'success');\n      }\n    },\n\n    // Form Dialog controls\n    closeDialog() {\n      this.dialog = false;\n      this.$refs.form.reset();\n    },\n    async saveItem() {\n      const { valid } = await this.$refs.form.validate();\n      if (valid) {\n        if (this.editAction.index > -1) {\n          Object.assign(this.msg.data[this.editAction.index], this.editAction.newItem);\n          // this.showSnackbar('Item updated successfully!', 'success');\n        } else {\n          this.msg.data.push({ ...this.editAction.newItem });\n          // this.showSnackbar('Item added successfully!', 'success');\n        }\n        this.addEditAction();\n        this.closeDialog();\n      } else {\n        this.showSnackbar('Please correct the errors in the form.', 'error');\n      }\n    },\n\n    // Info Dialog controls\n    openInfoDialog() {\n      this.infoDialog = true;\n    },\n    closeInfoDialog() {\n      this.infoDialog = false;\n    },\n\n    // CSV Dialog controls\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Data Handling\n    // Stringify function that handles different data types\n    stringifyValue(value) {\n      if (value === undefined || value === null) {\n        return ''; // Handle null or undefined\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value); // Handle arrays by converting them to a JSON string\n      } else if (typeof value === 'object') {\n        return JSON.stringify(value); // Handle objects by converting them to a JSON string\n      } else if (typeof value === 'string') {\n        return value; // Use string as-is\n      } else {\n        return String(value); // Convert other types (number, boolean, etc.) to string\n      }\n    },\n    parseValue(value) {\n      if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n          value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n          try {\n            return JSON.parse(value);\n          } catch (error) {\n            return value;\n          }\n        }\n        // Return original value for non-JSON types\n        return value;\n      }\n      return value;\n    },\n\n    // CSV Upload and Loading\n    async processCsv() {  // Processes the uploaded CSV file\n      if (!this.csvFile) {\n        this.showSnackbar('No file selected!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV successfully uploaded!', 'success');\n      } catch (error) {\n        this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n    parseCsv(content) {  // Parses the CSV file content into an array of objects\n      const rows = content.split(/\\r?\\n/).filter(row => row.trim()); \n      const headers = rows.shift().split(';'); // Use the first row as headers\n      return rows.map(row => {\n        const values = row.split(';'); \n        return headers.reduce((acc, header, index) => {\n          acc[header] = this.parseValue(values[index]); // Map headers to corresponding values\n          return acc;\n        }, {});\n      });\n    },\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {  // Check if an item with the same name exists\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n            this.editAction.oldItem = {...existingItem};\n            this.editAction.newItem = {...newItem};\n            this.addEditAction()\n            Object.assign(existingItem, newItem); // Update \n          }\n        } else {\n          this.editAction.oldItem = null;\n          this.editAction.newItem = {...newItem};\n          this.addEditAction()\n          this.msg.data.push(newItem);  // Add new \n        }\n      });\n    },\n    \n    // CSV Generation and Download\n    generateCsv() {\n      const separator = ';';\n      const headers = this.filterHeaders(this.msg.dashboard.table.headers)\n        .map(header => header.value)\n        .join(separator); \n\n      const rows = this.msg.data.map(item => {\n        return this.filterHeaders(this.msg.dashboard.table.headers)\n          .map(header => {\n            return this.stringifyValue(item[header.value]);\n          })\n          .join(separator);\n      }).join('\\n');\n\n\n      return `${headers}\\n${rows}`;\n    },\n    createDownloadLink(csvContent) {\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${this.msg.database.table}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    downloadCsv() {\n      try {\n        const csvContent = this.generateCsv();\n        this.createDownloadLink(csvContent);\n        this.showSnackbar('CSV scaricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante il download del CSV:', error);\n        this.showSnackbar('Errore durante il download del CSV.', 'error');\n      }\n    },\n    \n    // Utility Methods\n    getStatusColor(value) {\n      const colors = {\n        \"unknown\": 'blue',\n        \"connecting\": 'amber',\n        \"connected\": 'green',\n        \"error\": 'red'\n      };\n      if (colors[value]) return colors[value];\n      return 'purple';\n    },\n    getSwitchColor(item) {\n      return item.enabled ? this.getStatusColor(item.status)\n                            : 'grey-lighten-2';\n    },\n    getListColor(list, elem, item) {\n      return item.enabled ? list.includes(elem) ? this.getStatusColor(item.status) : 'red'\n                            : 'grey-lighten-2';\n    },\n    getListColorStatic(list, elem) {\n      return list.includes(elem) ? 'green' : 'red';\n    },\n    handleEnabled(item) {\n      // Custom logic for enabling/disabling\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      item.enabled = !item.enabled;\n      this.editAction.newItem = { ...item };\n      this.addEditAction();\n      \n    },\n    showSnackbar(message, type) {\n      this.snackbar.text = message;\n      this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                          : type === 'error' ? 'red-lighten-3' \n                          : 'blue-lighten-5';\n      this.snackbar.show = true;\n      this.msg.dashboard.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Heading Text Size */\n.text-h5 {\n  font-size: 1.25rem;\n}\n\n/* Actions Column Styling */\n.actions-column {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 60px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 260,
        "wires": [
            [
                "5f306086bd1d7b23",
                "65d24a5dd144aacb"
            ]
        ]
    },
    {
        "id": "5f306086bd1d7b23",
        "type": "link out",
        "z": "32a3aaecd6ba621c",
        "name": "ui_table_out",
        "mode": "link",
        "links": [
            "16e330149fbc6976"
        ],
        "x": 1015,
        "y": 260,
        "wires": []
    },
    {
        "id": "43c1c84c388d6f53",
        "type": "function",
        "z": "32a3aaecd6ba621c",
        "name": "switch",
        "func": "// Function to format strings by replacing underscores with spaces and capitalizing each word\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// Init\nconst tabName = env.get('TABLE');\nmsg.title = capitalize(tabName);\nmsg.topicMain = msg.topicMain || msg.topic;\nmsg.database = msg.database || {\n    name: env.get(\"DATABASE\"),\n    schema: env.get(\"SCHEMA\"),\n    table: tabName\n};\nmsg.data = msg.data || flow.get(tabName) || null;\nmsg.dashboard = msg.dashboard || {};\nmsg.dashboard.info = msg.dashboard.info || flow.get(\"info\");\n\nif (msg.database.table !== tabName) {\n    msg.error = \"Message with wrong table\";\n}\n\n// Topic switch\nconst indexMap = {\n    // Previous Error\n    error:          0,\n\n    // Previous Action (postgres response)\n    check_table:    2,\n    deploy_changes: 2,\n    select_data:    4,\n\n    // Next Action\n    start:          1,\n    update:         2,\n    deploy:         3,\n    update_next:    5,\n    \n};\n\nconst outputs = [null, null, null, null, null, null];\n\nif (msg.error) outputs[0] = msg;\nelse if (indexMap[msg.topic] !== undefined) outputs[indexMap[msg.topic]] = msg;\n\nreturn outputs;\n\n\n",
        "outputs": 6,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 280,
        "wires": [
            [
                "e776eeee1222c6ae"
            ],
            [
                "3123ac1deab5f251"
            ],
            [
                "da767bf21adabe42"
            ],
            [
                "4d4c4616a70beee5"
            ],
            [
                "a9c8a0dbacef693b"
            ],
            [
                "0d7719f2adc3d79d"
            ]
        ]
    },
    {
        "id": "e776eeee1222c6ae",
        "type": "function",
        "z": "32a3aaecd6ba621c",
        "name": "error_show",
        "func": "msg.dashboard.snackbar = {\n    show: true,\n    text: `${msg.title} - ${msg.topic} error: ${msg.error.message}`,\n    color: \"red-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 180,
        "wires": [
            [
                "931179e7bf82fd62"
            ]
        ]
    },
    {
        "id": "da767bf21adabe42",
        "type": "function",
        "z": "32a3aaecd6ba621c",
        "name": "select_data",
        "func": "msg.query = `\n\n    SELECT column_name \n    FROM information_schema.columns \n    WHERE table_schema = '${msg.database.schema}'\n    AND table_name = '${msg.database.table}';\n\n    SELECT * \n    FROM ${msg.database.schema}.${msg.database.table}\n    ORDER BY id;\n\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"select_data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "3123ac1deab5f251",
        "type": "function",
        "z": "32a3aaecd6ba621c",
        "name": "check_db_table",
        "func": "// Extract schema and table names from the message\nconst schemaName = msg.database.schema;\nconst tableName = msg.database.table;\n\n// Construct the dynamic query for creating the schema and the table\nmsg.query = `\nDO $$\nBEGIN\n   -- Check if schema exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.schemata\n      WHERE schema_name = '${schemaName}'\n   ) THEN\n      CREATE SCHEMA ${schemaName};\n   END IF;\n\n   -- Check if table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${schemaName}' AND table_name = '${tableName}'\n   ) THEN\n      CREATE TABLE ${schemaName}.${tableName} (\n        id SERIAL,\n        enabled BOOLEAN,\n        name TEXT PRIMARY KEY,\n        machine TEXT,\n        protocol TEXT,\n        address TEXT,\n        node_id TEXT,\n        tag_tables TEXT,\n        comment TEXT\n      );\n   END IF;\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"check_table\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "1a7840541ba210de",
        "type": "comment",
        "z": "32a3aaecd6ba621c",
        "name": "to database",
        "info": "",
        "x": 810,
        "y": 180,
        "wires": []
    },
    {
        "id": "617008d75d008eac",
        "type": "comment",
        "z": "32a3aaecd6ba621c",
        "name": "to next",
        "info": "",
        "x": 790,
        "y": 380,
        "wires": []
    },
    {
        "id": "4d4c4616a70beee5",
        "type": "function",
        "z": "32a3aaecd6ba621c",
        "name": "deploy",
        "func": "function escapeValue(value) {\n    if (value === null || value === undefined) {\n        // Handles NULL values\n        return 'NULL';\n    } \n    else if (Array.isArray(value) || typeof value === 'object') {\n        // Convert arrays and objects to JSON, then escape single quotes\n        const jsonString = JSON.stringify(value);\n        return `'${jsonString.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'string') {\n        // Escapes dangerous characters like single quotes ('), \n        // replacing them with double single quotes ('')\n        return `'${value.replace(/'/g, \"''\")}'`;\n    } \n    else if (typeof value === 'boolean') {\n        // PostgreSQL uses 'TRUE'/'FALSE' for boolean values\n        return value ? 'TRUE' : 'FALSE';\n    } \n    else {\n        // For numbers (and other primitive types), return the value directly\n        return value;\n    }\n}\n\n\nlet commands = [];\nconst table = msg.database.table;\nconst schema = msg.database.schema;\n\nfor (const change of msg.dashboard.history) {\n    const { index, oldItem, newItem } = change;\n\n    if (oldItem && !newItem) {\n        // Case: deletion\n        commands.push(`DELETE FROM \"${schema}\".\"${table}\"WHERE name = ${escapeValue(oldItem.name)};`);\n\n    } else if (!oldItem && newItem) {\n        // Case: insertion\n        const keys = Object.keys(newItem);\n        const values = Object.values(newItem)\n            .map(value => `${escapeValue(value)}`) // Escape values\n            .join(', ');\n        commands.push(`INSERT INTO \"${schema}\".\"${table}\" (${keys.join(', ')}) VALUES (${values});`);\n\n    } else if (oldItem && newItem) {\n        // Case: update\n        const updates = Object.keys(newItem)\n            .map(key => `${key} = ${escapeValue(newItem[key])}`) // Escape values\n            .join(', ');\n        commands.push(`UPDATE \"${schema}\".\"${table}\" SET ${updates} WHERE name = ${escapeValue(oldItem.name)};`);\n    }\n}\n\n// Constructs the PL/pgSQL block\nmsg.query = `\nDO $$\nBEGIN\n    ${commands.join('\\n')}\nEND $$;\n`;\n\n// Resets the dashboard history\nmsg.dashboard.history = [];\n\nmsg.target = msg.database.name;\nmsg.topic = 'deploy_changes';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "0d7719f2adc3d79d",
        "type": "function",
        "z": "32a3aaecd6ba621c",
        "name": "clear_update",
        "func": "return {\n    topic: (msg.topicMain === 'start') ? 'start' : 'update',\n    time: new Date(),\n    _msgid: msg._msgid\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "16e330149fbc6976",
        "type": "link in",
        "z": "32a3aaecd6ba621c",
        "name": "switch_in",
        "links": [
            "5f306086bd1d7b23"
        ],
        "x": 85,
        "y": 240,
        "wires": [
            [
                "a50b2db7656d36e4"
            ]
        ]
    },
    {
        "id": "9a5e06c77b4816e3",
        "type": "debug",
        "z": "32a3aaecd6ba621c",
        "name": "switch_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 360,
        "wires": []
    },
    {
        "id": "883fe85dbc30d646",
        "type": "function",
        "z": "32a3aaecd6ba621c",
        "name": "Info",
        "func": "",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst info = \"Endpoints info dialog\"\n\n\n\nflow.set(\"info\", info);",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 160,
        "wires": []
    },
    {
        "id": "5eec11117ed59706",
        "type": "debug",
        "z": "96d5a2eeb5f112bc",
        "name": "table_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 200,
        "wires": []
    },
    {
        "id": "a74b79495efd24d7",
        "type": "function",
        "z": "96d5a2eeb5f112bc",
        "name": "update_status",
        "func": "// Function to replace underscores with spaces and capitalize words\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\nfunction parseValue(value) {\n    if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n            value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n            try {\n                return JSON.parse(value);\n            } catch (error) {\n                return value;\n            }\n        }\n        // Return original value for non-JSON types\n        return value;\n    }\n    return value;\n  }\n\n// Retrieve existing data or initialize\nlet columns = [];\nlet data = global.get(msg.database.table) || [];\n\nconst endpoints = (global.get(\"endpoints\") || [])\n    .filter(ep => Array.isArray(ep.tag_tables) && ep.tag_tables.some(tag => tag === msg.database.table));\nconst endpointNames = endpoints.map(ep => ep.name);\n\n// Extract column names from PostgreSQL query\nif (msg.pgsql && msg.pgsql[0] && msg.pgsql[0].rows) {\n    columns = msg.pgsql[0].rows.map(col => col.column_name);\n}\n\n// Extract data rows from PostgreSQL query and parse them\nif (msg.pgsql && msg.pgsql[1] && msg.pgsql[1].rows) {\n    data = msg.pgsql[1].rows;\n    data.forEach((row, rowIndex) => {\n        Object.keys(row).forEach((key) => {\n            let originalValue = row[key];\n            row[key] = parseValue(originalValue)\n        });\n    });\n}\n\n// Build dynamic table headers\nconst baseHeaders = columns.length > 0\n    ? columns\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exludes some columns\n        .map(key => ({\n            title: capitalize(key),\n            value: key,\n            headerProps: { style: 'font-weight: 700' },\n            sortable: true\n        }))\n    : [];\n\n// Build table header for endpoints\nconst endpointsHeader = {\n    title: \"Endpoints\",    \n    value: \"endpoints\",    \n    headerProps: { style: 'font-weight: 700' }, \n};\n\n// Define possible states for endpoints\nconst states = [\"unknown\", \"connected\", \"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connecting\", \"error\"];\nconst lengthItems = states.length;\n\n// Assign random states to endpoints if not already set\nfor (let i = 0; i < data.length; i++) {\n    for (let e = 0; e < endpointNames.length; e++) {\n        let endpointName = endpointNames[e];\n        if (!data[i][endpointName]) {\n            let randomIndex = Math.floor(Math.random() * lengthItems);\n            data[i][endpointName] = states[randomIndex];\n        }\n    }\n}\n\nlet snacktext = \"\";\nif (msg.topicMain === \"deploy\") {\n    snacktext = `${msg.title} Saved Successfully!`;\n} else if (msg.topicMain === \"update\") {\n    snacktext = `${msg.title} Updated Successfully!`;\n} else if (msg.topicMain === \"start\") {\n    snacktext = `${msg.title} Started Successfully!`;\n}\n\n// Assign table data to the message\nmsg.data = data;\nmsg.endpoints = endpoints;\n\nmsg.dashboard.table = {\n    title: msg.title,\n    headers: [ ...baseHeaders, endpointsHeader ],\n    baseHeaders: baseHeaders,\n    otherHeaders: [endpointsHeader]\n};\nmsg.dashboard.form = { \n    data_type: global.get(\"data_type\"),\n    access: global.get(\"access\"),\n    aggregation_type: global.get(\"aggregation_type\")\n};\n\nmsg.dashboard.history = msg.dashboard.history || [];\n\nmsg.dashboard.snackbar = {\n    show: true,\n    text: snacktext,\n    color: \"green-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\n// Save data back to the global context\nglobal.set(msg.database.table, data);\n\n// Return updated state\nconst now = new Date().toISOString();\nconst state = {\n    payload: { fill: \"green\", shape: \"dot\", text: `last update: ${now}` },\n    _msgid: msg._msgid\n};\n\nmsg.topic = 'update_status';\nreturn [msg, state];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 320,
        "wires": [
            [
                "fb4ae1d74584cfe9"
            ],
            []
        ]
    },
    {
        "id": "9e8e8fa3ae2dd93e",
        "type": "debug",
        "z": "96d5a2eeb5f112bc",
        "name": "table_out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 200,
        "wires": []
    },
    {
        "id": "9fded1b5e119a203",
        "type": "ui-template",
        "z": "96d5a2eeb5f112bc",
        "group": "46764671162d2995",
        "page": "",
        "ui": "",
        "name": "table_tags",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Container -->\n  <v-card>\n    <!-- Card Header with Title, Reload Button, Search Bar, and Action Buttons -->\n    <v-card-item class=\"bg-blue-darken-3\">\n      <v-row class=\"my-2 align-self-center\" no-gutters>\n        \n        <!-- Title -->\n        <v-col cols=\"auto\" class=\"mx-4 align-self-center\">\n          <v-btn\n            @click=\"openInfoDialog\"\n            variant=\"tonal\"\n            class=\"font-weight-bold text-h5 text-white\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-table</v-icon>\n            <p class=\"mx-1 align-self-center\" v-text=\"msg.dashboard.table.title\"></p>\n          </v-btn>\n        </v-col>\n\n        <!-- Search Bar -->\n        <v-col class=\"mx-4 align-self-center\">\n          <v-text-field\n            v-model=\"search\"\n            label=\"Search\"\n            prepend-inner-icon=\"mdi-magnify\"\n            single-line\n            clearable\n            hide-details\n            color=\"white\"\n          ></v-text-field>\n        </v-col>\n\n        <!-- Action Buttons (CSV Upload, CSV Download, Edit, Save, Add New, Discard) -->\n        <v-col cols=\"auto\" class=\"mx-2 align-self-center text-white\">\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"updateTable\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-reload</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Reload</span>\n          </v-btn>\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"downloadCsv\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-export</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Export</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"enableEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Edit</span>\n          </v-btn>\n\n          <!-- Buttons visible in Edit Mode -->\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deploy\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-floppy</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Save</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"addNewItem\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-plus</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Add New</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"openCsvDialog\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-import</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Import</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"discardEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil-off</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Discard</span>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <!-- Data Table with Custom Cell Templates -->\n    <v-data-table\n      v-model=\"selected\"\n      :headers=\"msg.dashboard.table.headers\"\n      :items=\"msg.data\"\n      :search=\"search\"\n      :items-per-page=\"itemsPerPage\"\n      :items-per-page-options=\"[5, 10, 25, 50, -1]\"\n      class=\"elevation-1\"\n      :loading=\"msg.dashboard.loading\"\n      loading-text=\"Loading...\"\n      density=\"default\"\n    >\n<!-- MODIFY DISPLAY HERE -->\n\n      <!-- Toggle Switch for 'enabled' Field -->\n      <template v-slot:item.enabled=\"{ item }\">\n        <v-switch\n          v-model=\"item.enabled\"\n          :model-value=\"item.enabled\"\n          :disabled=\"!editMode\"\n          hide-details\n          @click=\"handleEnabled(item)\"\n        ></v-switch>\n      </template>      \n\n      <!-- Custom Endpoint Chips -->\n      <template v-slot:item.endpoints=\"{ item }\">\n        <div>\n          <v-chip \n            v-for=\"(endp, index) in msg.endpoints\"\n            :key=\"index\"\n            class=\"ma-1\"\n            :color=\"getSwitchColor({enabled: endp.enabled, status: item[endp.name]})\"\n            size=\"small\"\n          >\n            {{ endp.name }}\n          </v-chip>\n        </div>\n      </template>\n\n<!-- END MODIFY -->\n      <!-- Actions Column with Edit and Delete Icons -->\n      <template v-slot:item.actions=\"{ item }\">\n        <div class=\"actions-column\">\n          <v-icon\n            v-show=\"editMode\"\n            small\n            class=\"mr-2\"\n            @click=\"editItem(item)\"\n            color=\"blue-darken-2\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-pencil\n          </v-icon>\n\n          <v-icon\n            v-show=\"editMode\"\n            small\n            @click=\"deleteItem(item)\"\n            color=\"blue-darken-4\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-delete\n          </v-icon>\n        </div>\n      </template>\n\n      <!-- No Data Message -->\n      <template v-slot:no-data>\n        <v-row class=\"ma-4\">\n          <v-alert :value=\"true\" color=\"warning\" icon=\"mdi-alert\">\n            No matching records found.\n          </v-alert>\n        </v-row>\n      </template>\n    </v-data-table>\n  </v-card>\n\n  <!-- Dialog for Adding or Editing Items -->\n  <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">{{ formTitle }}</span>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" v-model=\"valid\" fast-fail @submit.prevent>\n<!-- MODIFY FORM HERE -->\n\n          <!-- Form Fields -->\n          <v-text-field \n            v-model=\"editAction.newItem.name\" \n            label=\"Name\" \n            :rules=\"[v => !!v || 'Name is required']\" \n            required\n          ></v-text-field>\n          <v-text-field \n            v-model=\"editAction.newItem.label\" \n            label=\"Label\"\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.data_type\"\n            label=\"Data Type\"\n            :items=\"msg.dashboard.form.data_type\"\n            :rules=\"[v => !!v || 'Data Type is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-text-field \n            v-model=\"editAction.newItem.address\" \n            label=\"Address\" \n            :rules=\"[v => !!v || 'Address is required']\" \n            required\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.access\"\n            label=\"Access\"\n            :items=\"msg.dashboard.form.access\"\n            :rules=\"[v => !!v || 'Access is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-textarea\n            v-model=\"editAction.newItem.comment\" \n            label=\"Comment\"\n            maxlength=\"200\"\n            rows=\"2\"\n            counter\n            auto-grow\n          ></v-text-field>\n\n<!-- END MODIFY-->\n        </v-form>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"saveItem\">Save</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Select a CSV file\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete Confirmation Dialog -->\n  <v-dialog v-model=\"deleteDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting this element will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue\" text @click=\"cancelDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"red\" text @click=\"confirmDeletion\">\n          Delete\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Info Dialog -->\n  <v-dialog v-model=\"infoDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Info\n      </v-card-title>\n\n      <v-card-text>\n        <p v-text=\"msg.dashboard.info\"></p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Close Button -->\n        <v-btn color=\"blue\" text @click=\"closeInfoDialog\">\n          OK\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      search: '',\n      page: 1,\n      itemsPerPage: 5,\n      headerNames: [],\n      dialog: false,\n      deleteDialog: false,\n      csvDialog: false,\n      infoDialog: false,\n      csvFile: null,    \n      formTitle: \"\",\n      editMode: false,\n      editAction: {\n        index: -1,\n        oldItem: null,\n        newItem: null,\n      },\n      selected: [],\n      actionsHeader: {\n        title: \"Actions\",\n        value: \"actions\",\n        headerProps: { style: 'font-weight: 700' },\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n    };\n  },\n  computed: {\n    pageCount() {\n      return Math.ceil(this.msg.data.length / this.itemsPerPage);\n    },\n  },\n  watch: {\n    msg: {\n      handler() {\n        if (this.msg?.dashboard?.table?.headers) {\n          this.headerNames = this.msg.dashboard.table.baseHeaders.map(header => header.value);\n        };\n        if (\n          this.editMode &&\n          this.msg?.dashboard?.table?.headers?.[this.msg.dashboard.table.headers.length - 1]?.value !== 'actions'\n        ) {\n          this.msg.dashboard.table.headers.push(this.actionsHeader);\n        };\n        // Dynamically update snackbar parameters\n        if (this.msg?.dashboard?.snackbar) {\n          const { show, text, color } = this.msg.dashboard.snackbar;\n          this.snackbar.show = show;\n          this.snackbar.text = text || '';\n          this.snackbar.color = color || 'default';\n        }\n      },\n      deep: true \n    }\n  },\n  methods: {\n    // Sends a message with the current state\n    msgSend() {\n      this.msg.dashboard.snackbar = null;\n      this.send({\n        topic: this.msg.topic,\n        topicMain: this.msg.topicMain,\n        title: this.msg.title,\n        database: this.msg.database,\n        data: this.msg.data,\n        dashboard: this.msg.dashboard,\n        payload: this.msg.payload,\n        time: new Date(),\n      });\n    },\n    \n    // Edit mode controls\n    enableEdit() {\n      this.msg.dashboard.snackbar.show = false;\n      this.msg.dashboard.table.headers.push(this.actionsHeader);\n      this.editMode = true;\n    },\n    disableEdit() {\n      this.msg.dashboard.table.headers = this.msg.dashboard.table.headers.filter(\n        header => header !== this.actionsHeader\n      );\n      this.editMode = false;\n    },\n    \n    // Message Outputs: Update, Deploy and discard edits \n    updateTable() {\n      this.msg.topic = \"update\";\n      this.msg.topicMain = \"update\";\n      this.msg.payload = null;\n      this.msgSend();\n    },\n    deploy() {\n      this.msg.dashboard.loading = true;\n      this.disableEdit();\n      this.msg.topic = \"deploy\";\n      this.msg.topicMain = \"deploy\";\n      this.msgSend();\n      // this.showSnackbar('Deploy action triggered!', 'info');\n    },\n    discardEdit() {\n      this.disableEdit();\n      this.updateTable();\n    },\n    \n    // Handling items\n    getDefaultItem() {\n      const defaultItem = {};\n      this.msg.dashboard.table.baseHeaders.forEach(header => {\n        if (header.value !== 'actions') {\n          defaultItem[header.value] = header.value === 'enabled' ? true :\n                                        header.value === 'status' ? \"unknown\" : null;\n        }\n      });\n      return defaultItem;\n    },\n    filterItem(item) {\n      if (!item) {\n        return null;\n      }\n      return Object.keys(item)\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exclude keys\n        .filter(key => this.headerNames.includes(key)) // Exclude keys\n        .reduce((obj, key) => {\n          obj[key] = item[key];\n          return obj;\n        }, {});\n    },\n    filterHeaders(headers) {\n      return headers.filter(header => !['actions', 'status', 'id'].includes(header.value)) // Exludes some columns\n    },\n    addEditAction(){\n      let action = JSON.parse(JSON.stringify(this.editAction));\n      action.oldItem = this.filterItem(action.oldItem);\n      action.newItem = this.filterItem(action.newItem);\n      this.msg.dashboard.history.push(action);\n    },\n    addNewItem() {\n      this.editAction.index = -1;\n      this.editAction.oldItem = null;\n      this.editAction.newItem = this.getDefaultItem();\n      this.formTitle = 'Add Item';\n      this.dialog = true;\n    },\n    editItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = { ...item };\n      this.formTitle = 'Edit Item';\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = null;\n      this.deleteDialog = true;\n    },\n\n    // Delete Dialog controls\n    cancelDeletion() {\n      this.deleteDialog = false;\n    },\n    confirmDeletion() {\n      this.deleteDialog = false;\n      if (this.editAction.index > -1) {\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n        // this.showSnackbar('Item deleted successfully!', 'success');\n      }\n    },\n\n    // Form Dialog controls\n    closeDialog() {\n      this.dialog = false;\n      this.$refs.form.reset();\n    },\n    async saveItem() {\n      const { valid } = await this.$refs.form.validate();\n      if (valid) {\n        if (this.editAction.index > -1) {\n          Object.assign(this.msg.data[this.editAction.index], this.editAction.newItem);\n          // this.showSnackbar('Item updated successfully!', 'success');\n        } else {\n          this.msg.data.push({ ...this.editAction.newItem });\n          // this.showSnackbar('Item added successfully!', 'success');\n        }\n        this.addEditAction();\n        this.closeDialog();\n      } else {\n        this.showSnackbar('Please correct the errors in the form.', 'error');\n      }\n    },\n\n    // Info Dialog controls\n    openInfoDialog() {\n      this.infoDialog = true;\n    },\n    closeInfoDialog() {\n      this.infoDialog = false;\n    },\n\n    // CSV Dialog controls\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Data Handling\n    // Stringify function that handles different data types\n    stringifyValue(value) {\n      if (value === undefined || value === null) {\n        return ''; // Handle null or undefined\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value); // Handle arrays by converting them to a JSON string\n      } else if (typeof value === 'object') {\n        return JSON.stringify(value); // Handle objects by converting them to a JSON string\n      } else if (typeof value === 'string') {\n        return value; // Use string as-is\n      } else {\n        return String(value); // Convert other types (number, boolean, etc.) to string\n      }\n    },\n    parseValue(value) {\n      if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n          value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n          try {\n            return JSON.parse(value);\n          } catch (error) {\n            return value;\n          }\n        }\n\n        // Check if the string represents a boolean\n        if (value.toLowerCase() === \"true\") return true;\n        if (value.toLowerCase() === \"false\") return false;\n\n        // Check if the string represents a number\n        const parsedNumber = Number(value);\n        if (!isNaN(parsedNumber)) return parsedNumber;\n\n        // Return original value for simple strings\n        return value;\n      }\n      return value;\n    },\n\n    // CSV Upload and Loading\n    async processCsv() {  // Processes the uploaded CSV file\n      if (!this.csvFile) {\n        this.showSnackbar('No file selected!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV successfully uploaded!', 'success');\n      } catch (error) {\n        this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n    parseCsv(content) {  // Parses the CSV file content into an array of objects\n      const rows = content.split(/\\r?\\n/).filter(row => row.trim()); \n      const headers = rows.shift().split(';'); // Use the first row as headers\n      return rows.map(row => {\n        const values = row.split(';'); \n        return headers.reduce((acc, header, index) => {\n          acc[header] = this.parseValue(values[index]); // Map headers to corresponding values\n          return acc;\n        }, {});\n      });\n    },\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {  // Check if an item with the same name exists\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n            this.editAction.oldItem = {...existingItem};\n            this.editAction.newItem = {...newItem};\n            this.addEditAction()\n            Object.assign(existingItem, newItem); // Update \n          }\n        } else {\n          this.editAction.oldItem = null;\n          this.editAction.newItem = {...newItem};\n          this.addEditAction()\n          this.msg.data.push(newItem);  // Add new \n        }\n      });\n    },\n    \n    // CSV Generation and Download\n    generateCsv() {\n      const separator = ';';\n      const headers = this.filterHeaders(this.msg.dashboard.table.baseHeaders)\n        .map(header => header.value)\n        .join(separator); \n\n      const rows = this.msg.data.map(item => {\n        return this.filterHeaders(this.msg.dashboard.table.baseHeaders)\n          .map(header => {\n            return this.stringifyValue(item[header.value]);\n          })\n          .join(separator);\n      }).join('\\n');\n\n\n      return `${headers}\\n${rows}`;\n    },\n    createDownloadLink(csvContent) {\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${this.msg.database.table}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    downloadCsv() {\n      try {\n        const csvContent = this.generateCsv();\n        this.createDownloadLink(csvContent);\n        this.showSnackbar('CSV scaricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante il download del CSV:', error);\n        this.showSnackbar('Errore durante il download del CSV.', 'error');\n      }\n    },\n    \n    // Utility Methods\n    getStatusColor(value) {\n      const colors = {\n        \"unknown\": 'blue',\n        \"connecting\": 'amber',\n        \"connected\": 'green',\n        \"error\": 'red'\n      };\n      if (colors[value]) return colors[value];\n      return 'purple';\n    },\n    getSwitchColor(item) {\n      return item.enabled ? this.getStatusColor(item.status)\n                            : 'grey-lighten-2';\n    },\n    getListColor(list, elem, item) {\n      return item.enabled ? list.includes(elem) ? this.getStatusColor(item.status) : 'red'\n                            : 'grey-lighten-2';\n    },\n    getListColorStatic(list, elem) {\n      return list.includes(elem) ? 'green' : 'red';\n    },\n    handleEnabled(item) {\n      // Custom logic for enabling/disabling\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      item.enabled = !item.enabled;\n      this.editAction.newItem = { ...item };\n      this.addEditAction();\n      \n    },\n    showSnackbar(message, type) {\n      this.snackbar.text = message;\n      this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                          : type === 'error' ? 'red-lighten-3' \n                          : 'blue-lighten-5';\n      this.snackbar.show = true;\n      this.msg.dashboard.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Heading Text Size */\n.text-h5 {\n  font-size: 1.25rem;\n}\n\n/* Actions Column Styling */\n.actions-column {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 60px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 790,
        "y": 240,
        "wires": [
            [
                "6a2c581d23afb47f",
                "9e8e8fa3ae2dd93e"
            ]
        ]
    },
    {
        "id": "6a2c581d23afb47f",
        "type": "link out",
        "z": "96d5a2eeb5f112bc",
        "name": "ui_table_out",
        "mode": "link",
        "links": [
            "ecac83872ed8bc4e"
        ],
        "x": 995,
        "y": 240,
        "wires": []
    },
    {
        "id": "289ed522f9d46c0e",
        "type": "function",
        "z": "96d5a2eeb5f112bc",
        "name": "switch",
        "func": "// Function to format strings by replacing underscores with spaces and capitalizing each word\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// Init\nconst tabName = env.get('TABLE');\nmsg.title = capitalize(tabName);\nmsg.topicMain = msg.topicMain || msg.topic;\nmsg.database = msg.database || {\n    name: env.get(\"DATABASE\"),\n    schema: env.get(\"SCHEMA\"),\n    table: tabName\n};\nmsg.data = msg.data || flow.get(tabName) || null;\nmsg.dashboard = msg.dashboard || {};\nmsg.dashboard.info = msg.dashboard.info || flow.get(\"info\");\n\nif (msg.database.table !== tabName) {\n    msg.error = \"Message with wrong table\";\n}\n\n// Topic switch\nconst indexMap = {\n    // Previous Error\n    error:          0,\n\n    // Previous Action (postgres response)\n    check_table:    2,\n    deploy_changes: 2,\n    select_data:    4,\n\n    // Next Action\n    start:          1,\n    update:         2,\n    deploy:         3,\n    update_next:    5,\n    \n};\n\nconst outputs = [null, null, null, null, null, null];\n\nif (msg.error) outputs[0] = msg;\nelse if (indexMap[msg.topic] !== undefined) outputs[indexMap[msg.topic]] = msg;\n\nreturn outputs;\n\n\n",
        "outputs": 6,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 260,
        "wires": [
            [
                "84dffe0ac4e466b5"
            ],
            [
                "7c52eb13244670e4",
                "9fce59067ffcfd37"
            ],
            [
                "60bd7628bf41b9fc"
            ],
            [
                "a5a228e2f528d133"
            ],
            [
                "a74b79495efd24d7"
            ],
            []
        ]
    },
    {
        "id": "84dffe0ac4e466b5",
        "type": "function",
        "z": "96d5a2eeb5f112bc",
        "name": "error_show",
        "func": "msg.dashboard.snackbar = {\n    show: true,\n    text: `${msg.title} - ${msg.topic} error: ${msg.error.message}`,\n    color: \"red-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 160,
        "wires": [
            [
                "fb4ae1d74584cfe9"
            ]
        ]
    },
    {
        "id": "60bd7628bf41b9fc",
        "type": "function",
        "z": "96d5a2eeb5f112bc",
        "name": "select_data",
        "func": "msg.query = `\n\n    SELECT column_name \n    FROM information_schema.columns \n    WHERE table_schema = '${msg.database.schema}'\n    AND table_name = '${msg.database.table}';\n\n    SELECT * \n    FROM ${msg.database.schema}.${msg.database.table}\n    ORDER BY id;\n\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"select_data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7c52eb13244670e4",
        "type": "function",
        "z": "96d5a2eeb5f112bc",
        "name": "check_db_table",
        "func": "// Extract schema and table names from the message\nconst schemaName = msg.database.schema;\nconst tableName = msg.database.table;\n\n// Construct the dynamic query for creating the schema and the table\nmsg.query = `\nDO $$\nBEGIN\n   -- Check if schema exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.schemata\n      WHERE schema_name = '${schemaName}'\n   ) THEN\n      CREATE SCHEMA ${schemaName};\n   END IF;\n\n   -- Check if table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${schemaName}' AND table_name = '${tableName}'\n   ) THEN\n      CREATE TABLE ${schemaName}.${tableName} (\n        id SERIAL,\n        enabled BOOLEAN,\n        name TEXT PRIMARY KEY,\n        label TEXT,\n        data_type TEXT,\n        address TEXT,\n        access TEXT,\n        comment TEXT\n      );\n   END IF;\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"check_table\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "93ec10ef6d731d0e",
        "type": "comment",
        "z": "96d5a2eeb5f112bc",
        "name": "to database",
        "info": "",
        "x": 790,
        "y": 160,
        "wires": []
    },
    {
        "id": "a5a228e2f528d133",
        "type": "function",
        "z": "96d5a2eeb5f112bc",
        "name": "deploy",
        "func": "function escapeValue(value) {\n    if (value === null || value === undefined) {\n        // Handles NULL values\n        return 'NULL';\n    } \n    else if (Array.isArray(value) || typeof value === 'object') {\n        // Convert arrays and objects to JSON, then escape single quotes\n        const jsonString = JSON.stringify(value);\n        return `'${jsonString.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'string') {\n        // Escapes dangerous characters like single quotes ('), \n        // replacing them with double single quotes ('')\n        return `'${value.replace(/'/g, \"''\")}'`;\n    } \n    else if (typeof value === 'boolean') {\n        // PostgreSQL uses 'TRUE'/'FALSE' for boolean values\n        return value ? 'TRUE' : 'FALSE';\n    } \n    else {\n        // For numbers (and other primitive types), return the value directly\n        return value;\n    }\n}\n\n\nlet commands = [];\nconst table = msg.database.table;\nconst schema = msg.database.schema;\n\nfor (const change of msg.dashboard.history) {\n    const { index, oldItem, newItem } = change;\n\n    if (oldItem && !newItem) {\n        // Case: deletion\n        commands.push(`DELETE FROM \"${schema}\".\"${table}\"WHERE name = ${escapeValue(oldItem.name)};`);\n\n    } else if (!oldItem && newItem) {\n        // Case: insertion\n        const keys = Object.keys(newItem);\n        const values = Object.values(newItem)\n            .map(value => `${escapeValue(value)}`) // Escape values\n            .join(', ');\n        commands.push(`INSERT INTO \"${schema}\".\"${table}\" (${keys.join(', ')}) VALUES (${values});`);\n\n    } else if (oldItem && newItem) {\n        // Case: update\n        const updates = Object.keys(newItem)\n            .map(key => `${key} = ${escapeValue(newItem[key])}`) // Escape values\n            .join(', ');\n        commands.push(`UPDATE \"${schema}\".\"${table}\" SET ${updates} WHERE name = ${escapeValue(oldItem.name)};`);\n    }\n}\n\n// Constructs the PL/pgSQL block\nmsg.query = `\nDO $$\nBEGIN\n    ${commands.join('\\n')}\nEND $$;\n`;\n\n// Resets the dashboard history\nmsg.dashboard.history = [];\n\nmsg.target = msg.database.name;\nmsg.topic = 'deploy_changes';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "ecac83872ed8bc4e",
        "type": "link in",
        "z": "96d5a2eeb5f112bc",
        "name": "switch_in",
        "links": [
            "6a2c581d23afb47f"
        ],
        "x": 65,
        "y": 220,
        "wires": [
            [
                "df46bed50bf4daed"
            ]
        ]
    },
    {
        "id": "950353991ce401e6",
        "type": "debug",
        "z": "96d5a2eeb5f112bc",
        "name": "switch_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 340,
        "wires": []
    },
    {
        "id": "9fce59067ffcfd37",
        "type": "function",
        "z": "96d5a2eeb5f112bc",
        "name": "Info",
        "func": "const info = `${msg.title} info dialog`\n\n\n\nflow.set(\"info\", info);",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 160,
        "wires": []
    },
    {
        "id": "867b0a31a6575085",
        "type": "debug",
        "z": "8d01ac882dc6d48d",
        "name": "table_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 240,
        "wires": []
    },
    {
        "id": "493d6974b92dca31",
        "type": "function",
        "z": "8d01ac882dc6d48d",
        "name": "update_status",
        "func": "// Function to replace underscores with spaces and capitalize words\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\nfunction parseValue(value) {\n    if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n            value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n            try {\n                return JSON.parse(value);\n            } catch (error) {\n                return value;\n            }\n        }\n        // Return original value for non-JSON types\n        return value;\n    }\n    return value;\n  }\n\n// Retrieve existing data or initialize\nlet columns = [];\nlet data = global.get(msg.database.table) || [];\n\n// Extract column names from PostgreSQL query\nif (msg.pgsql && msg.pgsql[0] && msg.pgsql[0].rows) {\n    columns = msg.pgsql[0].rows.map(col => col.column_name);\n}\n\n// Extract data rows from PostgreSQL query and parse them\nif (msg.pgsql && msg.pgsql[1] && msg.pgsql[1].rows) {\n    data = msg.pgsql[1].rows;\n    data.forEach((row, rowIndex) => {\n        Object.keys(row).forEach((key) => {\n            let originalValue = row[key];\n            row[key] = parseValue(originalValue)\n        });\n    });\n}\n\nlet tag_tables = [];\nif (msg.pgsql && msg.pgsql[2] && msg.pgsql[2].rows) {\n    tag_tables = msg.pgsql[2].rows.map(row => row.table_name);\n}\n\n// Check if all tag tables are present in the database\nlet deploy_needed = false;\ntag_tables.forEach(tableName => {\n    if (!data.some(row => row.name === tableName)) {\n        let newItem = {\n            name: tableName,\n            sampling_mode: 'none',\n            sampling_freq: 'none',\n            aggregation: 'none',\n            comment: 'auto-generated, modification needed for proper configuration',\n        }\n        let editAction = {\n            index: -1,\n            oldItem: null,\n            newItem: newItem,\n        }\n        msg.dashboard.history = msg.dashboard.history || [];\n        msg.dashboard.history.push(editAction);\n        deploy_needed = true;\n    }\n});\n\n// Build dynamic table headers\nconst baseHeaders = columns.length > 0\n    ? columns\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exludes some columns\n        .map(key => ({\n            title: capitalize(key),\n            value: key,\n            headerProps: { style: 'font-weight: 700' },\n            sortable: true\n        }))\n    : [];\n\n\n// Define possible states for endpoints\nconst states = [\"unknown\", \"connected\", \"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connected\",\"connecting\", \"error\"];\nconst lengthItems = states.length;\n\n// Assign random states to endpoints if not already set\nfor (let i = 0; i < data.length; i++) {  \n    let randomIndex = Math.floor(Math.random() * lengthItems);\n    if (!data[i].status) {\n        data[i].status = states[randomIndex];\n    }\n    if (typeof data[i].enabled === 'string') {\n        let enabledLower = data[i].enabled.toLowerCase();\n        data[i].enabled = (enabledLower === 'true');\n    }\n    if (data[i].enabled === null) {\n        data[i].enabled = true;\n    }\n}\n\nlet snacktext = \"\";\nif (msg.topicMain === \"deploy\") {\n    snacktext = `${msg.title} Saved Successfully!`;\n} else if (msg.topicMain === \"update\") {\n    snacktext = `${msg.title} Updated Successfully!`;\n} else if (msg.topicMain === \"start\") {\n    snacktext = `${msg.title} Started Successfully!`;\n}\n\n// Assign table data to the message\nmsg.data = data;\n\nmsg.dashboard.table = {\n    title: msg.title,\n    headers: baseHeaders,\n};\nmsg.dashboard.form = { \n    sampling_mode: global.get(\"sampling_mode\"),\n    sampling_freq: global.get(\"sampling_freq\"),\n    aggregation: global.get(\"aggregation\"),\n};\n\nmsg.dashboard.history = msg.dashboard.history || [];\n\nmsg.dashboard.snackbar = {\n    show: true,\n    text: snacktext,\n    color: \"green-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\n// Save data back to the global context\nglobal.set(msg.database.table, data);\n\n// Return updated state\nconst now = new Date().toISOString();\nconst state = {\n    payload: { fill: \"green\", shape: \"dot\", text: `last update: ${now}` },\n    _msgid: msg._msgid\n};\n\nif (deploy_needed) {\n    msg.topic = 'deploy';\n    return [msg, null, null];\n} else {\n    msg.topic = 'update_status';\n    return [null, msg, state];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 380,
        "wires": [
            [
                "89e5ecbbf9264cc4"
            ],
            [
                "1639cbdd260d2cff",
                "e7395bef25d1c1bf"
            ],
            []
        ]
    },
    {
        "id": "4824c13ea4fe3910",
        "type": "debug",
        "z": "8d01ac882dc6d48d",
        "name": "table_out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 240,
        "wires": []
    },
    {
        "id": "6b787d1e94828298",
        "type": "ui-template",
        "z": "8d01ac882dc6d48d",
        "group": "4290ffc4397af8c8",
        "page": "",
        "ui": "",
        "name": "table_tag_tables",
        "order": 4,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Container -->\n  <v-card>\n    <!-- Card Header with Title, Reload Button, Search Bar, and Action Buttons -->\n    <v-card-item class=\"bg-blue-darken-3\">\n      <v-row class=\"my-2 align-self-center\" no-gutters>\n        \n        <!-- Title -->\n        <v-col cols=\"auto\" class=\"mx-4 align-self-center\">\n          <v-btn\n            @click=\"openInfoDialog\"\n            variant=\"tonal\"\n            class=\"font-weight-bold text-h5 text-white\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-table</v-icon>\n            <p class=\"mx-1 align-self-center\" v-text=\"msg.dashboard.table.title\"></p>\n          </v-btn>\n        </v-col>\n\n        <!-- Search Bar -->\n        <v-col class=\"mx-4 align-self-center\">\n          <v-text-field\n            v-model=\"search\"\n            label=\"Search\"\n            prepend-inner-icon=\"mdi-magnify\"\n            single-line\n            clearable\n            hide-details\n            color=\"white\"\n          ></v-text-field>\n        </v-col>\n\n        <!-- Action Buttons (CSV Upload, CSV Download, Edit, Save, Add New, Discard) -->\n        <v-col cols=\"auto\" class=\"mx-2 align-self-center text-white\">\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"updateTable\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-reload</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Reload</span>\n          </v-btn>\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"downloadCsv\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-export</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Export</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"!editMode\"\n            @click=\"enableEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Edit</span>\n          </v-btn>\n\n          <!-- Buttons visible in Edit Mode -->\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"deploy\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-floppy</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Save</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"addNewItem\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-plus</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Add New</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"openCsvDialog\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-import</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Import</span>\n          </v-btn>\n\n          <v-btn\n            class=\"mx-2 align-self-center\"\n            v-show=\"editMode\"\n            @click=\"discardEdit\"\n            variant=\"tonal\"\n          >\n            <v-icon class=\"mx-1 align-self-center\" left>mdi-pencil-off</v-icon>\n            <span class=\"mx-1 align-self-center font-weight-bold\">Discard</span>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <!-- Data Table with Custom Cell Templates -->\n    <v-data-table\n      v-model=\"selected\"\n      :headers=\"msg.dashboard.table.headers\"\n      :items=\"msg.data\"\n      :search=\"search\"\n      :items-per-page=\"itemsPerPage\"\n      :items-per-page-options=\"[5, 10, 25, 50, -1]\"\n      class=\"elevation-1\"\n      :loading=\"msg.dashboard.loading\"\n      loading-text=\"Loading...\"\n      density=\"default\"\n    >\n<!-- MODIFY DISPLAY HERE -->\n\n\n<!-- END MODIFY -->\n      <!-- Actions Column with Edit and Delete Icons -->\n      <template v-slot:item.actions=\"{ item }\">\n        <div class=\"actions-column\">\n          <v-icon\n            v-show=\"editMode\"\n            small\n            class=\"mr-2\"\n            @click=\"editItem(item)\"\n            color=\"blue-darken-2\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-pencil\n          </v-icon>\n\n          <v-icon\n            v-show=\"editMode\"\n            small\n            @click=\"deleteItem(item)\"\n            color=\"blue-darken-4\"\n            style=\"cursor: pointer;\"\n          >\n            mdi-delete\n          </v-icon>\n        </div>\n      </template>\n\n      <!-- No Data Message -->\n      <template v-slot:no-data>\n        <v-row class=\"ma-4\">\n          <v-alert :value=\"true\" color=\"warning\" icon=\"mdi-alert\">\n            No matching records found.\n          </v-alert>\n        </v-row>\n      </template>\n    </v-data-table>\n  </v-card>\n\n  <!-- Dialog for Adding or Editing Items -->\n  <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">{{ formTitle }}</span>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" v-model=\"valid\" fast-fail @submit.prevent>\n<!-- MODIFY FORM HERE -->\n\n          <!-- Form Fields -->\n          <v-text-field\n            v-model=\"editAction.newItem.name\"\n            label=\"Name\"\n            :rules=\"[v => !!v || 'Name is required']\"\n            required\n          ></v-text-field>\n          <v-select\n            v-model=\"editAction.newItem.sampling_mode\"\n            label=\"Sampling Mode\"\n            :items=\"msg.dashboard.form.sampling_mode\"\n            :rules=\"[v => !!v || 'Sampling Mode is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-select\n            v-model=\"editAction.newItem.sampling_freq\"\n            label=\"Sampling Frequency\"\n            :items=\"msg.dashboard.form.sampling_freq\"\n            :rules=\"[v => !!v || 'Sampling Frequency is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-select\n            v-model=\"editAction.newItem.aggregation\"\n            label=\"Aggregation\"\n            :items=\"msg.dashboard.form.aggregation\"\n            :rules=\"[v => !!v || 'Aggregation is required']\"\n            required\n            clearable\n          ></v-select>\n          <v-textarea\n            v-model=\"editAction.newItem.comment\"\n            label=\"Comment\"\n            maxlength=\"200\"\n            counter\n          ></v-text-field>\n\n<!-- END MODIFY-->\n        </v-form>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"saveItem\">Save</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Select a CSV file\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Delete Confirmation Dialog -->\n  <v-dialog v-model=\"deleteDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Confirm Deletion\n      </v-card-title>\n\n      <v-card-text>\n        <p>Deleting this element will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Cancel Button -->\n        <v-btn color=\"blue\" text @click=\"cancelDeletion\">\n          Cancel\n        </v-btn>\n        <!-- Confirm Button -->\n        <v-btn color=\"red\" text @click=\"confirmDeletion\">\n          Delete\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Info Dialog -->\n  <v-dialog v-model=\"infoDialog\" max-width=\"500\" persistent>\n    <v-card>\n      <v-card-title class=\"headline mt-1\">\n        Info\n      </v-card-title>\n\n      <v-card-text>\n        <p v-text=\"msg.dashboard.info\"></p>\n      </v-card-text>\n        \n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <!-- Close Button -->\n        <v-btn color=\"blue\" text @click=\"closeInfoDialog\">\n          OK\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      search: '',\n      page: 1,\n      itemsPerPage: 5,\n      headerNames: [],\n      dialog: false,\n      deleteDialog: false,\n      csvDialog: false,\n      infoDialog: false,\n      csvFile: null,    \n      formTitle: \"\",\n      editMode: false,\n      editAction: {\n        index: -1,\n        oldItem: null,\n        newItem: null,\n      },\n      selected: [],\n      actionsHeader: {\n        title: \"Actions\",\n        value: \"actions\",\n        headerProps: { style: 'font-weight: 700' },\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n    };\n  },\n  computed: {\n    pageCount() {\n      return Math.ceil(this.msg.data.length / this.itemsPerPage);\n    },\n  },\n  watch: {\n    msg: {\n      handler() {\n        if (this.msg?.dashboard?.table?.headers) {\n          this.headerNames = this.msg.dashboard.table.headers.map(header => header.value);\n        };\n        if (\n          this.editMode &&\n          this.msg?.dashboard?.table?.headers?.[this.msg.dashboard.table.headers.length - 1]?.value !== 'actions'\n        ) {\n          this.msg.dashboard.table.headers.push(this.actionsHeader);\n        };\n        // Dynamically update snackbar parameters\n        if (this.msg?.dashboard?.snackbar) {\n          const { show, text, color } = this.msg.dashboard.snackbar;\n          this.snackbar.show = show;\n          this.snackbar.text = text || '';\n          this.snackbar.color = color || 'default';\n        }\n      },\n      deep: true \n    }\n  },\n  methods: {\n    // Sends a message with the current state\n    msgSend() {\n      this.msg.dashboard.snackbar = null;\n      this.send({\n        topic: this.msg.topic,\n        topicMain: this.msg.topicMain,\n        title: this.msg.title,\n        database: this.msg.database,\n        data: this.msg.data,\n        dashboard: this.msg.dashboard,\n        payload: this.msg.payload,\n        time: new Date(),\n      });\n    },\n    \n    // Edit mode controls\n    enableEdit() {\n      this.msg.dashboard.snackbar.show = false;\n      this.msg.dashboard.table.headers.push(this.actionsHeader);\n      this.editMode = true;\n    },\n    disableEdit() {\n      this.msg.dashboard.table.headers = this.msg.dashboard.table.headers.filter(\n        header => header !== this.actionsHeader\n      );\n      this.editMode = false;\n    },\n    \n    // Message Outputs: Update, Deploy and discard edits \n    updateTable() {\n      this.msg.topic = \"update\";\n      this.msg.topicMain = \"update\";\n      this.msg.payload = null;\n      this.msgSend();\n    },\n    deploy() {\n      this.msg.dashboard.loading = true;\n      this.disableEdit();\n      this.msg.topic = \"deploy\";\n      this.msg.topicMain = \"deploy\";\n      this.msgSend();\n      // this.showSnackbar('Deploy action triggered!', 'info');\n    },\n    discardEdit() {\n      this.disableEdit();\n      this.updateTable();\n    },\n    \n    // Handling items\n    getDefaultItem() {\n      const defaultItem = {};\n      this.msg.dashboard.table.headers.forEach(header => {\n        if (header.value !== 'actions') {\n          defaultItem[header.value] = header.value === 'enabled' ? true :\n                                        header.value === 'status' ? \"unknown\" : null;\n        }\n      });\n      return defaultItem;\n    },\n    filterItem(item) {\n      if (!item) {\n        return null;\n      }\n      return Object.keys(item)\n        .filter(key => !['actions', 'status', 'id'].includes(key)) // Exclude keys\n        .filter(key => this.headerNames.includes(key)) // Exclude keys\n        .reduce((obj, key) => {\n          obj[key] = item[key];\n          return obj;\n        }, {});\n    },\n    filterHeaders(headers) {\n      return headers.filter(header => !['actions', 'status', 'id'].includes(header.value)) // Exludes some columns\n    },\n    addEditAction(){\n      let action = JSON.parse(JSON.stringify(this.editAction));\n      action.oldItem = this.filterItem(action.oldItem);\n      action.newItem = this.filterItem(action.newItem);\n      this.msg.dashboard.history.push(action);\n    },\n    addNewItem() {\n      this.editAction.index = -1;\n      this.editAction.oldItem = null;\n      this.editAction.newItem = this.getDefaultItem();\n      this.formTitle = 'Add Item';\n      this.dialog = true;\n    },\n    editItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = { ...item };\n      this.formTitle = 'Edit Item';\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      this.editAction.newItem = null;\n      this.deleteDialog = true;\n    },\n\n    // Delete Dialog controls\n    cancelDeletion() {\n      this.deleteDialog = false;\n    },\n    confirmDeletion() {\n      this.deleteDialog = false;\n      if (this.editAction.index > -1) {\n        this.msg.data.splice(this.editAction.index, 1);\n        this.addEditAction();\n        // this.showSnackbar('Item deleted successfully!', 'success');\n      }\n    },\n\n    // Form Dialog controls\n    closeDialog() {\n      this.dialog = false;\n      this.$refs.form.reset();\n    },\n    async saveItem() {\n      const { valid } = await this.$refs.form.validate();\n      if (valid) {\n        if (this.editAction.index > -1) {\n          Object.assign(this.msg.data[this.editAction.index], this.editAction.newItem);\n          // this.showSnackbar('Item updated successfully!', 'success');\n        } else {\n          this.msg.data.push({ ...this.editAction.newItem });\n          // this.showSnackbar('Item added successfully!', 'success');\n        }\n        this.addEditAction();\n        this.closeDialog();\n      } else {\n        this.showSnackbar('Please correct the errors in the form.', 'error');\n      }\n    },\n\n    // Info Dialog controls\n    openInfoDialog() {\n      this.infoDialog = true;\n    },\n    closeInfoDialog() {\n      this.infoDialog = false;\n    },\n\n    // CSV Dialog controls\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Data Handling\n    // Stringify function that handles different data types\n    stringifyValue(value) {\n      if (value === undefined || value === null) {\n        return ''; // Handle null or undefined\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value); // Handle arrays by converting them to a JSON string\n      } else if (typeof value === 'object') {\n        return JSON.stringify(value); // Handle objects by converting them to a JSON string\n      } else if (typeof value === 'string') {\n        return value; // Use string as-is\n      } else {\n        return String(value); // Convert other types (number, boolean, etc.) to string\n      }\n    },\n    parseValue(value) {\n      if (typeof value === 'string') {\n        // Remove leading/trailing quotes and unescape inner quotes if present\n        if ((value.startsWith('\"[') && value.endsWith(']\"')) || (value.startsWith('\"{') && value.endsWith('}\"'))) {\n          value = value.slice(1, -1).replace(/\"\"/g, '\"');\n        }\n\n        // Parse value as JSON if it's a valid JSON string\n        if ((value.startsWith('[') && value.endsWith(']')) || (value.startsWith('{') && value.endsWith('}'))) {\n          try {\n            return JSON.parse(value);\n          } catch (error) {\n            return value;\n          }\n        }\n        // Return original value for non-JSON types\n        return value;\n      }\n      return value;\n    },\n\n    // CSV Upload and Loading\n    async processCsv() {  // Processes the uploaded CSV file\n      if (!this.csvFile) {\n        this.showSnackbar('No file selected!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV successfully uploaded!', 'success');\n      } catch (error) {\n        this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n    parseCsv(content) {  // Parses the CSV file content into an array of objects\n      const rows = content.split(/\\r?\\n/).filter(row => row.trim()); \n      const headers = rows.shift().split(';'); // Use the first row as headers\n      return rows.map(row => {\n        const values = row.split(';'); \n        return headers.reduce((acc, header, index) => {\n          acc[header] = this.parseValue(values[index]); // Map headers to corresponding values\n          return acc;\n        }, {});\n      });\n    },\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {  // Check if an item with the same name exists\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n            this.editAction.oldItem = {...existingItem};\n            this.editAction.newItem = {...newItem};\n            this.addEditAction()\n            Object.assign(existingItem, newItem); // Update \n          }\n        } else {\n          this.editAction.oldItem = null;\n          this.editAction.newItem = {...newItem};\n          this.addEditAction()\n          this.msg.data.push(newItem);  // Add new \n        }\n      });\n    },\n    \n    // CSV Generation and Download\n    generateCsv() {\n      const separator = ';';\n      const headers = this.filterHeaders(this.msg.dashboard.table.headers)\n        .map(header => header.value)\n        .join(separator); \n\n      const rows = this.msg.data.map(item => {\n        return this.filterHeaders(this.msg.dashboard.table.headers)\n          .map(header => {\n            return this.stringifyValue(item[header.value]);\n          })\n          .join(separator);\n      }).join('\\n');\n\n\n      return `${headers}\\n${rows}`;\n    },\n    createDownloadLink(csvContent) {\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${this.msg.database.table}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    downloadCsv() {\n      try {\n        const csvContent = this.generateCsv();\n        this.createDownloadLink(csvContent);\n        this.showSnackbar('CSV scaricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante il download del CSV:', error);\n        this.showSnackbar('Errore durante il download del CSV.', 'error');\n      }\n    },\n    \n    // Utility Methods\n    getStatusColor(value) {\n      const colors = {\n        \"unknown\": 'blue',\n        \"connecting\": 'amber',\n        \"connected\": 'green',\n        \"error\": 'red'\n      };\n      if (colors[value]) return colors[value];\n      return 'purple';\n    },\n    getSwitchColor(item) {\n      return item.enabled ? this.getStatusColor(item.status)\n                            : 'grey-lighten-2';\n    },\n    getListColor(list, elem, item) {\n      return item.enabled ? list.includes(elem) ? this.getStatusColor(item.status) : 'red'\n                            : 'grey-lighten-2';\n    },\n    getListColorStatic(list, elem) {\n      return list.includes(elem) ? 'green' : 'red';\n    },\n    handleEnabled(item) {\n      // Custom logic for enabling/disabling\n      this.editAction.index = this.msg.data.indexOf(item);\n      this.editAction.oldItem = { ...item };\n      item.enabled = !item.enabled;\n      this.editAction.newItem = { ...item };\n      this.addEditAction();\n      \n    },\n    showSnackbar(message, type) {\n      this.snackbar.text = message;\n      this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                          : type === 'error' ? 'red-lighten-3' \n                          : 'blue-lighten-5';\n      this.snackbar.show = true;\n      this.msg.dashboard.loading = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Heading Text Size */\n.text-h5 {\n  font-size: 1.25rem;\n}\n\n/* Actions Column Styling */\n.actions-column {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 60px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 800,
        "y": 280,
        "wires": [
            [
                "9a78439fe0ef36c6",
                "4824c13ea4fe3910"
            ]
        ]
    },
    {
        "id": "9a78439fe0ef36c6",
        "type": "link out",
        "z": "8d01ac882dc6d48d",
        "name": "ui_table_out",
        "mode": "link",
        "links": [
            "3439ee7afb735a34"
        ],
        "x": 995,
        "y": 280,
        "wires": []
    },
    {
        "id": "a32e742fd6349a59",
        "type": "function",
        "z": "8d01ac882dc6d48d",
        "name": "switch",
        "func": "// Function to format strings by replacing underscores with spaces and capitalizing each word\nfunction capitalize(str) {\n    return str\n        .replace(/_/g, ' ')\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// Init\nconst tabName = env.get('TABLE');\nmsg.title = capitalize(tabName);\nmsg.topicMain = msg.topicMain || msg.topic;\nmsg.database = msg.database || {\n    name: env.get(\"DATABASE\"),\n    schema: env.get(\"SCHEMA\"),\n    table: tabName,\n    tagsSchema: env.get(\"TAGS_SCHEMA\"),\n};\nmsg.data = msg.data || flow.get(tabName) || null;\nmsg.dashboard = msg.dashboard || {};\nmsg.dashboard.info = msg.dashboard.info || flow.get(\"info\");\n\nif (msg.database.table !== tabName) {\n    msg.error = \"Message with wrong table\";\n}\n\n// Topic switch\nconst indexMap = {\n    // Previous Error\n    error:          0,\n\n    // Previous Action (postgres response)\n    check_table:    2,\n    deploy_changes: 2,\n    select_data:    4,\n\n    // Next Action\n    start:          1,\n    update:         2,\n    deploy:         3,\n    update_next:    5,\n    \n};\n\nconst outputs = [null, null, null, null, null, null];\n\nif (msg.error) outputs[0] = msg;\nelse if (indexMap[msg.topic] !== undefined) outputs[indexMap[msg.topic]] = msg;\n\nreturn outputs;\n\n\n",
        "outputs": 6,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 300,
        "wires": [
            [
                "2eed54bb56e3675e"
            ],
            [
                "f4196adaf4b495fc",
                "8bc572c410a11e6b"
            ],
            [
                "cf3a69ba53110e22"
            ],
            [
                "89e5ecbbf9264cc4"
            ],
            [
                "493d6974b92dca31"
            ],
            [
                "e7395bef25d1c1bf"
            ]
        ]
    },
    {
        "id": "2eed54bb56e3675e",
        "type": "function",
        "z": "8d01ac882dc6d48d",
        "name": "error_show",
        "func": "msg.dashboard.snackbar = {\n    show: true,\n    text: `${msg.title} - ${msg.topic} error: ${msg.error.message}`,\n    color: \"red-lighten-3\"\n}\n\nmsg.dashboard.loading = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            [
                "1639cbdd260d2cff"
            ]
        ]
    },
    {
        "id": "cf3a69ba53110e22",
        "type": "function",
        "z": "8d01ac882dc6d48d",
        "name": "select_data",
        "func": "msg.query = `\n\n    SELECT column_name \n    FROM information_schema.columns \n    WHERE table_schema = '${msg.database.schema}'\n    AND table_name = '${msg.database.table}';\n\n    SELECT * \n    FROM ${msg.database.schema}.${msg.database.table}\n    ORDER BY id;\n\n    SELECT table_name\n    FROM information_schema.tables\n    WHERE table_schema = '${msg.database.tagsSchema}'\n    ORDER BY table_name;\n\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"select_data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f4196adaf4b495fc",
        "type": "function",
        "z": "8d01ac882dc6d48d",
        "name": "check_db_table",
        "func": "// Extract schema and table names from the message\nconst schemaName = msg.database.schema;\nconst tableName = msg.database.table;\n\n// Construct the dynamic query for creating the schema and the table\nmsg.query = `\nDO $$\nBEGIN\n   -- Check if schema exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.schemata\n      WHERE schema_name = '${schemaName}'\n   ) THEN\n      CREATE SCHEMA ${schemaName};\n   END IF;\n\n   -- Check if table exists and create if it doesn't\n   IF NOT EXISTS (\n      SELECT 1\n      FROM information_schema.tables\n      WHERE table_schema = '${schemaName}' AND table_name = '${tableName}'\n   ) THEN\n      CREATE TABLE ${schemaName}.${tableName} (\n         id SERIAL,\n         name TEXT PRIMARY KEY,\n         sampling_mode TEXT,\n         sampling_freq TEXT,\n         aggregation TEXT,\n         comment TEXT\n      );\n   END IF;\nEND $$;\n`;\n\nmsg.target = msg.database.name;\nmsg.topic = \"check_table\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "913483d41eea11e8",
        "type": "comment",
        "z": "8d01ac882dc6d48d",
        "name": "to database",
        "info": "",
        "x": 790,
        "y": 200,
        "wires": []
    },
    {
        "id": "9a6a8bfc22293664",
        "type": "comment",
        "z": "8d01ac882dc6d48d",
        "name": "to next",
        "info": "",
        "x": 770,
        "y": 440,
        "wires": []
    },
    {
        "id": "89e5ecbbf9264cc4",
        "type": "function",
        "z": "8d01ac882dc6d48d",
        "name": "deploy",
        "func": "function escapeValue(value) {\n    if (value === null || value === undefined) {\n        // Handles NULL values\n        return 'NULL';\n    } \n    else if (Array.isArray(value) || typeof value === 'object') {\n        // Convert arrays and objects to JSON, then escape single quotes\n        const jsonString = JSON.stringify(value);\n        return `'${jsonString.replace(/'/g, \"''\")}'`;\n    }\n    else if (typeof value === 'string') {\n        // Escapes dangerous characters like single quotes ('), \n        // replacing them with double single quotes ('')\n        return `'${value.replace(/'/g, \"''\")}'`;\n    } \n    else if (typeof value === 'boolean') {\n        // PostgreSQL uses 'TRUE'/'FALSE' for boolean values\n        return value ? 'TRUE' : 'FALSE';\n    } \n    else {\n        // For numbers (and other primitive types), return the value directly\n        return value;\n    }\n}\n\n\nlet commands = [];\nconst table = msg.database.table;\nconst schema = msg.database.schema;\n\nfor (const change of msg.dashboard.history) {\n    const { index, oldItem, newItem } = change;\n\n    if (oldItem && !newItem) {\n        // Case: deletion\n        commands.push(`DELETE FROM \"${schema}\".\"${table}\"WHERE name = ${escapeValue(oldItem.name)};`);\n\n    } else if (!oldItem && newItem) {\n        // Case: insertion\n        const keys = Object.keys(newItem);\n        const values = Object.values(newItem)\n            .map(value => `${escapeValue(value)}`) // Escape values\n            .join(', ');\n        commands.push(`INSERT INTO \"${schema}\".\"${table}\" (${keys.join(', ')}) VALUES (${values});`);\n\n    } else if (oldItem && newItem) {\n        // Case: update\n        const updates = Object.keys(newItem)\n            .map(key => `${key} = ${escapeValue(newItem[key])}`) // Escape values\n            .join(', ');\n        commands.push(`UPDATE \"${schema}\".\"${table}\" SET ${updates} WHERE name = ${escapeValue(oldItem.name)};`);\n    }\n}\n\n// Constructs the PL/pgSQL block\nmsg.query = `\nDO $$\nBEGIN\n    ${commands.join('\\n')}\nEND $$;\n`;\n\n// Resets the dashboard history\nmsg.dashboard.history = [];\n\nmsg.target = msg.database.name;\nmsg.topic = 'deploy_changes';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e7395bef25d1c1bf",
        "type": "function",
        "z": "8d01ac882dc6d48d",
        "name": "clear_update",
        "func": "return {\n    topic: (msg.topicMain === 'start') ? 'start' : 'update',\n    time: new Date(),\n    _msgid: msg._msgid\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "3439ee7afb735a34",
        "type": "link in",
        "z": "8d01ac882dc6d48d",
        "name": "switch_in",
        "links": [
            "9a78439fe0ef36c6"
        ],
        "x": 65,
        "y": 260,
        "wires": [
            [
                "b0e07cfe068bad1f"
            ]
        ]
    },
    {
        "id": "3f0b799a977415c5",
        "type": "debug",
        "z": "8d01ac882dc6d48d",
        "name": "switch_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 380,
        "wires": []
    },
    {
        "id": "8bc572c410a11e6b",
        "type": "function",
        "z": "8d01ac882dc6d48d",
        "name": "Info",
        "func": "const info = `${msg.title} info dialog`\n\n\n\nflow.set(\"info\", info);",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": []
    },
    {
        "id": "d6f10ad9959617c5",
        "type": "comment",
        "z": "8d01ac882dc6d48d",
        "name": "to table nodes autogeneration",
        "info": "",
        "x": 940,
        "y": 360,
        "wires": []
    },
    {
        "id": "b0c1a0c91308577b",
        "type": "function",
        "z": "4b69c9fd15f72033",
        "name": "set_global_variables",
        "func": "",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Function node script to initialize global variables as column-based arrays\n\n// Run this script on Node-RED start or inject node\n\n// Data from the table\nconst protocol = [\n    \"S7\", \n    \"ModBus\", \n    \"OPC UA\", \n    \"MQTT\", \n    \"API Rest\"\n];\nconst data_type = [\n    \"int\", \n    \"float\", \n    \"string\", \n    \"timestamp\"\n];\nconst access = [\n    \"read\", \n    \"write\", \n    \"read/write\"\n];\nconst sampling_mode = [\n    \"static\", \n    \"continous\", \n    \"continous_on_change\", \n    \"trigger_custom\"\n];\nconst sampling_freq = [\n    \"none\", \n    \"500ms\", \n    \"1s\", \n    \"2s\", \n    \"5s\"\n];\nconst aggregations = [\n    \"none\",\n    \"1m\",\n    \"3m\",\n    \"5m\",\n    \"15m\",\n    \"30m\",\n    \"1h\",\n    \"12h\",\n    \"1g\",\n    \"1w\",\n    \"1M\",\n    [\"1m\", \"1h\"],\n    [\"1m\", \"1h\", \"1g\", \"1w\"],\n    [\"1m\", \"1h\", \"1g\", \"1w\", \"1M\"]\n];\nconst aggregation_type = [\n    \"none\",\n    \"sum\",\n    \"mean\"\n];\n\n\n// Initialize global variables\nglobal.set(\"protocol\", protocol);\nglobal.set(\"data_type\", data_type);\nglobal.set(\"access\", access);\nglobal.set(\"sampling_mode\", sampling_mode);\nglobal.set(\"sampling_freq\", sampling_freq);\nglobal.set(\"aggregations\", aggregations);\nglobal.set(\"aggregation_type\", aggregation_type);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Global variables initialized\" });",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 80,
        "wires": []
    },
    {
        "id": "3943ffe7416e5d32",
        "type": "subflow:f38f1d8bba7489fd",
        "z": "4b69c9fd15f72033",
        "name": "",
        "env": [
            {
                "name": "SCHEMA",
                "value": "config",
                "type": "str"
            }
        ],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "9ca721adb0f24da3"
            ],
            [
                "5bf67e2b2433103b"
            ]
        ],
        "info": "database and schema must exist"
    },
    {
        "id": "9ca721adb0f24da3",
        "type": "link call",
        "z": "4b69c9fd15f72033",
        "name": "",
        "links": [
            "b845df89960615f1"
        ],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 660,
        "y": 180,
        "wires": [
            [
                "3943ffe7416e5d32"
            ]
        ]
    },
    {
        "id": "6e0b6a5407e0305f",
        "type": "inject",
        "z": "4b69c9fd15f72033",
        "name": "update",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "3943ffe7416e5d32"
            ]
        ]
    },
    {
        "id": "f3981e9d60e4fe04",
        "type": "inject",
        "z": "4b69c9fd15f72033",
        "name": "start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "start",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "3943ffe7416e5d32"
            ]
        ]
    },
    {
        "id": "ed1594514e826d82",
        "type": "link call",
        "z": "4b69c9fd15f72033",
        "name": "",
        "links": [
            "b845df89960615f1"
        ],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 640,
        "y": 320,
        "wires": [
            [
                "5bf67e2b2433103b"
            ]
        ]
    },
    {
        "id": "c27c59c3ce823d49",
        "type": "inject",
        "z": "4b69c9fd15f72033",
        "name": "update",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "5bf67e2b2433103b"
            ]
        ]
    },
    {
        "id": "dd36fc049c712ffa",
        "type": "inject",
        "z": "4b69c9fd15f72033",
        "name": "start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "start",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "5bf67e2b2433103b"
            ]
        ]
    },
    {
        "id": "5bf67e2b2433103b",
        "type": "subflow:2e8ad62399cfdd46",
        "z": "4b69c9fd15f72033",
        "name": "",
        "env": [
            {
                "name": "SCHEMA",
                "value": "config",
                "type": "str"
            }
        ],
        "x": 360,
        "y": 320,
        "wires": [
            [
                "ed1594514e826d82"
            ],
            [
                "ae388e9bdc57b3c7"
            ]
        ]
    },
    {
        "id": "6720a64d617a6d73",
        "type": "link call",
        "z": "4b69c9fd15f72033",
        "name": "",
        "links": [
            "b845df89960615f1"
        ],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 640,
        "y": 600,
        "wires": [
            [
                "f6ae7a47c89c5b74"
            ]
        ]
    },
    {
        "id": "09131d2c4838b168",
        "type": "inject",
        "z": "4b69c9fd15f72033",
        "name": "update",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "f6ae7a47c89c5b74"
            ]
        ]
    },
    {
        "id": "02befe8d7424d51f",
        "type": "inject",
        "z": "4b69c9fd15f72033",
        "name": "start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "start",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "f6ae7a47c89c5b74"
            ]
        ]
    },
    {
        "id": "f6ae7a47c89c5b74",
        "type": "subflow:32a3aaecd6ba621c",
        "z": "4b69c9fd15f72033",
        "name": "",
        "env": [
            {
                "name": "SCHEMA",
                "value": "config",
                "type": "str"
            }
        ],
        "x": 360,
        "y": 600,
        "wires": [
            [
                "6720a64d617a6d73"
            ],
            [
                "bc31f07c227e2c67"
            ]
        ]
    },
    {
        "id": "0fcbb776626abfc3",
        "type": "link call",
        "z": "4b69c9fd15f72033",
        "name": "",
        "links": [
            "b845df89960615f1"
        ],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 680,
        "y": 860,
        "wires": [
            [
                "b6efce463b4cd331"
            ]
        ]
    },
    {
        "id": "987a712a5358cdfa",
        "type": "inject",
        "z": "4b69c9fd15f72033",
        "name": "update",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "x": 210,
        "y": 880,
        "wires": [
            [
                "b6efce463b4cd331"
            ]
        ]
    },
    {
        "id": "403677f01d3d0fc1",
        "type": "inject",
        "z": "4b69c9fd15f72033",
        "name": "start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "start",
        "x": 210,
        "y": 840,
        "wires": [
            [
                "b6efce463b4cd331"
            ]
        ]
    },
    {
        "id": "b6efce463b4cd331",
        "type": "subflow:96d5a2eeb5f112bc",
        "z": "4b69c9fd15f72033",
        "name": "tags_odr_s7",
        "env": [
            {
                "name": "SCHEMA",
                "value": "tags",
                "type": "str"
            },
            {
                "name": "TABLE",
                "value": "tags_odr_s7",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 860,
        "wires": [
            [
                "0fcbb776626abfc3"
            ]
        ]
    },
    {
        "id": "4d9ca0142d780768",
        "type": "link in",
        "z": "4b69c9fd15f72033",
        "name": "tags_odr_s7",
        "links": [
            "bc31f07c227e2c67"
        ],
        "x": 105,
        "y": 860,
        "wires": [
            [
                "b6efce463b4cd331"
            ]
        ]
    },
    {
        "id": "bc31f07c227e2c67",
        "type": "link out",
        "z": "4b69c9fd15f72033",
        "name": "config_autoupdate",
        "mode": "link",
        "links": [
            "4d9ca0142d780768"
        ],
        "x": 595,
        "y": 660,
        "wires": []
    },
    {
        "id": "9740fa96b5bdecc7",
        "type": "link call",
        "z": "4b69c9fd15f72033",
        "name": "",
        "links": [
            "b845df89960615f1"
        ],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 620,
        "y": 440,
        "wires": [
            [
                "ae388e9bdc57b3c7"
            ]
        ]
    },
    {
        "id": "acb1fcafcf0cb14f",
        "type": "inject",
        "z": "4b69c9fd15f72033",
        "name": "update",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "ae388e9bdc57b3c7"
            ]
        ]
    },
    {
        "id": "3bd8c9d638f15740",
        "type": "inject",
        "z": "4b69c9fd15f72033",
        "name": "start",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "start",
        "x": 170,
        "y": 440,
        "wires": [
            [
                "ae388e9bdc57b3c7"
            ]
        ]
    },
    {
        "id": "e5fbfb78bbef766c",
        "type": "comment",
        "z": "4b69c9fd15f72033",
        "name": "Main Configuration",
        "info": "",
        "x": 130,
        "y": 80,
        "wires": []
    },
    {
        "id": "9d0afe0b64790f9a",
        "type": "comment",
        "z": "4b69c9fd15f72033",
        "name": "Tag Tables",
        "info": "",
        "x": 120,
        "y": 740,
        "wires": []
    },
    {
        "id": "ae388e9bdc57b3c7",
        "type": "subflow:8d01ac882dc6d48d",
        "z": "4b69c9fd15f72033",
        "name": "",
        "env": [
            {
                "name": "TABLE",
                "value": "tag_tables",
                "type": "str"
            }
        ],
        "x": 390,
        "y": 460,
        "wires": [
            [
                "9740fa96b5bdecc7"
            ],
            [
                "2e023103e93dff0c"
            ],
            [
                "f6ae7a47c89c5b74"
            ]
        ]
    },
    {
        "id": "2e023103e93dff0c",
        "type": "function",
        "z": "4b69c9fd15f72033",
        "name": "autodeploy",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 480,
        "wires": [
            [
                "61cb3eb03a82cad8"
            ]
        ]
    },
    {
        "id": "61cb3eb03a82cad8",
        "type": "debug",
        "z": "4b69c9fd15f72033",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 480,
        "wires": []
    },
    {
        "id": "21a0d91b198eb334",
        "type": "inject",
        "z": "bd541df93b501d76",
        "name": "check_databases",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "check_database",
        "x": 250,
        "y": 120,
        "wires": [
            [
                "246fbd0e6e68b33d",
                "f805e0b45cbd23fb"
            ]
        ]
    },
    {
        "id": "febc1580eb9df353",
        "type": "function",
        "z": "bd541df93b501d76",
        "name": "check_database",
        "func": "// Ensure the database name is provided in msg.payload\nif (!msg.database.name) {\n    node.error(\"Database name is required in msg.database.name\");\n    return null;\n}\n\n// First, check if the database exists\nmsg.query = `\nSELECT 1 AS exists \nFROM pg_database \nWHERE datname = '${msg.database.name}';\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 120,
        "wires": [
            [
                "89ae823686f10fd9"
            ]
        ]
    },
    {
        "id": "89ae823686f10fd9",
        "type": "link out",
        "z": "bd541df93b501d76",
        "name": "check_database",
        "mode": "link",
        "links": [
            "b845df89960615f1"
        ],
        "x": 995,
        "y": 120,
        "wires": []
    },
    {
        "id": "246fbd0e6e68b33d",
        "type": "change",
        "z": "bd541df93b501d76",
        "name": "edge",
        "rules": [
            {
                "t": "set",
                "p": "database.name",
                "pt": "msg",
                "to": "edge",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "febc1580eb9df353"
            ]
        ]
    },
    {
        "id": "abcc8fef4f2b4546",
        "type": "postgresql",
        "z": "bd541df93b501d76",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "841bfed957343a4e",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 280,
        "y": 400,
        "wires": [
            [
                "24a22c8abb6c235c",
                "2ad6a504a7bde1cb"
            ]
        ]
    },
    {
        "id": "24a22c8abb6c235c",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "postgres_all",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 360,
        "wires": []
    },
    {
        "id": "b845df89960615f1",
        "type": "link in",
        "z": "bd541df93b501d76",
        "name": "postgres",
        "links": [
            "89ae823686f10fd9",
            "8c9c451ef71f414f",
            "e0195f831f3c9f45"
        ],
        "x": 135,
        "y": 400,
        "wires": [
            [
                "abcc8fef4f2b4546",
                "22f454c1d4a10625"
            ]
        ]
    },
    {
        "id": "d5beeec001412b1b",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "other",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 520,
        "wires": []
    },
    {
        "id": "22f454c1d4a10625",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "postgres_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 360,
        "wires": []
    },
    {
        "id": "8c9c451ef71f414f",
        "type": "link out",
        "z": "bd541df93b501d76",
        "name": "init_database",
        "mode": "link",
        "links": [
            "b845df89960615f1"
        ],
        "x": 995,
        "y": 380,
        "wires": []
    },
    {
        "id": "c269f26fc7e6784d",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "check_database",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 360,
        "wires": []
    },
    {
        "id": "0345f209c7024da9",
        "type": "function",
        "z": "bd541df93b501d76",
        "name": "init_database",
        "func": "// Check if payload exists\nif (!msg.payload) {\n    node.error(\"No payload\");\n    return [null, null];\n}\n\n// Retrieve the database name from msg.database.name\nif (!msg.database.name) {\n    node.error(\"Database name is missing\");\n    return [null, null];\n}\n\n// Check if the database already exists based on payload length\nif (msg.payload.length > 0) {\n    // Database already exists --> skip creation\n    return [null, msg];\n}\n\n// Construct the CREATE DATABASE query with proper syntax\nmsg.query = `\n\n    CREATE DATABASE \"${msg.database.name}\";\n    \n`;\n\n// Set topic\nmsg.topic = \"init_database\";\n\nreturn [msg, null];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 400,
        "wires": [
            [
                "8c9c451ef71f414f"
            ],
            [
                "7e717ac74c0a9b93"
            ]
        ]
    },
    {
        "id": "4427a308d77a4c37",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "init_database",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 440,
        "wires": []
    },
    {
        "id": "7e717ac74c0a9b93",
        "type": "link out",
        "z": "bd541df93b501d76",
        "name": "init_schemas",
        "mode": "link",
        "links": [],
        "x": 995,
        "y": 420,
        "wires": []
    },
    {
        "id": "2ad6a504a7bde1cb",
        "type": "switch",
        "z": "bd541df93b501d76",
        "name": "topic_switch",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "check_database",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "init_database",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 510,
        "y": 440,
        "wires": [
            [
                "1170b3f43fbc52f8"
            ],
            [
                "7050fd899e41ae8d"
            ],
            [
                "327f0a2810b02718"
            ]
        ]
    },
    {
        "id": "5f77ae8fd9bdfdbb",
        "type": "comment",
        "z": "bd541df93b501d76",
        "name": "maintenance database",
        "info": "",
        "x": 220,
        "y": 300,
        "wires": []
    },
    {
        "id": "12fd21f7819015fd",
        "type": "comment",
        "z": "bd541df93b501d76",
        "name": "initialize and manual_check",
        "info": "",
        "x": 239,
        "y": 60,
        "wires": []
    },
    {
        "id": "9c3cf8741609cf37",
        "type": "inject",
        "z": "bd541df93b501d76",
        "name": "insert error",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "SELECT * FROM tabella_che_non_esiste;",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "check_database",
        "x": 200,
        "y": 480,
        "wires": [
            [
                "abcc8fef4f2b4546"
            ]
        ]
    },
    {
        "id": "bc4284eadefedd11",
        "type": "catch",
        "z": "bd541df93b501d76",
        "name": "postgres catch",
        "scope": [
            "abcc8fef4f2b4546"
        ],
        "uncaught": false,
        "x": 260,
        "y": 560,
        "wires": [
            [
                "e3ac9fa0f0628e4e",
                "ab1028c2f6cc0b1b",
                "0a380c59cce8c2bd"
            ]
        ]
    },
    {
        "id": "f805e0b45cbd23fb",
        "type": "change",
        "z": "bd541df93b501d76",
        "name": "monitoring",
        "rules": [
            {
                "t": "set",
                "p": "database.name",
                "pt": "msg",
                "to": "monitoring",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 160,
        "wires": [
            [
                "e5ab32897ee2ac3f"
            ]
        ]
    },
    {
        "id": "e0195f831f3c9f45",
        "type": "link out",
        "z": "bd541df93b501d76",
        "name": "check_database",
        "mode": "link",
        "links": [
            "b845df89960615f1"
        ],
        "x": 995,
        "y": 160,
        "wires": []
    },
    {
        "id": "e5ab32897ee2ac3f",
        "type": "function",
        "z": "bd541df93b501d76",
        "name": "check_database",
        "func": "// Ensure the database name is provided in msg.payload\nif (!msg.database.name) {\n    node.error(\"Database name is required in msg.database.name\");\n    return null;\n}\n\n// First, check if the database exists\nmsg.query = `\nSELECT 1 AS exists \nFROM pg_database \nWHERE datname = '${msg.database.name}';\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "e0195f831f3c9f45"
            ]
        ]
    },
    {
        "id": "e3ac9fa0f0628e4e",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "error_postgres",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 520,
        "wires": []
    },
    {
        "id": "ab1028c2f6cc0b1b",
        "type": "link out",
        "z": "bd541df93b501d76",
        "name": "postgres_error_return",
        "mode": "return",
        "links": [],
        "x": 455,
        "y": 600,
        "wires": []
    },
    {
        "id": "b4f2906176b9cb5e",
        "type": "function",
        "z": "bd541df93b501d76",
        "name": "[TODO] init_schemas",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "0a380c59cce8c2bd",
        "type": "function",
        "z": "bd541df93b501d76",
        "name": "[TODO] log_errors",
        "func": "\nreturn msg;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 560,
        "wires": []
    },
    {
        "id": "80e10827bc63dbd6",
        "type": "link out",
        "z": "bd541df93b501d76",
        "name": "postgres_return",
        "mode": "return",
        "links": [],
        "x": 735,
        "y": 560,
        "wires": []
    },
    {
        "id": "bf8ad430a770555a",
        "type": "postgresql",
        "z": "bd541df93b501d76",
        "name": "edge",
        "query": "",
        "postgreSQLConfig": "841bfed957343a4e",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 270,
        "y": 820,
        "wires": [
            [
                "afdbdfdb07f2e33d",
                "c045c7050f7ce8bd"
            ]
        ]
    },
    {
        "id": "afdbdfdb07f2e33d",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "edge_all",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 780,
        "wires": []
    },
    {
        "id": "b2366c0b7a520910",
        "type": "link in",
        "z": "bd541df93b501d76",
        "name": "edge",
        "links": [],
        "x": 135,
        "y": 820,
        "wires": [
            [
                "bf8ad430a770555a",
                "c38c44aa5029be52"
            ]
        ]
    },
    {
        "id": "a06755f25bc23c34",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "other",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 860,
        "wires": []
    },
    {
        "id": "c38c44aa5029be52",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "edge_in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 780,
        "wires": []
    },
    {
        "id": "d6ca67b2b65ac9e3",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "init_database",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 780,
        "wires": []
    },
    {
        "id": "c045c7050f7ce8bd",
        "type": "switch",
        "z": "bd541df93b501d76",
        "name": "topic_switch",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "init_database",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 860,
        "wires": [
            [
                "e7735ec40b9cbcd1"
            ],
            [
                "55797f5332ec928e"
            ]
        ]
    },
    {
        "id": "982bf82675f9dfde",
        "type": "comment",
        "z": "bd541df93b501d76",
        "name": "edge database",
        "info": "",
        "x": 200,
        "y": 720,
        "wires": []
    },
    {
        "id": "ef04298f51ef7cd3",
        "type": "inject",
        "z": "bd541df93b501d76",
        "name": "insert error",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "query",
                "v": "SELECT * FROM tabella_che_non_esiste;",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "check_database",
        "x": 200,
        "y": 900,
        "wires": [
            [
                "bf8ad430a770555a"
            ]
        ]
    },
    {
        "id": "53b5686d033fc681",
        "type": "catch",
        "z": "bd541df93b501d76",
        "name": "edge catch",
        "scope": [
            "bf8ad430a770555a"
        ],
        "uncaught": false,
        "x": 280,
        "y": 980,
        "wires": [
            [
                "f5588aa3565a0ba4",
                "e3425e89140d944a",
                "3a16ea6b870e697e"
            ]
        ]
    },
    {
        "id": "f5588aa3565a0ba4",
        "type": "debug",
        "z": "bd541df93b501d76",
        "name": "error_edge",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 940,
        "wires": []
    },
    {
        "id": "e3425e89140d944a",
        "type": "link out",
        "z": "bd541df93b501d76",
        "name": "edge_error_return",
        "mode": "return",
        "links": [],
        "x": 455,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e54eec3fb8b5cedf",
        "type": "function",
        "z": "bd541df93b501d76",
        "name": "[TODO] init_schemas",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "3a16ea6b870e697e",
        "type": "function",
        "z": "bd541df93b501d76",
        "name": "[TODO] log_errors",
        "func": "\nreturn msg;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 980,
        "wires": []
    },
    {
        "id": "6f71f4b10ba6ad3a",
        "type": "link out",
        "z": "bd541df93b501d76",
        "name": "edge_return",
        "mode": "return",
        "links": [],
        "x": 735,
        "y": 900,
        "wires": []
    },
    {
        "id": "65eea93a82376331",
        "type": "ui-template",
        "z": "9919b96619183950",
        "d": true,
        "group": "4ef9bcc0d874c9bb",
        "page": "",
        "ui": "",
        "name": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-app>\n      <v-container>\n        <!-- Text Field to Display Selected Date -->\n        <v-text-field\n          v-model=\"formattedDate\"\n          label=\"Service Date\"\n          readonly\n        ></v-text-field>\n  \n        <!-- Button to Open Dialog -->\n        <v-btn color=\"primary\" @click=\"dialog = true\">\n          Select Date\n        </v-btn>\n  \n        <!-- Date Picker Dialog -->\n        <v-dialog\n          v-model=\"dialog\"\n          persistent\n        >\n          <v-card class=\"fill\">\n            <v-date-picker\n              v-model=\"selectedDate\"\n              @input=\"saveDate\"\n            ></v-date-picker>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn text color=\"primary\" @click=\"dialog = false\">Cancel</v-btn>\n              <v-btn text color=\"primary\" @click=\"confirmDate\">OK</v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n  \n        <!-- Debugging -->\n        <p>Selected Date: {{ selectedDate }}</p>\n      </v-container>\n    </v-app>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        dialog: false, // Controls dialog visibility\n        selectedDate: null, // Stores the selected date from date picker\n      };\n    },\n    computed: {\n      formattedDate() {\n        // Format date for display in the text field\n        if (!this.selectedDate) return \"\";\n        const options = { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" };\n        return new Date(this.selectedDate).toLocaleDateString(undefined, options);\n      },\n    },\n    methods: {\n      saveDate() {\n        // Auto-close dialog on date selection\n        this.dialog = false;\n      },\n      confirmDate() {\n        // Explicitly confirm date and close the dialog\n        this.dialog = false;\n      },\n    },\n  };\n  </script>\n  ",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 340,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "54f2dabc246a868a",
        "type": "ui-template",
        "z": "9919b96619183950",
        "d": true,
        "group": "4ef9bcc0d874c9bb",
        "page": "",
        "ui": "",
        "name": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Modifica nel Card Header -->\n  <v-card-item class=\"bg-blue-darken-3\">\n    <v-row class=\"my-2 align-self-center\" no-gutters>\n      <!-- Pulsante per caricare il CSV -->\n      <v-btn\n        class=\"mx-2 align-self-center\"\n        v-show=\"!editMode\"\n        @click=\"openCsvDialog\"\n        variant=\"tonal\"\n      >\n        <v-icon class=\"mx-1 align-self-center\" left>mdi-file-upload</v-icon>\n        <span class=\"mx-1 align-self-center font-weight-bold\">Upload CSV</span>\n      </v-btn>\n    </v-row>\n  </v-card-item>\n\n  <!-- Dialog per il caricamento del CSV -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Carica CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input\n          v-model=\"csvFile\"\n          label=\"Seleziona un file CSV\"\n          accept=\".csv\"\n          clearable\n          hide-details\n        ></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      csvDialog: false,\n      csvFile: null,\n    };\n  },\n  methods: {\n    // Aprire e chiudere il dialog del CSV\n    openCsvDialog() {\n      this.csvDialog = true;\n    },\n    closeCsvDialog() {\n      this.csvDialog = false;\n      this.csvFile = null;\n    },\n\n    // Elaborare il CSV caricato\n    async processCsv() {\n      if (!this.csvFile) {\n        this.showSnackbar('Nessun file selezionato!', 'error');\n        return;\n      }\n\n      try {\n        const fileContent = await this.readFile(this.csvFile);\n        const csvData = this.parseCsv(fileContent);\n        this.updateTableData(csvData);\n        this.showSnackbar('CSV caricato con successo!', 'success');\n      } catch (error) {\n        console.error('Errore durante l’elaborazione del CSV:', error);\n        this.showSnackbar('Errore durante l’elaborazione del CSV.', 'error');\n      } finally {\n        this.closeCsvDialog();\n      }\n    },\n\n    // Leggere il file CSV come testo\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsText(file);\n      });\n    },\n\n    // Analizzare il CSV in formato JSON\n    parseCsv(content) {\n      const rows = content.split('\\n').filter(row => row.trim());\n      const headers = rows.shift().split(';');\n      return rows.map(row => {\n        const values = row.split(';');\n        return headers.reduce((acc, header, index) => {\n          acc[header] = values[index];\n          return acc;\n        }, {});\n      });\n    },\n\n    // Aggiornare i dati della tabella\n    updateTableData(csvData) {\n      csvData.forEach(newItem => {\n        const existingItem = this.msg.data.find(item => item.name === newItem.name);\n        if (existingItem) {\n          Object.assign(existingItem, newItem);\n        } else {\n          this.msg.data.push(newItem);\n        }\n      });\n    },\n  },\n};\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 300,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c9dfcc7834834d4b",
        "type": "ui-template",
        "z": "9919b96619183950",
        "d": true,
        "group": "4ef9bcc0d874c9bb",
        "page": "",
        "ui": "",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Main Card Header -->\n  <v-card-item class=\"bg-blue-darken-3\">\n    <v-row class=\"my-2 align-self-center\" no-gutters>\n      <!-- Button to Upload CSV -->\n      <v-btn class=\"mx-2 align-self-center\" v-show=\"!editMode\" @click=\"openCsvDialog\" variant=\"tonal\">\n        <v-icon class=\"mx-1 align-self-center\" left>mdi-file-upload</v-icon>\n        <span class=\"mx-1 align-self-center font-weight-bold\">Upload CSV</span>\n      </v-btn>\n    </v-row>\n  </v-card-item>\n\n  <!-- Dialog for CSV Upload -->\n  <v-dialog v-model=\"csvDialog\" max-width=\"500px\" persistent>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h5\">Upload CSV</span>\n      </v-card-title>\n      <v-card-text>\n        <v-file-input v-model=\"csvFile\" label=\"Select a CSV file\" accept=\".csv\" clearable hide-details></v-file-input>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue-darken-1\" text @click=\"closeCsvDialog\">Cancel</v-btn>\n        <v-btn color=\"blue-darken-1\" text @click=\"processCsv\">Insert</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n\n  <!-- Snackbar for Notifications -->\n  <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" timeout=\"3000\">\n    <v-row class=\"mx-4 align-self-center\">\n      <v-col class=\"my-2 text-subtitle-1 text-center\">\n        {{ snackbar.text }}\n      </v-col>\n    </v-row>\n  </v-snackbar>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        csvDialog: false, // Controls the visibility of the CSV upload dialog\n        csvFile: null,    // Stores the selected CSV file\n        snackbar: {\n        show: false,\n        text: '',\n        color: ''\n      }\n      };\n    },\n    methods: {\n      // Opens the CSV upload dialog\n      openCsvDialog() {\n        this.csvDialog = true;\n      },\n      // Closes the CSV upload dialog\n      closeCsvDialog() {\n        this.csvDialog = false;\n        this.csvFile = null;\n      },\n  \n      // Processes the uploaded CSV file\n      async processCsv() {\n        if (!this.csvFile) {\n          this.showSnackbar('No file selected!', 'error');\n          return;\n        }\n  \n        try {\n          // Read the CSV file content\n          const fileContent = await this.readFile(this.csvFile);\n          // Parse the CSV content into a JSON structure\n          const csvData = this.parseCsv(fileContent);\n          // Update the table with the parsed data\n          this.updateTableData(csvData);\n          this.showSnackbar('CSV successfully uploaded!', 'success');\n        } catch (error) {\n          console.error('Error processing CSV:', error);\n          this.showSnackbar(`Error processing CSV. ${error}`, 'error');\n        } finally {\n          // Close the dialog after processing\n          this.closeCsvDialog();\n        }\n      },\n  \n      // Reads the CSV file as plain text\n      readFile(file) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = () => reject(reader.error);\n          reader.readAsText(file);\n        });\n      },\n  \n      // Parses the CSV file content into an array of objects\n      parseCsv(content) {\n        const rows = content.split('\\n').filter(row => row.trim()); // Split content into rows and ignore empty ones\n        const headers = rows.shift().split(';'); // Use the first row as headers\n        return rows.map(row => {\n          const values = row.split(';'); // Split each row into values\n          return headers.reduce((acc, header, index) => {\n            acc[header] = values[index]; // Map headers to corresponding values\n            return acc;\n          }, {});\n        });\n      },\n  \n      // Updates the table by modifying existing rows or adding new ones\n      updateTableData(csvData) {\n        csvData.forEach(newItem => {\n          // Check if an item with the same name exists\n          const existingItem = this.msg.data.find(item => item.name === newItem.name);\n          if (existingItem) {\n            // Update existing item\n            Object.assign(existingItem, newItem);\n          } else {\n            // Add new item to the table\n            this.msg.data.push(newItem);\n          }\n        });\n      },\n  \n      // Snackbar notification utility\n      showSnackbar(message, type) {\n        this.snackbar.text = message;\n        this.snackbar.color = type === 'success' ? 'green-lighten-3' \n                            : type === 'error' ? 'red-lighten-3' \n                            : 'blue-lighten-5';\n        this.snackbar.show = true;\n      },\n    },\n  };\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 260,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a26eec4a2095d0ed",
        "type": "ui-template",
        "z": "9919b96619183950",
        "d": true,
        "group": "4ef9bcc0d874c9bb",
        "page": "",
        "ui": "",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container>\n    <!-- Delete Button -->\n    <v-btn color=\"red\" dark @click=\"openDeleteDialog\">\n      Delete\n    </v-btn>\n\n    <!-- Delete Confirmation Dialog -->\n    <v-dialog v-model=\"dialog\" max-width=\"500\" persistent>\n      <v-card>\n        <v-card-title class=\"headline mt-1\">\n          Confirm Deletion\n        </v-card-title>\n\n        <v-card-text>\n        <p>Deleting this element will also remove associated process data stored in the database.</p>\n        <p class=\"mt-6\">Are you sure you want to proceed?</p>\n        </v-card-text>\n          \n\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <!-- Cancel Button -->\n          <v-btn color=\"blue\" text @click=\"cancelDeletion\">\n            Cancel\n          </v-btn>\n          <!-- Confirm Button -->\n          <v-btn color=\"red\" text @click=\"confirmDeletion\">\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      dialog: false, // Controls the visibility of the dialog\n    };\n  },\n  methods: {\n    // Open the delete confirmation dialog\n    openDeleteDialog() {\n      this.dialog = true;\n    },\n\n    // Cancel the deletion and close the dialog\n    cancelDeletion() {\n      this.dialog = false;\n    },\n\n    // Confirm the deletion and execute the deletion logic\n    confirmDeletion() {\n      this.dialog = false;\n      // Perform the deletion (e.g., API call or database operation)\n      this.deleteElement();\n    },\n\n    // Function to handle the actual deletion process\n    deleteElement() {\n      // Replace this with your deletion logic (e.g., Axios call to backend API)\n      console.log('Element and associated data deleted from database');\n      // Example API call:\n      // axios.delete('/api/delete-element', { data: { id: this.elementId } })\n      //   .then(response => {\n      //     console.log('Deletion successful:', response);\n      //   })\n      //   .catch(error => {\n      //     console.error('Error deleting element:', error);\n      //   });\n    },\n  },\n};\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 200,
        "y": 320,
        "wires": [
            []
        ]
    }
]